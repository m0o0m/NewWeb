// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace ProtoCmd.Service {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class Msg {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_MyTest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MyTest, global::ProtoCmd.Service.MyTest.Builder> internal__static_ProtoCmd_Service_MyTest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_CMsg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CMsg, global::ProtoCmd.Service.CMsg.Builder> internal__static_ProtoCmd_Service_CMsg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_CMsgHead__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CMsgHead, global::ProtoCmd.Service.CMsgHead.Builder> internal__static_ProtoCmd_Service_CMsgHead__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_CMsgReg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CMsgReg, global::ProtoCmd.Service.CMsgReg.Builder> internal__static_ProtoCmd_Service_CMsgReg__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Msg() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cgltc2cucHJvdG8SEFByb3RvQ21kLlNlcnZpY2UiEwoGTXlUZXN0EgkKAXQY" + 
          "ASACKA0iKAoEQ01zZxIPCgdtc2doZWFkGAEgAigJEg8KB21zZ2JvZHkYAiAC" + 
          "KAkiKwoIQ01zZ0hlYWQSDgoGbXNnbGVuGAEgAigFEg8KB21zZ3R5cGUYAiAC" + 
          "KAUiFAoHQ01zZ1JlZxIJCgF0GAEgASgFKjYKClNlcnZpY2VDbWQSDAoIU0Nf" + 
          "QkVHSU4QARILCgdTQ19URVNUEAISDQoIU0NfVE9UQUwQyAE=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_ProtoCmd_Service_MyTest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_ProtoCmd_Service_MyTest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MyTest, global::ProtoCmd.Service.MyTest.Builder>(internal__static_ProtoCmd_Service_MyTest__Descriptor,
                new string[] { "T", });
        internal__static_ProtoCmd_Service_CMsg__Descriptor = Descriptor.MessageTypes[1];
        internal__static_ProtoCmd_Service_CMsg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CMsg, global::ProtoCmd.Service.CMsg.Builder>(internal__static_ProtoCmd_Service_CMsg__Descriptor,
                new string[] { "Msghead", "Msgbody", });
        internal__static_ProtoCmd_Service_CMsgHead__Descriptor = Descriptor.MessageTypes[2];
        internal__static_ProtoCmd_Service_CMsgHead__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CMsgHead, global::ProtoCmd.Service.CMsgHead.Builder>(internal__static_ProtoCmd_Service_CMsgHead__Descriptor,
                new string[] { "Msglen", "Msgtype", });
        internal__static_ProtoCmd_Service_CMsgReg__Descriptor = Descriptor.MessageTypes[3];
        internal__static_ProtoCmd_Service_CMsgReg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CMsgReg, global::ProtoCmd.Service.CMsgReg.Builder>(internal__static_ProtoCmd_Service_CMsgReg__Descriptor,
                new string[] { "T", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public enum ServiceCmd {
    SC_BEGIN = 1,
    SC_TEST = 2,
    SC_TOTAL = 200,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MyTest : pb::GeneratedMessage<MyTest, MyTest.Builder> {
    private MyTest() { }
    private static readonly MyTest defaultInstance = new MyTest().MakeReadOnly();
    private static readonly string[] _myTestFieldNames = new string[] { "t" };
    private static readonly uint[] _myTestFieldTags = new uint[] { 8 };
    public static MyTest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MyTest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MyTest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Msg.internal__static_ProtoCmd_Service_MyTest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MyTest, MyTest.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Msg.internal__static_ProtoCmd_Service_MyTest__FieldAccessorTable; }
    }
    
    public const int TFieldNumber = 1;
    private bool hasT;
    private uint t_;
    public bool HasT {
      get { return hasT; }
    }
    [global::System.CLSCompliant(false)]
    public uint T {
      get { return t_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasT) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _myTestFieldNames;
      if (hasT) {
        output.WriteUInt32(1, field_names[0], T);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasT) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, T);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MyTest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MyTest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MyTest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MyTest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MyTest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MyTest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MyTest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MyTest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MyTest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MyTest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MyTest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MyTest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MyTest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MyTest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MyTest result;
      
      private MyTest PrepareBuilder() {
        if (resultIsReadOnly) {
          MyTest original = result;
          result = new MyTest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MyTest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.MyTest.Descriptor; }
      }
      
      public override MyTest DefaultInstanceForType {
        get { return global::ProtoCmd.Service.MyTest.DefaultInstance; }
      }
      
      public override MyTest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MyTest) {
          return MergeFrom((MyTest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MyTest other) {
        if (other == global::ProtoCmd.Service.MyTest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasT) {
          T = other.T;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_myTestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _myTestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasT = input.ReadUInt32(ref result.t_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasT {
        get { return result.hasT; }
      }
      [global::System.CLSCompliant(false)]
      public uint T {
        get { return result.T; }
        set { SetT(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetT(uint value) {
        PrepareBuilder();
        result.hasT = true;
        result.t_ = value;
        return this;
      }
      public Builder ClearT() {
        PrepareBuilder();
        result.hasT = false;
        result.t_ = 0;
        return this;
      }
    }
    static MyTest() {
      object.ReferenceEquals(global::ProtoCmd.Service.Msg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CMsg : pb::GeneratedMessage<CMsg, CMsg.Builder> {
    private CMsg() { }
    private static readonly CMsg defaultInstance = new CMsg().MakeReadOnly();
    private static readonly string[] _cMsgFieldNames = new string[] { "msgbody", "msghead" };
    private static readonly uint[] _cMsgFieldTags = new uint[] { 18, 10 };
    public static CMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CMsg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Msg.internal__static_ProtoCmd_Service_CMsg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CMsg, CMsg.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Msg.internal__static_ProtoCmd_Service_CMsg__FieldAccessorTable; }
    }
    
    public const int MsgheadFieldNumber = 1;
    private bool hasMsghead;
    private string msghead_ = "";
    public bool HasMsghead {
      get { return hasMsghead; }
    }
    public string Msghead {
      get { return msghead_; }
    }
    
    public const int MsgbodyFieldNumber = 2;
    private bool hasMsgbody;
    private string msgbody_ = "";
    public bool HasMsgbody {
      get { return hasMsgbody; }
    }
    public string Msgbody {
      get { return msgbody_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsghead) return false;
        if (!hasMsgbody) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cMsgFieldNames;
      if (hasMsghead) {
        output.WriteString(1, field_names[1], Msghead);
      }
      if (hasMsgbody) {
        output.WriteString(2, field_names[0], Msgbody);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMsghead) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Msghead);
        }
        if (hasMsgbody) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Msgbody);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CMsg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CMsg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CMsg result;
      
      private CMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          CMsg original = result;
          result = new CMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.CMsg.Descriptor; }
      }
      
      public override CMsg DefaultInstanceForType {
        get { return global::ProtoCmd.Service.CMsg.DefaultInstance; }
      }
      
      public override CMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CMsg) {
          return MergeFrom((CMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CMsg other) {
        if (other == global::ProtoCmd.Service.CMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsghead) {
          Msghead = other.Msghead;
        }
        if (other.HasMsgbody) {
          Msgbody = other.Msgbody;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cMsgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMsghead = input.ReadString(ref result.msghead_);
              break;
            }
            case 18: {
              result.hasMsgbody = input.ReadString(ref result.msgbody_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsghead {
        get { return result.hasMsghead; }
      }
      public string Msghead {
        get { return result.Msghead; }
        set { SetMsghead(value); }
      }
      public Builder SetMsghead(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsghead = true;
        result.msghead_ = value;
        return this;
      }
      public Builder ClearMsghead() {
        PrepareBuilder();
        result.hasMsghead = false;
        result.msghead_ = "";
        return this;
      }
      
      public bool HasMsgbody {
        get { return result.hasMsgbody; }
      }
      public string Msgbody {
        get { return result.Msgbody; }
        set { SetMsgbody(value); }
      }
      public Builder SetMsgbody(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsgbody = true;
        result.msgbody_ = value;
        return this;
      }
      public Builder ClearMsgbody() {
        PrepareBuilder();
        result.hasMsgbody = false;
        result.msgbody_ = "";
        return this;
      }
    }
    static CMsg() {
      object.ReferenceEquals(global::ProtoCmd.Service.Msg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CMsgHead : pb::GeneratedMessage<CMsgHead, CMsgHead.Builder> {
    private CMsgHead() { }
    private static readonly CMsgHead defaultInstance = new CMsgHead().MakeReadOnly();
    private static readonly string[] _cMsgHeadFieldNames = new string[] { "msglen", "msgtype" };
    private static readonly uint[] _cMsgHeadFieldTags = new uint[] { 8, 16 };
    public static CMsgHead DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CMsgHead DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CMsgHead ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Msg.internal__static_ProtoCmd_Service_CMsgHead__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CMsgHead, CMsgHead.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Msg.internal__static_ProtoCmd_Service_CMsgHead__FieldAccessorTable; }
    }
    
    public const int MsglenFieldNumber = 1;
    private bool hasMsglen;
    private int msglen_;
    public bool HasMsglen {
      get { return hasMsglen; }
    }
    public int Msglen {
      get { return msglen_; }
    }
    
    public const int MsgtypeFieldNumber = 2;
    private bool hasMsgtype;
    private int msgtype_;
    public bool HasMsgtype {
      get { return hasMsgtype; }
    }
    public int Msgtype {
      get { return msgtype_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsglen) return false;
        if (!hasMsgtype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cMsgHeadFieldNames;
      if (hasMsglen) {
        output.WriteInt32(1, field_names[0], Msglen);
      }
      if (hasMsgtype) {
        output.WriteInt32(2, field_names[1], Msgtype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMsglen) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Msglen);
        }
        if (hasMsgtype) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Msgtype);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CMsgHead ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CMsgHead ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CMsgHead ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CMsgHead ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CMsgHead ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CMsgHead ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CMsgHead ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CMsgHead ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CMsgHead ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CMsgHead ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CMsgHead MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CMsgHead prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CMsgHead, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CMsgHead cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CMsgHead result;
      
      private CMsgHead PrepareBuilder() {
        if (resultIsReadOnly) {
          CMsgHead original = result;
          result = new CMsgHead();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CMsgHead MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.CMsgHead.Descriptor; }
      }
      
      public override CMsgHead DefaultInstanceForType {
        get { return global::ProtoCmd.Service.CMsgHead.DefaultInstance; }
      }
      
      public override CMsgHead BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CMsgHead) {
          return MergeFrom((CMsgHead) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CMsgHead other) {
        if (other == global::ProtoCmd.Service.CMsgHead.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsglen) {
          Msglen = other.Msglen;
        }
        if (other.HasMsgtype) {
          Msgtype = other.Msgtype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cMsgHeadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cMsgHeadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMsglen = input.ReadInt32(ref result.msglen_);
              break;
            }
            case 16: {
              result.hasMsgtype = input.ReadInt32(ref result.msgtype_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsglen {
        get { return result.hasMsglen; }
      }
      public int Msglen {
        get { return result.Msglen; }
        set { SetMsglen(value); }
      }
      public Builder SetMsglen(int value) {
        PrepareBuilder();
        result.hasMsglen = true;
        result.msglen_ = value;
        return this;
      }
      public Builder ClearMsglen() {
        PrepareBuilder();
        result.hasMsglen = false;
        result.msglen_ = 0;
        return this;
      }
      
      public bool HasMsgtype {
        get { return result.hasMsgtype; }
      }
      public int Msgtype {
        get { return result.Msgtype; }
        set { SetMsgtype(value); }
      }
      public Builder SetMsgtype(int value) {
        PrepareBuilder();
        result.hasMsgtype = true;
        result.msgtype_ = value;
        return this;
      }
      public Builder ClearMsgtype() {
        PrepareBuilder();
        result.hasMsgtype = false;
        result.msgtype_ = 0;
        return this;
      }
    }
    static CMsgHead() {
      object.ReferenceEquals(global::ProtoCmd.Service.Msg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CMsgReg : pb::GeneratedMessage<CMsgReg, CMsgReg.Builder> {
    private CMsgReg() { }
    private static readonly CMsgReg defaultInstance = new CMsgReg().MakeReadOnly();
    private static readonly string[] _cMsgRegFieldNames = new string[] { "t" };
    private static readonly uint[] _cMsgRegFieldTags = new uint[] { 8 };
    public static CMsgReg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CMsgReg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CMsgReg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Msg.internal__static_ProtoCmd_Service_CMsgReg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CMsgReg, CMsgReg.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Msg.internal__static_ProtoCmd_Service_CMsgReg__FieldAccessorTable; }
    }
    
    public const int TFieldNumber = 1;
    private bool hasT;
    private int t_;
    public bool HasT {
      get { return hasT; }
    }
    public int T {
      get { return t_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cMsgRegFieldNames;
      if (hasT) {
        output.WriteInt32(1, field_names[0], T);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasT) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, T);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CMsgReg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CMsgReg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CMsgReg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CMsgReg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CMsgReg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CMsgReg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CMsgReg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CMsgReg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CMsgReg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CMsgReg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CMsgReg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CMsgReg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CMsgReg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CMsgReg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CMsgReg result;
      
      private CMsgReg PrepareBuilder() {
        if (resultIsReadOnly) {
          CMsgReg original = result;
          result = new CMsgReg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CMsgReg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.CMsgReg.Descriptor; }
      }
      
      public override CMsgReg DefaultInstanceForType {
        get { return global::ProtoCmd.Service.CMsgReg.DefaultInstance; }
      }
      
      public override CMsgReg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CMsgReg) {
          return MergeFrom((CMsgReg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CMsgReg other) {
        if (other == global::ProtoCmd.Service.CMsgReg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasT) {
          T = other.T;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cMsgRegFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cMsgRegFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasT = input.ReadInt32(ref result.t_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasT {
        get { return result.hasT; }
      }
      public int T {
        get { return result.T; }
        set { SetT(value); }
      }
      public Builder SetT(int value) {
        PrepareBuilder();
        result.hasT = true;
        result.t_ = value;
        return this;
      }
      public Builder ClearT() {
        PrepareBuilder();
        result.hasT = false;
        result.t_ = 0;
        return this;
      }
    }
    static CMsgReg() {
      object.ReferenceEquals(global::ProtoCmd.Service.Msg.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
