// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace ProtoCmd.Service {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Service {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetZfbPotOpenReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetZfbPotOpenReq, global::ProtoCmd.Service.BGSetZfbPotOpenReq.Builder> internal__static_ProtoCmd_Service_BGSetZfbPotOpenReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetZfbPotOpenRes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetZfbPotOpenRes, global::ProtoCmd.Service.BGSetZfbPotOpenRes.Builder> internal__static_ProtoCmd_Service_BGSetZfbPotOpenRes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_GetPotSwitchResp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.GetPotSwitchResp, global::ProtoCmd.Service.GetPotSwitchResp.Builder> internal__static_ProtoCmd_Service_GetPotSwitchResp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_PotSwitchResp__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.PotSwitchResp, global::ProtoCmd.Service.PotSwitchResp.Builder> internal__static_ProtoCmd_Service_PotSwitchResp__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_PotSwitch__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.PotSwitch, global::ProtoCmd.Service.PotSwitch.Builder> internal__static_ProtoCmd_Service_PotSwitch__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Test_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Test_S, global::ProtoCmd.Service.Service_Test_S.Builder> internal__static_ProtoCmd_Service_Service_Test_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Kick_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Kick_C, global::ProtoCmd.Service.Service_Kick_C.Builder> internal__static_ProtoCmd_Service_Service_Kick_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Kick_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Kick_S, global::ProtoCmd.Service.Service_Kick_S.Builder> internal__static_ProtoCmd_Service_Service_Kick_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Query_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_C, global::ProtoCmd.Service.Service_Query_C.Builder> internal__static_ProtoCmd_Service_Service_Query_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Query_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_S, global::ProtoCmd.Service.Service_Query_S.Builder> internal__static_ProtoCmd_Service_Service_Query_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Freeze_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Freeze_C, global::ProtoCmd.Service.Service_Freeze_C.Builder> internal__static_ProtoCmd_Service_Service_Freeze_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Freeze_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Freeze_S, global::ProtoCmd.Service.Service_Freeze_S.Builder> internal__static_ProtoCmd_Service_Service_Freeze_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Send_SysMail_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Send_SysMail_C, global::ProtoCmd.Service.Service_Send_SysMail_C.Builder> internal__static_ProtoCmd_Service_Service_Send_SysMail_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Send_CloseServer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Send_CloseServer, global::ProtoCmd.Service.Service_Send_CloseServer.Builder> internal__static_ProtoCmd_Service_Service_Send_CloseServer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Query_ServerStatus_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_ServerStatus_S, global::ProtoCmd.Service.Service_Query_ServerStatus_S.Builder> internal__static_ProtoCmd_Service_Service_Query_ServerStatus_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Query_OnlineUser_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_OnlineUser_C, global::ProtoCmd.Service.Service_Query_OnlineUser_C.Builder> internal__static_ProtoCmd_Service_Service_Query_OnlineUser_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_OnlineUserInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_OnlineUserInfo, global::ProtoCmd.Service.Service_OnlineUserInfo.Builder> internal__static_ProtoCmd_Service_Service_OnlineUserInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Query_OnlineUser_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_OnlineUser_S, global::ProtoCmd.Service.Service_Query_OnlineUser_S.Builder> internal__static_ProtoCmd_Service_Service_Query_OnlineUser_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Query_UseOperHis_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_UseOperHis_C, global::ProtoCmd.Service.Service_Query_UseOperHis_C.Builder> internal__static_ProtoCmd_Service_Service_Query_UseOperHis_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_UserOperHisInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_UserOperHisInfo, global::ProtoCmd.Service.Service_UserOperHisInfo.Builder> internal__static_ProtoCmd_Service_Service_UserOperHisInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Query_UseOperHis_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_UseOperHis_S, global::ProtoCmd.Service.Service_Query_UseOperHis_S.Builder> internal__static_ProtoCmd_Service_Service_Query_UseOperHis_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Send_AnnounceMent_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Send_AnnounceMent_C, global::ProtoCmd.Service.Service_Send_AnnounceMent_C.Builder> internal__static_ProtoCmd_Service_Service_Send_AnnounceMent_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_BanSpeak_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanSpeak_C, global::ProtoCmd.Service.Service_BanSpeak_C.Builder> internal__static_ProtoCmd_Service_Service_BanSpeak_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_BanSpeak_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanSpeak_S, global::ProtoCmd.Service.Service_BanSpeak_S.Builder> internal__static_ProtoCmd_Service_Service_BanSpeak_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_OnlineAddGold_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_OnlineAddGold_C, global::ProtoCmd.Service.Service_OnlineAddGold_C.Builder> internal__static_ProtoCmd_Service_Service_OnlineAddGold_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_OnlineAddGold_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_OnlineAddGold_S, global::ProtoCmd.Service.Service_OnlineAddGold_S.Builder> internal__static_ProtoCmd_Service_Service_OnlineAddGold_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_QueryInternalLogin_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_QueryInternalLogin_S, global::ProtoCmd.Service.Service_QueryInternalLogin_S.Builder> internal__static_ProtoCmd_Service_Service_QueryInternalLogin_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_SetInternalLogin_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_SetInternalLogin_C, global::ProtoCmd.Service.Service_SetInternalLogin_C.Builder> internal__static_ProtoCmd_Service_Service_SetInternalLogin_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_SetInternalLogin_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_SetInternalLogin_S, global::ProtoCmd.Service.Service_SetInternalLogin_S.Builder> internal__static_ProtoCmd_Service_Service_SetInternalLogin_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_ItemMail_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ItemMail_C, global::ProtoCmd.Service.Service_ItemMail_C.Builder> internal__static_ProtoCmd_Service_Service_ItemMail_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_ItemMail_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ItemMail_S, global::ProtoCmd.Service.Service_ItemMail_S.Builder> internal__static_ProtoCmd_Service_Service_ItemMail_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Fish_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Fish_C, global::ProtoCmd.Service.Service_Fish_C.Builder> internal__static_ProtoCmd_Service_Service_Fish_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_FishInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.FishInfo, global::ProtoCmd.Service.FishInfo.Builder> internal__static_ProtoCmd_Service_FishInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_Fish_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Fish_S, global::ProtoCmd.Service.Service_Fish_S.Builder> internal__static_ProtoCmd_Service_Service_Fish_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_BanIP_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanIP_C, global::ProtoCmd.Service.Service_BanIP_C.Builder> internal__static_ProtoCmd_Service_Service_BanIP_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_BanIP_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanIP_S, global::ProtoCmd.Service.Service_BanIP_S.Builder> internal__static_ProtoCmd_Service_Service_BanIP_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_RegIP_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_RegIP_C, global::ProtoCmd.Service.Service_RegIP_C.Builder> internal__static_ProtoCmd_Service_Service_RegIP_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_RegIP_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_RegIP_S, global::ProtoCmd.Service.Service_RegIP_S.Builder> internal__static_ProtoCmd_Service_Service_RegIP_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_TexasPot_Select_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexasPot_Select_S, global::ProtoCmd.Service.TexasPot_Select_S.Builder> internal__static_ProtoCmd_Service_TexasPot_Select_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_TexasPot_Operator_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexasPot_Operator_C, global::ProtoCmd.Service.TexasPot_Operator_C.Builder> internal__static_ProtoCmd_Service_TexasPot_Operator_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_TexasPot_Operator_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexasPot_Operator_S, global::ProtoCmd.Service.TexasPot_Operator_S.Builder> internal__static_ProtoCmd_Service_TexasPot_Operator_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_REDEVENLOPE_SELECT_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.REDEVENLOPE_SELECT_S, global::ProtoCmd.Service.REDEVENLOPE_SELECT_S.Builder> internal__static_ProtoCmd_Service_REDEVENLOPE_SELECT_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_C, global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_C.Builder> internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_S, global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_S.Builder> internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_BanMac_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanMac_C, global::ProtoCmd.Service.Service_BanMac_C.Builder> internal__static_ProtoCmd_Service_Service_BanMac_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_BanMac_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanMac_S, global::ProtoCmd.Service.Service_BanMac_S.Builder> internal__static_ProtoCmd_Service_Service_BanMac_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_ResetSafePwd_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ResetSafePwd_C, global::ProtoCmd.Service.Service_ResetSafePwd_C.Builder> internal__static_ProtoCmd_Service_Service_ResetSafePwd_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_ResetSafePwd_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ResetSafePwd_S, global::ProtoCmd.Service.Service_ResetSafePwd_S.Builder> internal__static_ProtoCmd_Service_Service_ResetSafePwd_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Scale_Select_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Scale_Select_S, global::ProtoCmd.Service.Scale_Select_S.Builder> internal__static_ProtoCmd_Service_Scale_Select_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Scale_Operator_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Scale_Operator_C, global::ProtoCmd.Service.Scale_Operator_C.Builder> internal__static_ProtoCmd_Service_Scale_Operator_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Scale_Operator_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Scale_Operator_S, global::ProtoCmd.Service.Scale_Operator_S.Builder> internal__static_ProtoCmd_Service_Scale_Operator_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_ClubUserMode_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ClubUserMode_C, global::ProtoCmd.Service.Service_ClubUserMode_C.Builder> internal__static_ProtoCmd_Service_Service_ClubUserMode_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Service_ClubUserMode_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ClubUserMode_S, global::ProtoCmd.Service.Service_ClubUserMode_S.Builder> internal__static_ProtoCmd_Service_Service_ClubUserMode_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Beland_Club_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Beland_Club_C, global::ProtoCmd.Service.Beland_Club_C.Builder> internal__static_ProtoCmd_Service_Beland_Club_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Beland_Club_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Beland_Club_S, global::ProtoCmd.Service.Beland_Club_S.Builder> internal__static_ProtoCmd_Service_Beland_Club_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_IPSTATUS_SELECT_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPSTATUS_SELECT_S, global::ProtoCmd.Service.IPSTATUS_SELECT_S.Builder> internal__static_ProtoCmd_Service_IPSTATUS_SELECT_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPSTATUS_OPERATOR_C, global::ProtoCmd.Service.IPSTATUS_OPERATOR_C.Builder> internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPSTATUS_OPERATOR_S, global::ProtoCmd.Service.IPSTATUS_OPERATOR_S.Builder> internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_IPWHITE_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPWHITE_C, global::ProtoCmd.Service.IPWHITE_C.Builder> internal__static_ProtoCmd_Service_IPWHITE_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_IPWHITE_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPWHITE_S, global::ProtoCmd.Service.IPWHITE_S.Builder> internal__static_ProtoCmd_Service_IPWHITE_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_CANCEL_CLUB_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CANCEL_CLUB_C, global::ProtoCmd.Service.CANCEL_CLUB_C.Builder> internal__static_ProtoCmd_Service_CANCEL_CLUB_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_CANCEL_CLUB_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CANCEL_CLUB_S, global::ProtoCmd.Service.CANCEL_CLUB_S.Builder> internal__static_ProtoCmd_Service_CANCEL_CLUB_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_ROBOT_POT_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ROBOT_POT_C, global::ProtoCmd.Service.ROBOT_POT_C.Builder> internal__static_ProtoCmd_Service_ROBOT_POT_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_ROBOT_POT_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ROBOT_POT_S, global::ProtoCmd.Service.ROBOT_POT_S.Builder> internal__static_ProtoCmd_Service_ROBOT_POT_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetTexProPOTOpenReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetTexProPOTOpenReq, global::ProtoCmd.Service.BGSetTexProPOTOpenReq.Builder> internal__static_ProtoCmd_Service_BGSetTexProPOTOpenReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetTexProPOTOpenRes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetTexProPOTOpenRes, global::ProtoCmd.Service.BGSetTexProPOTOpenRes.Builder> internal__static_ProtoCmd_Service_BGSetTexProPOTOpenRes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_TexPro_Select_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexPro_Select_S, global::ProtoCmd.Service.TexPro_Select_S.Builder> internal__static_ProtoCmd_Service_TexPro_Select_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_TexPro_Operator_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexPro_Operator_C, global::ProtoCmd.Service.TexPro_Operator_C.Builder> internal__static_ProtoCmd_Service_TexPro_Operator_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_TexPro_Operator_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexPro_Operator_S, global::ProtoCmd.Service.TexPro_Operator_S.Builder> internal__static_ProtoCmd_Service_TexPro_Operator_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Module_Switch_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Module_Switch_C, global::ProtoCmd.Service.Module_Switch_C.Builder> internal__static_ProtoCmd_Service_Module_Switch_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_Module_Switch_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Module_Switch_S, global::ProtoCmd.Service.Module_Switch_S.Builder> internal__static_ProtoCmd_Service_Module_Switch_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_ClientGame_Switch_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ClientGame_Switch_C, global::ProtoCmd.Service.ClientGame_Switch_C.Builder> internal__static_ProtoCmd_Service_ClientGame_Switch_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_ClientGame_Switch_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ClientGame_Switch_S, global::ProtoCmd.Service.ClientGame_Switch_S.Builder> internal__static_ProtoCmd_Service_ClientGame_Switch_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetIndebatedRebateOpenReq, global::ProtoCmd.Service.BGSetIndebatedRebateOpenReq.Builder> internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenRes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetIndebatedRebateOpenRes, global::ProtoCmd.Service.BGSetIndebatedRebateOpenRes.Builder> internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenRes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_PopUpControl_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.PopUpControl_S, global::ProtoCmd.Service.PopUpControl_S.Builder> internal__static_ProtoCmd_Service_PopUpControl_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_MobileSwitch__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MobileSwitch, global::ProtoCmd.Service.MobileSwitch.Builder> internal__static_ProtoCmd_Service_MobileSwitch__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_MobileSwitchs_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MobileSwitchs_S, global::ProtoCmd.Service.MobileSwitchs_S.Builder> internal__static_ProtoCmd_Service_MobileSwitchs_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_MobileSwitchOperator_C__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MobileSwitchOperator_C, global::ProtoCmd.Service.MobileSwitchOperator_C.Builder> internal__static_ProtoCmd_Service_MobileSwitchOperator_C__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_MobileSwitchOperator_S__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MobileSwitchOperator_S, global::ProtoCmd.Service.MobileSwitchOperator_S.Builder> internal__static_ProtoCmd_Service_MobileSwitchOperator_S__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetHerocraftTwiceOpenReq, global::ProtoCmd.Service.BGSetHerocraftTwiceOpenReq.Builder> internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenRes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetHerocraftTwiceOpenRes, global::ProtoCmd.Service.BGSetHerocraftTwiceOpenRes.Builder> internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenRes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetMidautumnFestivalOpenReq, global::ProtoCmd.Service.BGSetMidautumnFestivalOpenReq.Builder> internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenRes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetMidautumnFestivalOpenRes, global::ProtoCmd.Service.BGSetMidautumnFestivalOpenRes.Builder> internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenRes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_QueryRobotStatu__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.QueryRobotStatu, global::ProtoCmd.Service.QueryRobotStatu.Builder> internal__static_ProtoCmd_Service_QueryRobotStatu__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_ModifyRobotConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ModifyRobotConfig, global::ProtoCmd.Service.ModifyRobotConfig.Builder> internal__static_ProtoCmd_Service_ModifyRobotConfig__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_LoginRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.LoginRequest, global::ProtoCmd.Service.LoginRequest.Builder> internal__static_ProtoCmd_Service_LoginRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_GameStatu__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.GameStatu, global::ProtoCmd.Service.GameStatu.Builder> internal__static_ProtoCmd_Service_GameStatu__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_GameOverView__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.GameOverView, global::ProtoCmd.Service.GameOverView.Builder> internal__static_ProtoCmd_Service_GameOverView__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_SystemStatu__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.SystemStatu, global::ProtoCmd.Service.SystemStatu.Builder> internal__static_ProtoCmd_Service_SystemStatu__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_RobotStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.RobotStatus, global::ProtoCmd.Service.RobotStatus.Builder> internal__static_ProtoCmd_Service_RobotStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_ErrorMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ErrorMessage, global::ProtoCmd.Service.ErrorMessage.Builder> internal__static_ProtoCmd_Service_ErrorMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_UserStateReq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.UserStateReq, global::ProtoCmd.Service.UserStateReq.Builder> internal__static_ProtoCmd_Service_UserStateReq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_ProtoCmd_Service_UserStateRes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.UserStateRes, global::ProtoCmd.Service.UserStateRes.Builder> internal__static_ProtoCmd_Service_UserStateRes__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Service() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TZXJ2aWNlLnByb3RvEhBQcm90b0NtZC5TZXJ2aWNlIiQKEkJHU2V0WmZi", 
            "UG90T3BlblJlcRIOCgZpc09wZW4YASABKAUiNQoSQkdTZXRaZmJQb3RPcGVu", 
            "UmVzEgsKA3N1YxgBIAEoBRISCgpjdXJyU3RhdHVzGAIgASgFIiIKEEdldFBv", 
            "dFN3aXRjaFJlc3ASDgoGc3dpdGNoGAEgAigNIh8KDVBvdFN3aXRjaFJlc3AS", 
            "DgoGcmVzdWx0GAEgAigNIiwKCVBvdFN3aXRjaBIPCgd0YWJsZWlkGAEgAigN", 
            "Eg4KBmNvbmZpZxgCIAIoDSIwCg5TZXJ2aWNlX1Rlc3RfUxIRCglzekFjY291", 
            "bnQYASACKAkSCwoDc3VjGAIgAigIIiIKDlNlcnZpY2VfS2lja19DEhAKCGR3", 
            "VXNlcklEGAEgAigNIh0KDlNlcnZpY2VfS2lja19TEgsKA3N1YxgBIAIoCCIk", 
            "Cg9TZXJ2aWNlX1F1ZXJ5X0MSEQoJc3pBY2NvdW50GAEgAigJIu8BCg9TZXJ2", 
            "aWNlX1F1ZXJ5X1MSEAoIZHdVc2VySUQYASACKA0SEQoJc3pBY2NvdW50GAIg", 
            "AigJEhIKCnN6Tmlja05hbWUYAyACKAkSEAoIc3pUZWxOdW0YBCACKAkSDwoH", 
            "c3pFbWFpbBgFIAIoCRIQCghpc09ubGluZRgGIAEoCBIQCghpc0ZyZWV6ZRgH", 
            "IAIoCBISCgpzelRydWVOYW1lGAggAigJEhIKCnN6SWRlbnRpdHkYCSACKAkS", 
            "CwoDc2V4GAogAigNEhEKCWR3QWdlbnRJRBgLIAIoDRIUCgxzekNyZWF0ZVRp", 
            "bWUYDCACKAkiSAoQU2VydmljZV9GcmVlemVfQxIQCghkd1VzZXJJRBgBIAIo", 
            "DRIQCghkd0ZyZWV6ZRgCIAIoDRIQCghkd01pbnV0ZRgDIAIoDSIfChBTZXJ2", 
            "aWNlX0ZyZWV6ZV9TEgsKA3N1YxgBIAIoCCI8ChZTZXJ2aWNlX1NlbmRfU3lz", 
            "TWFpbF9DEg8KB3N6VGl0bGUYASACKAkSEQoJc3pDb250ZXh0GAIgAigJIikK", 
            "GFNlcnZpY2VfU2VuZF9DbG9zZVNlcnZlchINCgVjbG9zZRgBIAIoCCItChxT", 
            "ZXJ2aWNlX1F1ZXJ5X1NlcnZlclN0YXR1c19TEg0KBWNsb3NlGAEgAigIIkQK", 
            "GlNlcnZpY2VfUXVlcnlfT25saW5lVXNlcl9DEhMKC2R3UGFnZUluZGV4GAEg", 
            "AigNEhEKCWR3U2hvd051bRgCIAIoDSJjChZTZXJ2aWNlX09ubGluZVVzZXJJ", 
            "bmZvEhIKCnN0ckFjY291bnQYASACKAkSEAoIZHdVc2VySUQYAiACKA0SDQoF", 
            "c3RySVAYAyACKAkSFAoMc3RyTG9naW5UaW1lGAQgAigJIpoBChpTZXJ2aWNl", 
            "X1F1ZXJ5X09ubGluZVVzZXJfUxISCgpzdGFydEluZGV4GAEgAigNEg8KB3No", 
            "b3dOdW0YAiACKA0SDAoEcGFnZRgDIAIoDRIRCglwYWdlVG90YWwYBCACKA0S", 
            "NgoEbGlzdBgFIAMoCzIoLlByb3RvQ21kLlNlcnZpY2UuU2VydmljZV9Pbmxp", 
            "bmVVc2VySW5mbyJWChpTZXJ2aWNlX1F1ZXJ5X1VzZU9wZXJIaXNfQxIQCghk", 
            "d1VzZXJJRBgBIAIoDRITCgtkd1BhZ2VJbmRleBgCIAIoDRIRCglkd1Nob3dO", 
            "dW0YAyACKA0iOwoXU2VydmljZV9Vc2VyT3Blckhpc0luZm8SDwoHc3RyVGlt", 
            "ZRgBIAIoCRIPCgdjb250ZW50GAIgAigJIrEBChpTZXJ2aWNlX1F1ZXJ5X1Vz", 
            "ZU9wZXJIaXNfUxIQCghkd1VzZXJJRBgBIAIoDRISCgpzdGFydEluZGV4GAIg", 
            "AigNEg8KB3Nob3dOdW0YAyACKA0SDAoEcGFnZRgEIAIoDRIRCglwYWdlVG90", 
            "YWwYBSACKA0SOwoIbGlzdEluZm8YBiADKAsyKS5Qcm90b0NtZC5TZXJ2aWNl", 
            "LlNlcnZpY2VfVXNlck9wZXJIaXNJbmZvIlQKG1NlcnZpY2VfU2VuZF9Bbm5v", 
            "dW5jZU1lbnRfQxIPCgdjb250ZW50GAEgAigJEhAKCGR3UmVwZWF0GAIgAigN", 
            "EhIKCmR3SW50ZXJ2YWwYAyACKA0iSgoSU2VydmljZV9CYW5TcGVha19DEhAK", 
            "CGR3VXNlcklEGAEgAigNEhIKCmR3QmFuU3BlYWsYAiACKA0SDgoGbWludXRl", 
            "GAMgAigNIiEKElNlcnZpY2VfQmFuU3BlYWtfUxILCgNzdWMYASACKAgiPgoX", 
            "U2VydmljZV9PbmxpbmVBZGRHb2xkX0MSEAoIZHdVc2VySUQYASACKA0SEQoJ", 
            "ZHdBZGRHb2xkGAIgAigNIiYKF1NlcnZpY2VfT25saW5lQWRkR29sZF9TEgsK", 
            "A3N1YxgBIAIoCCIuChxTZXJ2aWNlX1F1ZXJ5SW50ZXJuYWxMb2dpbl9TEg4K", 
            "BmlzT3BlbhgBIAIoCCIrChpTZXJ2aWNlX1NldEludGVybmFsTG9naW5fQxIN", 
            "CgViT3BlbhgBIAIoCCIsChpTZXJ2aWNlX1NldEludGVybmFsTG9naW5fUxIO", 
            "CgZpc09wZW4YASACKAgioAEKElNlcnZpY2VfSXRlbU1haWxfQxIOCgZ1c2Vy", 
            "SUQYASADKA0SDQoFdGl0bGUYAiACKAkSDwoHY29udGV4dBgDIAIoCRIQCghp", 
            "dGVtVHlwZRgEIAEoDRIRCglpdGVtVmFsdWUYBSABKA0SDwoHaXRlbU51bRgG", 
            "IAEoDRIQCghpc0dsb2JhbBgHIAEoCBISCgphd2FyZF90eXBlGAggASgFIiEK", 
            "ElNlcnZpY2VfSXRlbU1haWxfUxILCgNzdWMYASACKAgiIAoOU2VydmljZV9G", 
            "aXNoX0MSDgoGdXNlcklEGAEgAigNIkYKCEZpc2hJbmZvEgwKBGRhdGUYASAC", 
            "KAkSDgoGaXRlbUlEGAIgAigNEgwKBG5hbWUYAyACKAkSDgoGZ2l2ZUlEGAQg", 
            "AigNIk4KDlNlcnZpY2VfRmlzaF9TEg4KBnVzZXJJRBgBIAIoDRIsCghmaXNo", 
            "TGlzdBgCIAMoCzIaLlByb3RvQ21kLlNlcnZpY2UuRmlzaEluZm8iLAoPU2Vy", 
            "dmljZV9CYW5JUF9DEgoKAmlwGAEgAigJEg0KBWlzQmFuGAIgAigIIh4KD1Nl", 
            "cnZpY2VfQmFuSVBfUxILCgNzdWMYASACKAgiPQoPU2VydmljZV9SZWdJUF9D", 
            "EgoKAmlwGAEgAigJEg0KBXRvdGFsGAIgAigNEg8KB2NvbnRlbnQYAyACKAki", 
            "HgoPU2VydmljZV9SZWdJUF9TEgsKA3N1YxgBIAIoCCIkChFUZXhhc1BvdF9T", 
            "ZWxlY3RfUxIPCgdDaGlwTnVtGAEgAigEIkoKE1RleGFzUG90X09wZXJhdG9y", 
            "X0MSDgoGb3BUeXBlGAEgAigNEg8KB29wVmFsdWUYAiACKAQSEgoKc3RyQ29u", 
            "dGVudBgDIAIoCSIyChNUZXhhc1BvdF9PcGVyYXRvcl9TEg4KBm9wVHlwZRgB", 
            "IAIoDRILCgNzdWMYAiACKAgiJQoUUkVERVZFTkxPUEVfU0VMRUNUX1MSDQoF", 
            "c3RhdGUYASACKAgiJwoWUkVERVZFTkxPUEVfT1BFUkFUT1JfQxINCgVzdGF0", 
            "ZRgBIAIoCCI2ChZSRURFVkVOTE9QRV9PUEVSQVRPUl9TEg0KBXN0YXRlGAEg", 
            "AigIEg0KBWJzdWNjGAIgAigIIjIKEFNlcnZpY2VfQmFuTWFjX0MSDwoHbWFj", 
            "QWRkchgBIAIoCRINCgVpc0JhbhgCIAIoCCIfChBTZXJ2aWNlX0Jhbk1hY19T", 
            "EgsKA3N1YxgBIAIoCCIqChZTZXJ2aWNlX1Jlc2V0U2FmZVB3ZF9DEhAKCGR3", 
            "VXNlcklEGAEgAigNIiUKFlNlcnZpY2VfUmVzZXRTYWZlUHdkX1MSCwoDc3Vj", 
            "GAEgAigIIiEKDlNjYWxlX1NlbGVjdF9TEg8KB0NoaXBOdW0YASACKAQiRwoQ", 
            "U2NhbGVfT3BlcmF0b3JfQxIOCgZvcFR5cGUYASACKA0SDwoHb3BWYWx1ZRgC", 
            "IAIoBBISCgpzdHJDb250ZW50GAMgAigJIi8KEFNjYWxlX09wZXJhdG9yX1MS", 
            "DgoGb3BUeXBlGAEgAigNEgsKA3N1YxgCIAIoCCIoChZTZXJ2aWNlX0NsdWJV", 
            "c2VyTW9kZV9DEg4KBmNsdWJJRBgBIAIoDSIlChZTZXJ2aWNlX0NsdWJVc2Vy", 
            "TW9kZV9TEgsKA3N1YxgBIAIoCCIxCg1CZWxhbmRfQ2x1Yl9DEg4KBmNsdWJJ", 
            "RBgBIAIoDRIQCghkd1VzZXJJRBgCIAIoDSIcCg1CZWxhbmRfQ2x1Yl9TEgsK", 
            "A3N1YxgBIAIoCCIiChFJUFNUQVRVU19TRUxFQ1RfUxINCgVzdGF0ZRgBIAIo", 
            "CCIkChNJUFNUQVRVU19PUEVSQVRPUl9DEg0KBXN0YXRlGAEgAigIIjMKE0lQ", 
            "U1RBVFVTX09QRVJBVE9SX1MSDQoFc3RhdGUYASACKAgSDQoFYnN1Y2MYAiAC", 
            "KAgiJAoJSVBXSElURV9DEgoKAmlwGAEgAigJEgsKA2FkZBgCIAIoCCIxCglJ", 
            "UFdISVRFX1MSCgoCaXAYASACKAkSCwoDYWRkGAIgAigIEgsKA3N1YxgDIAIo", 
            "CCIhCg1DQU5DRUxfQ0xVQl9DEhAKCGR3VXNlcklEGAEgAigNIhwKDUNBTkNF", 
            "TF9DTFVCX1MSCwoDc3VjGAEgAigIIjkKC1JPQk9UX1BPVF9DEgsKA3BvdBgB", 
            "IAIoARINCgVzdGFuZBgCIAIoARIOCgZnYW1lSUQYAyACKA0iGgoLUk9CT1Rf", 
            "UE9UX1MSCwoDc3VjGAEgAigIIicKFUJHU2V0VGV4UHJvUE9UT3BlblJlcRIO", 
            "CgZpc09wZW4YASABKAUiOAoVQkdTZXRUZXhQcm9QT1RPcGVuUmVzEgsKA3N1", 
            "YxgBIAEoBRISCgpjdXJyU3RhdHVzGAIgASgFIiIKD1RleFByb19TZWxlY3Rf", 
            "UxIPCgdDaGlwTnVtGAEgAigEIkgKEVRleFByb19PcGVyYXRvcl9DEg4KBm9w", 
            "VHlwZRgBIAIoDRIPCgdvcFZhbHVlGAIgAigEEhIKCnN0ckNvbnRlbnQYAyAC", 
            "KAkiMAoRVGV4UHJvX09wZXJhdG9yX1MSDgoGb3BUeXBlGAEgAigNEgsKA3N1", 
            "YxgCIAIoCCIwCg9Nb2R1bGVfU3dpdGNoX0MSDgoGbW9kdWxlGAEgAigNEg0K", 
            "BW9wZW5kGAIgAigNIi0KD01vZHVsZV9Td2l0Y2hfUxILCgNzdWMYASACKAgS", 
            "DQoFb3BlbmQYAiACKA0iNwoTQ2xpZW50R2FtZV9Td2l0Y2hfQxIOCgZnYW1l", 
            "SUQYASACKA0SEAoIcGxhdE9wZW4YAiADKA0iNAoTQ2xpZW50R2FtZV9Td2l0", 
            "Y2hfUxILCgNzdWMYASACKAgSEAoIcGxhdE9wZW4YAiADKA0iLQobQkdTZXRJ", 
            "bmRlYmF0ZWRSZWJhdGVPcGVuUmVxEg4KBmlzT3BlbhgBIAEoBSI+ChtCR1Nl", 
            "dEluZGViYXRlZFJlYmF0ZU9wZW5SZXMSCwoDc3VjGAEgASgFEhIKCmN1cnJT", 
            "dGF0dXMYAiABKAUiHQoOUG9wVXBDb250cm9sX1MSCwoDc3VjGAEgASgIIqMB", 
            "CgxNb2JpbGVTd2l0Y2gSCgoCaWQYASABKAUSFQoNbW9iaWxlX2RldmljZRgC", 
            "IAEoBRINCgVhZ2VudBgDIAEoBRIUCgxtb2JpbGVfYnJhbmQYBCABKAkSGAoQ", 
            "Y2xvc2VfbG9naW5fdHlwZRgFIAMoBRIbChNjbG9zZV9yZWdpc3Rlcl90eXBl", 
            "GAYgAygFEhQKDG1vYmlsZV9tb2RlbBgHIAMoCSJWCg9Nb2JpbGVTd2l0Y2hz", 
            "X1MSNgoObW9iaWxlX3N3aXRjaHMYASADKAsyHi5Qcm90b0NtZC5TZXJ2aWNl", 
            "Lk1vYmlsZVN3aXRjaBILCgNzdWMYAiABKAgiZgoWTW9iaWxlU3dpdGNoT3Bl", 
            "cmF0b3JfQxIVCg1vcGVyYXRvcl90eXBlGAEgASgFEjUKDW1vYmlsZV9zd2l0", 
            "Y2gYAiABKAsyHi5Qcm90b0NtZC5TZXJ2aWNlLk1vYmlsZVN3aXRjaCJzChZN", 
            "b2JpbGVTd2l0Y2hPcGVyYXRvcl9TEhUKDW9wZXJhdG9yX3R5cGUYASABKAUS", 
            "NQoNbW9iaWxlX3N3aXRjaBgCIAEoCzIeLlByb3RvQ21kLlNlcnZpY2UuTW9i", 
            "aWxlU3dpdGNoEgsKA3N1YxgDIAEoCCIsChpCR1NldEhlcm9jcmFmdFR3aWNl", 
            "T3BlblJlcRIOCgZpc09wZW4YASABKAUiPQoaQkdTZXRIZXJvY3JhZnRUd2lj", 
            "ZU9wZW5SZXMSCwoDc3VjGAEgASgFEhIKCmN1cnJTdGF0dXMYAiABKAUiLwod", 
            "QkdTZXRNaWRhdXR1bW5GZXN0aXZhbE9wZW5SZXESDgoGaXNPcGVuGAEgASgF", 
            "IkAKHUJHU2V0TWlkYXV0dW1uRmVzdGl2YWxPcGVuUmVzEgsKA3N1YxgBIAEo", 
            "BRISCgpjdXJyU3RhdHVzGAIgASgFIiYKD1F1ZXJ5Um9ib3RTdGF0dRITCgtt", 
            "b2R1bGVfdHlwZRgBIAEoDSJFChFNb2RpZnlSb2JvdENvbmZpZxIRCglnYW1l", 
            "X3R5cGUYASACKA0SDQoFbGltaXQYAiADKA0SDgoGaXNfYmV0GAMgASgNIqsB", 
            "CgxMb2dpblJlcXVlc3QSEQoJZ2FtZV90eXBlGAEgAigNEhcKD2xvZ2luX2Zy", 
            "ZXF1ZW5jeRgCIAIoDRIRCglsb2dpbl9jbnQYAyACKAUSEAoIc3RyYXRlZ3kY", 
            "BCABKA0iSgoIU3RyYWdldHkSFQoRVEVYQVNfUkFORE9NX0pPSU4QARIVChFU", 
            "RVhBU19RVUlDS19TVEFSVBACEhAKDFRFWEFTX05PUk1BTBADIlgKCUdhbWVT", 
            "dGF0dRIRCglnYW1lX3R5cGUYASACKA0SEgoKcGxheWVyX2NudBgCIAIoDRIU", 
            "CgxwbGF5ZXJfbGltaXQYAyADKA0SDgoGaXNfYmV0GAQgASgNIiIKDEdhbWVP", 
            "dmVyVmlldxISCgpwbGF5ZXJfY250GAIgAygNIoABCgtTeXN0ZW1TdGF0dRIT", 
            "CgtjcHVfcGVyY2VudBgBIAIoDRIQCghtZW1fdXNlZBgCIAIoBBIRCgltZW1f", 
            "dG90YWwYAyACKAQSEQoJZmxvd19yYXRlGAQgAigEEhAKCGNvbm5fY250GAUg", 
            "AigNEhIKCmNvbm5fbGltaXQYBiACKA0ivwEKC1JvYm90U3RhdHVzEhMKC21v", 
            "ZHVsZV90eXBlGAEgASgNEi8KCmdhbWVfc3RhdHUYAiADKAsyGy5Qcm90b0Nt", 
            "ZC5TZXJ2aWNlLkdhbWVTdGF0dRI1Cg1nYW1lX292ZXJ2aWV3GAMgASgLMh4u", 
            "UHJvdG9DbWQuU2VydmljZS5HYW1lT3ZlclZpZXcSMwoMc3lzdGVtX3N0YXR1", 
            "GAQgASgLMh0uUHJvdG9DbWQuU2VydmljZS5TeXN0ZW1TdGF0dSIlCgxFcnJv", 
            "ck1lc3NhZ2USFQoNZXJyb3JfbWVzc2FnZRgBIAIoCSIfCgxVc2VyU3RhdGVS", 
            "ZXESDwoHdXNlcl9pZBgBIAEoBSJSCgxVc2VyU3RhdGVSZXMSDwoHdXNlcl9p", 
            "ZBgBIAEoBRINCgVzdGF0ZRgCIAEoBRIPCgdyb29tX2lkGAMgASgFEhEKCXJv", 
            "b21fdHlwZRgEIAEoBSraCQoKU2VydmljZUNtZBIMCghTQ19CRUdJThALEhAK", 
            "DFNDX0tJQ0tfVVNFUhAMEhEKDVNDX1FVRVJZX1VTRVIQDRISCg5TQ19GUkVF", 
            "WkVfVVNFUhAOEhMKD1NDX1NFTkRfU1lTTUFJTBAPEhIKDlNDX1NFUlZFUl9T", 
            "VE9QEBASFwoTU0NfUVVFUllfT05MSU5FVVNFUhAREhgKFFNDX1FVRVJZX1VT", 
            "RVJPUEVSSElTEBISGQoVU0NfUVVFUllfU0VSVkVSU1RBVFVTEBMSGAoUU0Nf", 
            "U0VORF9BTk5PVU5DRU1FTlQQFBIQCgxTQ19CQU5fU1BFQUsQFRIPCgtTQ19B", 
            "RERfR09MRBAWEhoKFlNDX1FVRVJZX0lOVEVSTkFMTE9HSU4QFxIXChNTQ19T", 
            "RVRfSU5URVJBTExPR0lOEBgSFAoQU0NfU0VORF9JVEVNTUFJTBAZEhEKDVND", 
            "X1FVRVJZX0ZJU0gQGhITCg9TQ19CQU5fTE9HSU5fSVAQGxINCglTQ19SRUdf", 
            "SVAQHBIXChNTQ19TRUxFQ1RfVEVYQVNfUE9UEB0SGAoUU0NfT1BFUlRPUl9U", 
            "RVhBU19QT1QQHhIbChdTQ19TRUxFQ1RfUkVERVZFTkxPUEVfURAfEhwKGFND", 
            "X09QRVJUT1JfUkVERVZFTkxPUEVfURAgEhQKEFNDX0JBTl9MT0dJTl9NQUMQ", 
            "IRIXChNTQ19SRVNFVF9TQUZFQk9YUFdEECISEQoNU0NfUE9UX1NXSVRDSBAj", 
            "EhcKE1NDX1NFTEVDVF9TQ0FMRV9QT1QQJBIYChRTQ19PUEVSVE9SX1NBQ0xF", 
            "X1BPVBAlEhUKEVNDX0dFVF9QT1RfU1dJVENIECYSFAoQU0NfQ0xVQl9VU0VS", 
            "TU9ERRAnEhgKFFNDX1NFTEVDVF9JUFNUQVRVU19RECgSGQoVU0NfT1BFUlRP", 
            "Ul9JUFNUQVRVU19RECkSFwoTU0NfU0VUX0lQX1dISVRFTElTVBAqEhIKDlND", 
            "X0NBTkNFTF9DTFVCECsSFAoQU0NfU0VUX1JPQk9UX1BPVBAsEhIKDlNDX0JF", 
            "TEFORF9DTFVCEC0SEgoOU0NfUk9CT1RfUVVFUlkQLhITCg9TQ19ST0JPVF9N", 
            "T0RJRlkQLxISCg5TQ19ST0JPVF9MT0dJThAwEhYKElNDX1NFVF9aRkJQT1Rf", 
            "T1BFThAyEhEKDVNDX1VTRVJfU1RBVEUQMxIZChVTQ19TRVRfVEVYUFJPUE9U", 
            "X09QRU4QNBIYChRTQ19TRUxFQ1RfVEVYUFJPX1BPVBA1EhkKFVNDX09QRVJU", 
            "T1JfVEVYUFJPX1BPVBA2EhQKEFNDX01PRFVMRV9TV0lUQ0gQNxIZChVTQ19D", 
            "TElFTlRfR0FNRV9TV0lUQ0gQOBIgChxTQ19TRVRfSU5ERUJBVEVEX1JFQkFU", 
            "RV9PUEVOEDsSHgoaU0NfTlRGX1VQREFURV9QT1BVUENPTlRST0wQPBIVChFT", 
            "Q19NT0JJTEVfU1dJVENIUxA9Eh0KGVNDX01PQklMRV9TV0lUQ0hfT1BFUkFU", 
            "T1IQPhIfChtTQ19TRVRfSGVyb2NyYWZ0X1R3aWNlX09QRU4QQBIiCh5TQ19T", 
            "RVRfTUlEQVVUVU1OX0ZFU1RJVkFMX09QRU4QPxINCghTQ19UT1RBTBDIASrs", 
            "CQoJQ2VudGVyQ21kEgwKCENTX0JFR0lOEAsSFAoQQ1NfQ09OTkVDVF9FUlJP", 
            "UhAMEhQKEENTX0FDQ09VTlRfRVJST1IQDRIRCg1DU19RVUVSWV9VRVNSEA4S", 
            "EgoOQ1NfU0VSVkVSX1NUT1AQDxIQCgxDU19LSUNLX1VTRVIQEBISCg5DU19G", 
            "UkVFWkVfVVNFUhAREhcKE0NTX1FVRVJZX09OTElORVVTRVIQEhIYChRDU19R", 
            "VUVSWV9VU0VST1BFUkhJUxATEhMKD0NTX1NFTkRfU1lTTUFJTBAUEhkKFUNT", 
            "X1FVRVJZX1NFUlZFUlNUQVRVUxAVEhgKFENTX1NFTkRfQU5OT1VOQ0VNRU5U", 
            "EBYSGgoWQ1NfUVVFUllfSU5URVJOQUxMT0dJThAXEhcKE0NTX1NFVF9JTlRF", 
            "UkFMTE9HSU4QGBIUChBDU19TRU5EX0lURU1NQUlMEBkSEQoNQ1NfUVVFUllf", 
            "RklTSBAaEhAKDENTX0JBTl9TUEVBSxAbEhMKD0NTX0JBTl9MT0dJTl9JUBAc", 
            "Eg0KCUNTX1JFR19JUBAdEhcKE0NTX1NFTEVDVF9URVhBU19QT1QQHhIYChRD", 
            "U19PUEVSVE9SX1RFWEFTX1BPVBAfEhsKF0NTX1NFTEVDVF9SRURFVkVOTE9Q", 
            "RV9QECASHAoYQ1NfT1BFUlRPUl9SRURFVkVOTE9QRV9QECESFAoQQ1NfQkFO", 
            "X0xPR0lOX01BQxAiEhcKE0NTX1JFU0VUX1NBRkVCT1hQV0QQIxIXChNDU19T", 
            "RUxFQ1RfU0NBTEVfUE9UECQSGAoUQ1NfT1BFUlRPUl9TQ0FMRV9QT1QQJRIW", 
            "ChJDU19QT1RfU1dJVENIX1JFU1AQJhIaChZDU19HRVRfUE9UX1NXSVRDSF9S", 
            "RVNQECcSFAoQQ1NfQ0xVQl9VU0VSTU9ERRAoEhYKEkNTX1NFTEVDVF9JUFNU", 
            "QVRVUxApEhcKE0NTX09QRVJUT1JfSVBTVEFUVVMQKhIXChNDU19TRVRfSVBf", 
            "V0hJVEVMSVNUECsSEgoOQ1NfQ0FOQ0VMX0NMVUIQLBIUChBDU19TRVRfUk9C", 
            "T1RfUE9UEC0SEgoOQ1NfQkVMQU5EX0NMVUIQLhISCg5DU19ST0JPVF9TVEFU", 
            "VRAvEhQKEEMyU19ST0JPVF9FUlJNU0cQMBIWChJDU19TRVRfWkZCUE9UX09Q", 
            "RU4QMhIRCg1DU19VU0VSX1NUQVRFEDMSGQoVQ1NfU0VUX1RFWFBST1BPVF9P", 
            "UEVOEDQSGwoXQ1NfU0VMRUNUX1RFWFBST1BPVF9QT1QQNRIcChhDU19PUEVS", 
            "VE9SX1RFWFBST1BPVF9QT1QQNhIUChBDU19NT0RVTEVfU1dJVENIEDcSGQoV", 
            "Q1NfQ0xJRU5UX0dBTUVfU1dJVENIEDgSIAocQ1NfU0VUX0lOREVCQVRFRF9S", 
            "RUJBVEVfT1BFThA7Eh4KGkNTX05URl9VUERBVEVfUE9QVVBDT05UUk9MEDwS", 
            "FQoRQ1NfTU9CSUxFX1NXSVRDSFMQPRIdChlDU19NT0JJTEVfU1dJVENIX09Q", 
            "RVJBVE9SED4SHwobQ1NfU0VUX0hlcm9jcmFmdF9Ud2ljZV9PUEVOEEASIgoe", 
            "Q1NfU0VUX01JREFVVFVNTl9GRVNUSVZBTF9PUEVOED8SDAoIQ1NfVE9UQUwQ", 
            "ZCqgAQoKTW9kdWxlVHlwZRIHCgNBTEwQABIKCgZTWVNURU0QARIMCghPVkVS", 
            "VklFVxACEg4KCk1PRFVMRV9NQVgQAhIUChBHQU1FX1RZVFBFX0JFR0lOEGQS", 
            "CQoFVEVYQVMQZBIHCgNaRkIQZRIICgRDQVJTEGYSCgoGWk9ESUFDEGcSDAoI", 
          "VEVYQVNfRVgQaBIRCg1HQU1FX1RZUEVfTUFYEGg="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_ProtoCmd_Service_BGSetZfbPotOpenReq__Descriptor = Descriptor.MessageTypes[0];
        internal__static_ProtoCmd_Service_BGSetZfbPotOpenReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetZfbPotOpenReq, global::ProtoCmd.Service.BGSetZfbPotOpenReq.Builder>(internal__static_ProtoCmd_Service_BGSetZfbPotOpenReq__Descriptor,
                new string[] { "IsOpen", });
        internal__static_ProtoCmd_Service_BGSetZfbPotOpenRes__Descriptor = Descriptor.MessageTypes[1];
        internal__static_ProtoCmd_Service_BGSetZfbPotOpenRes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetZfbPotOpenRes, global::ProtoCmd.Service.BGSetZfbPotOpenRes.Builder>(internal__static_ProtoCmd_Service_BGSetZfbPotOpenRes__Descriptor,
                new string[] { "Suc", "CurrStatus", });
        internal__static_ProtoCmd_Service_GetPotSwitchResp__Descriptor = Descriptor.MessageTypes[2];
        internal__static_ProtoCmd_Service_GetPotSwitchResp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.GetPotSwitchResp, global::ProtoCmd.Service.GetPotSwitchResp.Builder>(internal__static_ProtoCmd_Service_GetPotSwitchResp__Descriptor,
                new string[] { "Switch", });
        internal__static_ProtoCmd_Service_PotSwitchResp__Descriptor = Descriptor.MessageTypes[3];
        internal__static_ProtoCmd_Service_PotSwitchResp__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.PotSwitchResp, global::ProtoCmd.Service.PotSwitchResp.Builder>(internal__static_ProtoCmd_Service_PotSwitchResp__Descriptor,
                new string[] { "Result", });
        internal__static_ProtoCmd_Service_PotSwitch__Descriptor = Descriptor.MessageTypes[4];
        internal__static_ProtoCmd_Service_PotSwitch__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.PotSwitch, global::ProtoCmd.Service.PotSwitch.Builder>(internal__static_ProtoCmd_Service_PotSwitch__Descriptor,
                new string[] { "Tableid", "Config", });
        internal__static_ProtoCmd_Service_Service_Test_S__Descriptor = Descriptor.MessageTypes[5];
        internal__static_ProtoCmd_Service_Service_Test_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Test_S, global::ProtoCmd.Service.Service_Test_S.Builder>(internal__static_ProtoCmd_Service_Service_Test_S__Descriptor,
                new string[] { "SzAccount", "Suc", });
        internal__static_ProtoCmd_Service_Service_Kick_C__Descriptor = Descriptor.MessageTypes[6];
        internal__static_ProtoCmd_Service_Service_Kick_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Kick_C, global::ProtoCmd.Service.Service_Kick_C.Builder>(internal__static_ProtoCmd_Service_Service_Kick_C__Descriptor,
                new string[] { "DwUserID", });
        internal__static_ProtoCmd_Service_Service_Kick_S__Descriptor = Descriptor.MessageTypes[7];
        internal__static_ProtoCmd_Service_Service_Kick_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Kick_S, global::ProtoCmd.Service.Service_Kick_S.Builder>(internal__static_ProtoCmd_Service_Service_Kick_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Service_Query_C__Descriptor = Descriptor.MessageTypes[8];
        internal__static_ProtoCmd_Service_Service_Query_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_C, global::ProtoCmd.Service.Service_Query_C.Builder>(internal__static_ProtoCmd_Service_Service_Query_C__Descriptor,
                new string[] { "SzAccount", });
        internal__static_ProtoCmd_Service_Service_Query_S__Descriptor = Descriptor.MessageTypes[9];
        internal__static_ProtoCmd_Service_Service_Query_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_S, global::ProtoCmd.Service.Service_Query_S.Builder>(internal__static_ProtoCmd_Service_Service_Query_S__Descriptor,
                new string[] { "DwUserID", "SzAccount", "SzNickName", "SzTelNum", "SzEmail", "IsOnline", "IsFreeze", "SzTrueName", "SzIdentity", "Sex", "DwAgentID", "SzCreateTime", });
        internal__static_ProtoCmd_Service_Service_Freeze_C__Descriptor = Descriptor.MessageTypes[10];
        internal__static_ProtoCmd_Service_Service_Freeze_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Freeze_C, global::ProtoCmd.Service.Service_Freeze_C.Builder>(internal__static_ProtoCmd_Service_Service_Freeze_C__Descriptor,
                new string[] { "DwUserID", "DwFreeze", "DwMinute", });
        internal__static_ProtoCmd_Service_Service_Freeze_S__Descriptor = Descriptor.MessageTypes[11];
        internal__static_ProtoCmd_Service_Service_Freeze_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Freeze_S, global::ProtoCmd.Service.Service_Freeze_S.Builder>(internal__static_ProtoCmd_Service_Service_Freeze_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Service_Send_SysMail_C__Descriptor = Descriptor.MessageTypes[12];
        internal__static_ProtoCmd_Service_Service_Send_SysMail_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Send_SysMail_C, global::ProtoCmd.Service.Service_Send_SysMail_C.Builder>(internal__static_ProtoCmd_Service_Service_Send_SysMail_C__Descriptor,
                new string[] { "SzTitle", "SzContext", });
        internal__static_ProtoCmd_Service_Service_Send_CloseServer__Descriptor = Descriptor.MessageTypes[13];
        internal__static_ProtoCmd_Service_Service_Send_CloseServer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Send_CloseServer, global::ProtoCmd.Service.Service_Send_CloseServer.Builder>(internal__static_ProtoCmd_Service_Service_Send_CloseServer__Descriptor,
                new string[] { "Close", });
        internal__static_ProtoCmd_Service_Service_Query_ServerStatus_S__Descriptor = Descriptor.MessageTypes[14];
        internal__static_ProtoCmd_Service_Service_Query_ServerStatus_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_ServerStatus_S, global::ProtoCmd.Service.Service_Query_ServerStatus_S.Builder>(internal__static_ProtoCmd_Service_Service_Query_ServerStatus_S__Descriptor,
                new string[] { "Close", });
        internal__static_ProtoCmd_Service_Service_Query_OnlineUser_C__Descriptor = Descriptor.MessageTypes[15];
        internal__static_ProtoCmd_Service_Service_Query_OnlineUser_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_OnlineUser_C, global::ProtoCmd.Service.Service_Query_OnlineUser_C.Builder>(internal__static_ProtoCmd_Service_Service_Query_OnlineUser_C__Descriptor,
                new string[] { "DwPageIndex", "DwShowNum", });
        internal__static_ProtoCmd_Service_Service_OnlineUserInfo__Descriptor = Descriptor.MessageTypes[16];
        internal__static_ProtoCmd_Service_Service_OnlineUserInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_OnlineUserInfo, global::ProtoCmd.Service.Service_OnlineUserInfo.Builder>(internal__static_ProtoCmd_Service_Service_OnlineUserInfo__Descriptor,
                new string[] { "StrAccount", "DwUserID", "StrIP", "StrLoginTime", });
        internal__static_ProtoCmd_Service_Service_Query_OnlineUser_S__Descriptor = Descriptor.MessageTypes[17];
        internal__static_ProtoCmd_Service_Service_Query_OnlineUser_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_OnlineUser_S, global::ProtoCmd.Service.Service_Query_OnlineUser_S.Builder>(internal__static_ProtoCmd_Service_Service_Query_OnlineUser_S__Descriptor,
                new string[] { "StartIndex", "ShowNum", "Page", "PageTotal", "List", });
        internal__static_ProtoCmd_Service_Service_Query_UseOperHis_C__Descriptor = Descriptor.MessageTypes[18];
        internal__static_ProtoCmd_Service_Service_Query_UseOperHis_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_UseOperHis_C, global::ProtoCmd.Service.Service_Query_UseOperHis_C.Builder>(internal__static_ProtoCmd_Service_Service_Query_UseOperHis_C__Descriptor,
                new string[] { "DwUserID", "DwPageIndex", "DwShowNum", });
        internal__static_ProtoCmd_Service_Service_UserOperHisInfo__Descriptor = Descriptor.MessageTypes[19];
        internal__static_ProtoCmd_Service_Service_UserOperHisInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_UserOperHisInfo, global::ProtoCmd.Service.Service_UserOperHisInfo.Builder>(internal__static_ProtoCmd_Service_Service_UserOperHisInfo__Descriptor,
                new string[] { "StrTime", "Content", });
        internal__static_ProtoCmd_Service_Service_Query_UseOperHis_S__Descriptor = Descriptor.MessageTypes[20];
        internal__static_ProtoCmd_Service_Service_Query_UseOperHis_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Query_UseOperHis_S, global::ProtoCmd.Service.Service_Query_UseOperHis_S.Builder>(internal__static_ProtoCmd_Service_Service_Query_UseOperHis_S__Descriptor,
                new string[] { "DwUserID", "StartIndex", "ShowNum", "Page", "PageTotal", "ListInfo", });
        internal__static_ProtoCmd_Service_Service_Send_AnnounceMent_C__Descriptor = Descriptor.MessageTypes[21];
        internal__static_ProtoCmd_Service_Service_Send_AnnounceMent_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Send_AnnounceMent_C, global::ProtoCmd.Service.Service_Send_AnnounceMent_C.Builder>(internal__static_ProtoCmd_Service_Service_Send_AnnounceMent_C__Descriptor,
                new string[] { "Content", "DwRepeat", "DwInterval", });
        internal__static_ProtoCmd_Service_Service_BanSpeak_C__Descriptor = Descriptor.MessageTypes[22];
        internal__static_ProtoCmd_Service_Service_BanSpeak_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanSpeak_C, global::ProtoCmd.Service.Service_BanSpeak_C.Builder>(internal__static_ProtoCmd_Service_Service_BanSpeak_C__Descriptor,
                new string[] { "DwUserID", "DwBanSpeak", "Minute", });
        internal__static_ProtoCmd_Service_Service_BanSpeak_S__Descriptor = Descriptor.MessageTypes[23];
        internal__static_ProtoCmd_Service_Service_BanSpeak_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanSpeak_S, global::ProtoCmd.Service.Service_BanSpeak_S.Builder>(internal__static_ProtoCmd_Service_Service_BanSpeak_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Service_OnlineAddGold_C__Descriptor = Descriptor.MessageTypes[24];
        internal__static_ProtoCmd_Service_Service_OnlineAddGold_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_OnlineAddGold_C, global::ProtoCmd.Service.Service_OnlineAddGold_C.Builder>(internal__static_ProtoCmd_Service_Service_OnlineAddGold_C__Descriptor,
                new string[] { "DwUserID", "DwAddGold", });
        internal__static_ProtoCmd_Service_Service_OnlineAddGold_S__Descriptor = Descriptor.MessageTypes[25];
        internal__static_ProtoCmd_Service_Service_OnlineAddGold_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_OnlineAddGold_S, global::ProtoCmd.Service.Service_OnlineAddGold_S.Builder>(internal__static_ProtoCmd_Service_Service_OnlineAddGold_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Service_QueryInternalLogin_S__Descriptor = Descriptor.MessageTypes[26];
        internal__static_ProtoCmd_Service_Service_QueryInternalLogin_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_QueryInternalLogin_S, global::ProtoCmd.Service.Service_QueryInternalLogin_S.Builder>(internal__static_ProtoCmd_Service_Service_QueryInternalLogin_S__Descriptor,
                new string[] { "IsOpen", });
        internal__static_ProtoCmd_Service_Service_SetInternalLogin_C__Descriptor = Descriptor.MessageTypes[27];
        internal__static_ProtoCmd_Service_Service_SetInternalLogin_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_SetInternalLogin_C, global::ProtoCmd.Service.Service_SetInternalLogin_C.Builder>(internal__static_ProtoCmd_Service_Service_SetInternalLogin_C__Descriptor,
                new string[] { "BOpen", });
        internal__static_ProtoCmd_Service_Service_SetInternalLogin_S__Descriptor = Descriptor.MessageTypes[28];
        internal__static_ProtoCmd_Service_Service_SetInternalLogin_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_SetInternalLogin_S, global::ProtoCmd.Service.Service_SetInternalLogin_S.Builder>(internal__static_ProtoCmd_Service_Service_SetInternalLogin_S__Descriptor,
                new string[] { "IsOpen", });
        internal__static_ProtoCmd_Service_Service_ItemMail_C__Descriptor = Descriptor.MessageTypes[29];
        internal__static_ProtoCmd_Service_Service_ItemMail_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ItemMail_C, global::ProtoCmd.Service.Service_ItemMail_C.Builder>(internal__static_ProtoCmd_Service_Service_ItemMail_C__Descriptor,
                new string[] { "UserID", "Title", "Context", "ItemType", "ItemValue", "ItemNum", "IsGlobal", "AwardType", });
        internal__static_ProtoCmd_Service_Service_ItemMail_S__Descriptor = Descriptor.MessageTypes[30];
        internal__static_ProtoCmd_Service_Service_ItemMail_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ItemMail_S, global::ProtoCmd.Service.Service_ItemMail_S.Builder>(internal__static_ProtoCmd_Service_Service_ItemMail_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Service_Fish_C__Descriptor = Descriptor.MessageTypes[31];
        internal__static_ProtoCmd_Service_Service_Fish_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Fish_C, global::ProtoCmd.Service.Service_Fish_C.Builder>(internal__static_ProtoCmd_Service_Service_Fish_C__Descriptor,
                new string[] { "UserID", });
        internal__static_ProtoCmd_Service_FishInfo__Descriptor = Descriptor.MessageTypes[32];
        internal__static_ProtoCmd_Service_FishInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.FishInfo, global::ProtoCmd.Service.FishInfo.Builder>(internal__static_ProtoCmd_Service_FishInfo__Descriptor,
                new string[] { "Date", "ItemID", "Name", "GiveID", });
        internal__static_ProtoCmd_Service_Service_Fish_S__Descriptor = Descriptor.MessageTypes[33];
        internal__static_ProtoCmd_Service_Service_Fish_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_Fish_S, global::ProtoCmd.Service.Service_Fish_S.Builder>(internal__static_ProtoCmd_Service_Service_Fish_S__Descriptor,
                new string[] { "UserID", "FishList", });
        internal__static_ProtoCmd_Service_Service_BanIP_C__Descriptor = Descriptor.MessageTypes[34];
        internal__static_ProtoCmd_Service_Service_BanIP_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanIP_C, global::ProtoCmd.Service.Service_BanIP_C.Builder>(internal__static_ProtoCmd_Service_Service_BanIP_C__Descriptor,
                new string[] { "Ip", "IsBan", });
        internal__static_ProtoCmd_Service_Service_BanIP_S__Descriptor = Descriptor.MessageTypes[35];
        internal__static_ProtoCmd_Service_Service_BanIP_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanIP_S, global::ProtoCmd.Service.Service_BanIP_S.Builder>(internal__static_ProtoCmd_Service_Service_BanIP_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Service_RegIP_C__Descriptor = Descriptor.MessageTypes[36];
        internal__static_ProtoCmd_Service_Service_RegIP_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_RegIP_C, global::ProtoCmd.Service.Service_RegIP_C.Builder>(internal__static_ProtoCmd_Service_Service_RegIP_C__Descriptor,
                new string[] { "Ip", "Total", "Content", });
        internal__static_ProtoCmd_Service_Service_RegIP_S__Descriptor = Descriptor.MessageTypes[37];
        internal__static_ProtoCmd_Service_Service_RegIP_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_RegIP_S, global::ProtoCmd.Service.Service_RegIP_S.Builder>(internal__static_ProtoCmd_Service_Service_RegIP_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_TexasPot_Select_S__Descriptor = Descriptor.MessageTypes[38];
        internal__static_ProtoCmd_Service_TexasPot_Select_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexasPot_Select_S, global::ProtoCmd.Service.TexasPot_Select_S.Builder>(internal__static_ProtoCmd_Service_TexasPot_Select_S__Descriptor,
                new string[] { "ChipNum", });
        internal__static_ProtoCmd_Service_TexasPot_Operator_C__Descriptor = Descriptor.MessageTypes[39];
        internal__static_ProtoCmd_Service_TexasPot_Operator_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexasPot_Operator_C, global::ProtoCmd.Service.TexasPot_Operator_C.Builder>(internal__static_ProtoCmd_Service_TexasPot_Operator_C__Descriptor,
                new string[] { "OpType", "OpValue", "StrContent", });
        internal__static_ProtoCmd_Service_TexasPot_Operator_S__Descriptor = Descriptor.MessageTypes[40];
        internal__static_ProtoCmd_Service_TexasPot_Operator_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexasPot_Operator_S, global::ProtoCmd.Service.TexasPot_Operator_S.Builder>(internal__static_ProtoCmd_Service_TexasPot_Operator_S__Descriptor,
                new string[] { "OpType", "Suc", });
        internal__static_ProtoCmd_Service_REDEVENLOPE_SELECT_S__Descriptor = Descriptor.MessageTypes[41];
        internal__static_ProtoCmd_Service_REDEVENLOPE_SELECT_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.REDEVENLOPE_SELECT_S, global::ProtoCmd.Service.REDEVENLOPE_SELECT_S.Builder>(internal__static_ProtoCmd_Service_REDEVENLOPE_SELECT_S__Descriptor,
                new string[] { "State", });
        internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_C__Descriptor = Descriptor.MessageTypes[42];
        internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_C, global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_C.Builder>(internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_C__Descriptor,
                new string[] { "State", });
        internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_S__Descriptor = Descriptor.MessageTypes[43];
        internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_S, global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_S.Builder>(internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_S__Descriptor,
                new string[] { "State", "Bsucc", });
        internal__static_ProtoCmd_Service_Service_BanMac_C__Descriptor = Descriptor.MessageTypes[44];
        internal__static_ProtoCmd_Service_Service_BanMac_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanMac_C, global::ProtoCmd.Service.Service_BanMac_C.Builder>(internal__static_ProtoCmd_Service_Service_BanMac_C__Descriptor,
                new string[] { "MacAddr", "IsBan", });
        internal__static_ProtoCmd_Service_Service_BanMac_S__Descriptor = Descriptor.MessageTypes[45];
        internal__static_ProtoCmd_Service_Service_BanMac_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_BanMac_S, global::ProtoCmd.Service.Service_BanMac_S.Builder>(internal__static_ProtoCmd_Service_Service_BanMac_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Service_ResetSafePwd_C__Descriptor = Descriptor.MessageTypes[46];
        internal__static_ProtoCmd_Service_Service_ResetSafePwd_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ResetSafePwd_C, global::ProtoCmd.Service.Service_ResetSafePwd_C.Builder>(internal__static_ProtoCmd_Service_Service_ResetSafePwd_C__Descriptor,
                new string[] { "DwUserID", });
        internal__static_ProtoCmd_Service_Service_ResetSafePwd_S__Descriptor = Descriptor.MessageTypes[47];
        internal__static_ProtoCmd_Service_Service_ResetSafePwd_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ResetSafePwd_S, global::ProtoCmd.Service.Service_ResetSafePwd_S.Builder>(internal__static_ProtoCmd_Service_Service_ResetSafePwd_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Scale_Select_S__Descriptor = Descriptor.MessageTypes[48];
        internal__static_ProtoCmd_Service_Scale_Select_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Scale_Select_S, global::ProtoCmd.Service.Scale_Select_S.Builder>(internal__static_ProtoCmd_Service_Scale_Select_S__Descriptor,
                new string[] { "ChipNum", });
        internal__static_ProtoCmd_Service_Scale_Operator_C__Descriptor = Descriptor.MessageTypes[49];
        internal__static_ProtoCmd_Service_Scale_Operator_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Scale_Operator_C, global::ProtoCmd.Service.Scale_Operator_C.Builder>(internal__static_ProtoCmd_Service_Scale_Operator_C__Descriptor,
                new string[] { "OpType", "OpValue", "StrContent", });
        internal__static_ProtoCmd_Service_Scale_Operator_S__Descriptor = Descriptor.MessageTypes[50];
        internal__static_ProtoCmd_Service_Scale_Operator_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Scale_Operator_S, global::ProtoCmd.Service.Scale_Operator_S.Builder>(internal__static_ProtoCmd_Service_Scale_Operator_S__Descriptor,
                new string[] { "OpType", "Suc", });
        internal__static_ProtoCmd_Service_Service_ClubUserMode_C__Descriptor = Descriptor.MessageTypes[51];
        internal__static_ProtoCmd_Service_Service_ClubUserMode_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ClubUserMode_C, global::ProtoCmd.Service.Service_ClubUserMode_C.Builder>(internal__static_ProtoCmd_Service_Service_ClubUserMode_C__Descriptor,
                new string[] { "ClubID", });
        internal__static_ProtoCmd_Service_Service_ClubUserMode_S__Descriptor = Descriptor.MessageTypes[52];
        internal__static_ProtoCmd_Service_Service_ClubUserMode_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Service_ClubUserMode_S, global::ProtoCmd.Service.Service_ClubUserMode_S.Builder>(internal__static_ProtoCmd_Service_Service_ClubUserMode_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_Beland_Club_C__Descriptor = Descriptor.MessageTypes[53];
        internal__static_ProtoCmd_Service_Beland_Club_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Beland_Club_C, global::ProtoCmd.Service.Beland_Club_C.Builder>(internal__static_ProtoCmd_Service_Beland_Club_C__Descriptor,
                new string[] { "ClubID", "DwUserID", });
        internal__static_ProtoCmd_Service_Beland_Club_S__Descriptor = Descriptor.MessageTypes[54];
        internal__static_ProtoCmd_Service_Beland_Club_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Beland_Club_S, global::ProtoCmd.Service.Beland_Club_S.Builder>(internal__static_ProtoCmd_Service_Beland_Club_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_IPSTATUS_SELECT_S__Descriptor = Descriptor.MessageTypes[55];
        internal__static_ProtoCmd_Service_IPSTATUS_SELECT_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPSTATUS_SELECT_S, global::ProtoCmd.Service.IPSTATUS_SELECT_S.Builder>(internal__static_ProtoCmd_Service_IPSTATUS_SELECT_S__Descriptor,
                new string[] { "State", });
        internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_C__Descriptor = Descriptor.MessageTypes[56];
        internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPSTATUS_OPERATOR_C, global::ProtoCmd.Service.IPSTATUS_OPERATOR_C.Builder>(internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_C__Descriptor,
                new string[] { "State", });
        internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_S__Descriptor = Descriptor.MessageTypes[57];
        internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPSTATUS_OPERATOR_S, global::ProtoCmd.Service.IPSTATUS_OPERATOR_S.Builder>(internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_S__Descriptor,
                new string[] { "State", "Bsucc", });
        internal__static_ProtoCmd_Service_IPWHITE_C__Descriptor = Descriptor.MessageTypes[58];
        internal__static_ProtoCmd_Service_IPWHITE_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPWHITE_C, global::ProtoCmd.Service.IPWHITE_C.Builder>(internal__static_ProtoCmd_Service_IPWHITE_C__Descriptor,
                new string[] { "Ip", "Add", });
        internal__static_ProtoCmd_Service_IPWHITE_S__Descriptor = Descriptor.MessageTypes[59];
        internal__static_ProtoCmd_Service_IPWHITE_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.IPWHITE_S, global::ProtoCmd.Service.IPWHITE_S.Builder>(internal__static_ProtoCmd_Service_IPWHITE_S__Descriptor,
                new string[] { "Ip", "Add", "Suc", });
        internal__static_ProtoCmd_Service_CANCEL_CLUB_C__Descriptor = Descriptor.MessageTypes[60];
        internal__static_ProtoCmd_Service_CANCEL_CLUB_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CANCEL_CLUB_C, global::ProtoCmd.Service.CANCEL_CLUB_C.Builder>(internal__static_ProtoCmd_Service_CANCEL_CLUB_C__Descriptor,
                new string[] { "DwUserID", });
        internal__static_ProtoCmd_Service_CANCEL_CLUB_S__Descriptor = Descriptor.MessageTypes[61];
        internal__static_ProtoCmd_Service_CANCEL_CLUB_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.CANCEL_CLUB_S, global::ProtoCmd.Service.CANCEL_CLUB_S.Builder>(internal__static_ProtoCmd_Service_CANCEL_CLUB_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_ROBOT_POT_C__Descriptor = Descriptor.MessageTypes[62];
        internal__static_ProtoCmd_Service_ROBOT_POT_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ROBOT_POT_C, global::ProtoCmd.Service.ROBOT_POT_C.Builder>(internal__static_ProtoCmd_Service_ROBOT_POT_C__Descriptor,
                new string[] { "Pot", "Stand", "GameID", });
        internal__static_ProtoCmd_Service_ROBOT_POT_S__Descriptor = Descriptor.MessageTypes[63];
        internal__static_ProtoCmd_Service_ROBOT_POT_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ROBOT_POT_S, global::ProtoCmd.Service.ROBOT_POT_S.Builder>(internal__static_ProtoCmd_Service_ROBOT_POT_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_BGSetTexProPOTOpenReq__Descriptor = Descriptor.MessageTypes[64];
        internal__static_ProtoCmd_Service_BGSetTexProPOTOpenReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetTexProPOTOpenReq, global::ProtoCmd.Service.BGSetTexProPOTOpenReq.Builder>(internal__static_ProtoCmd_Service_BGSetTexProPOTOpenReq__Descriptor,
                new string[] { "IsOpen", });
        internal__static_ProtoCmd_Service_BGSetTexProPOTOpenRes__Descriptor = Descriptor.MessageTypes[65];
        internal__static_ProtoCmd_Service_BGSetTexProPOTOpenRes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetTexProPOTOpenRes, global::ProtoCmd.Service.BGSetTexProPOTOpenRes.Builder>(internal__static_ProtoCmd_Service_BGSetTexProPOTOpenRes__Descriptor,
                new string[] { "Suc", "CurrStatus", });
        internal__static_ProtoCmd_Service_TexPro_Select_S__Descriptor = Descriptor.MessageTypes[66];
        internal__static_ProtoCmd_Service_TexPro_Select_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexPro_Select_S, global::ProtoCmd.Service.TexPro_Select_S.Builder>(internal__static_ProtoCmd_Service_TexPro_Select_S__Descriptor,
                new string[] { "ChipNum", });
        internal__static_ProtoCmd_Service_TexPro_Operator_C__Descriptor = Descriptor.MessageTypes[67];
        internal__static_ProtoCmd_Service_TexPro_Operator_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexPro_Operator_C, global::ProtoCmd.Service.TexPro_Operator_C.Builder>(internal__static_ProtoCmd_Service_TexPro_Operator_C__Descriptor,
                new string[] { "OpType", "OpValue", "StrContent", });
        internal__static_ProtoCmd_Service_TexPro_Operator_S__Descriptor = Descriptor.MessageTypes[68];
        internal__static_ProtoCmd_Service_TexPro_Operator_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.TexPro_Operator_S, global::ProtoCmd.Service.TexPro_Operator_S.Builder>(internal__static_ProtoCmd_Service_TexPro_Operator_S__Descriptor,
                new string[] { "OpType", "Suc", });
        internal__static_ProtoCmd_Service_Module_Switch_C__Descriptor = Descriptor.MessageTypes[69];
        internal__static_ProtoCmd_Service_Module_Switch_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Module_Switch_C, global::ProtoCmd.Service.Module_Switch_C.Builder>(internal__static_ProtoCmd_Service_Module_Switch_C__Descriptor,
                new string[] { "Module", "Opend", });
        internal__static_ProtoCmd_Service_Module_Switch_S__Descriptor = Descriptor.MessageTypes[70];
        internal__static_ProtoCmd_Service_Module_Switch_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.Module_Switch_S, global::ProtoCmd.Service.Module_Switch_S.Builder>(internal__static_ProtoCmd_Service_Module_Switch_S__Descriptor,
                new string[] { "Suc", "Opend", });
        internal__static_ProtoCmd_Service_ClientGame_Switch_C__Descriptor = Descriptor.MessageTypes[71];
        internal__static_ProtoCmd_Service_ClientGame_Switch_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ClientGame_Switch_C, global::ProtoCmd.Service.ClientGame_Switch_C.Builder>(internal__static_ProtoCmd_Service_ClientGame_Switch_C__Descriptor,
                new string[] { "GameID", "PlatOpen", });
        internal__static_ProtoCmd_Service_ClientGame_Switch_S__Descriptor = Descriptor.MessageTypes[72];
        internal__static_ProtoCmd_Service_ClientGame_Switch_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ClientGame_Switch_S, global::ProtoCmd.Service.ClientGame_Switch_S.Builder>(internal__static_ProtoCmd_Service_ClientGame_Switch_S__Descriptor,
                new string[] { "Suc", "PlatOpen", });
        internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenReq__Descriptor = Descriptor.MessageTypes[73];
        internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetIndebatedRebateOpenReq, global::ProtoCmd.Service.BGSetIndebatedRebateOpenReq.Builder>(internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenReq__Descriptor,
                new string[] { "IsOpen", });
        internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenRes__Descriptor = Descriptor.MessageTypes[74];
        internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenRes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetIndebatedRebateOpenRes, global::ProtoCmd.Service.BGSetIndebatedRebateOpenRes.Builder>(internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenRes__Descriptor,
                new string[] { "Suc", "CurrStatus", });
        internal__static_ProtoCmd_Service_PopUpControl_S__Descriptor = Descriptor.MessageTypes[75];
        internal__static_ProtoCmd_Service_PopUpControl_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.PopUpControl_S, global::ProtoCmd.Service.PopUpControl_S.Builder>(internal__static_ProtoCmd_Service_PopUpControl_S__Descriptor,
                new string[] { "Suc", });
        internal__static_ProtoCmd_Service_MobileSwitch__Descriptor = Descriptor.MessageTypes[76];
        internal__static_ProtoCmd_Service_MobileSwitch__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MobileSwitch, global::ProtoCmd.Service.MobileSwitch.Builder>(internal__static_ProtoCmd_Service_MobileSwitch__Descriptor,
                new string[] { "Id", "MobileDevice", "Agent", "MobileBrand", "CloseLoginType", "CloseRegisterType", "MobileModel", });
        internal__static_ProtoCmd_Service_MobileSwitchs_S__Descriptor = Descriptor.MessageTypes[77];
        internal__static_ProtoCmd_Service_MobileSwitchs_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MobileSwitchs_S, global::ProtoCmd.Service.MobileSwitchs_S.Builder>(internal__static_ProtoCmd_Service_MobileSwitchs_S__Descriptor,
                new string[] { "MobileSwitchs", "Suc", });
        internal__static_ProtoCmd_Service_MobileSwitchOperator_C__Descriptor = Descriptor.MessageTypes[78];
        internal__static_ProtoCmd_Service_MobileSwitchOperator_C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MobileSwitchOperator_C, global::ProtoCmd.Service.MobileSwitchOperator_C.Builder>(internal__static_ProtoCmd_Service_MobileSwitchOperator_C__Descriptor,
                new string[] { "OperatorType", "MobileSwitch", });
        internal__static_ProtoCmd_Service_MobileSwitchOperator_S__Descriptor = Descriptor.MessageTypes[79];
        internal__static_ProtoCmd_Service_MobileSwitchOperator_S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.MobileSwitchOperator_S, global::ProtoCmd.Service.MobileSwitchOperator_S.Builder>(internal__static_ProtoCmd_Service_MobileSwitchOperator_S__Descriptor,
                new string[] { "OperatorType", "MobileSwitch", "Suc", });
        internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenReq__Descriptor = Descriptor.MessageTypes[80];
        internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetHerocraftTwiceOpenReq, global::ProtoCmd.Service.BGSetHerocraftTwiceOpenReq.Builder>(internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenReq__Descriptor,
                new string[] { "IsOpen", });
        internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenRes__Descriptor = Descriptor.MessageTypes[81];
        internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenRes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetHerocraftTwiceOpenRes, global::ProtoCmd.Service.BGSetHerocraftTwiceOpenRes.Builder>(internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenRes__Descriptor,
                new string[] { "Suc", "CurrStatus", });
        internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenReq__Descriptor = Descriptor.MessageTypes[82];
        internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetMidautumnFestivalOpenReq, global::ProtoCmd.Service.BGSetMidautumnFestivalOpenReq.Builder>(internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenReq__Descriptor,
                new string[] { "IsOpen", });
        internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenRes__Descriptor = Descriptor.MessageTypes[83];
        internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenRes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.BGSetMidautumnFestivalOpenRes, global::ProtoCmd.Service.BGSetMidautumnFestivalOpenRes.Builder>(internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenRes__Descriptor,
                new string[] { "Suc", "CurrStatus", });
        internal__static_ProtoCmd_Service_QueryRobotStatu__Descriptor = Descriptor.MessageTypes[84];
        internal__static_ProtoCmd_Service_QueryRobotStatu__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.QueryRobotStatu, global::ProtoCmd.Service.QueryRobotStatu.Builder>(internal__static_ProtoCmd_Service_QueryRobotStatu__Descriptor,
                new string[] { "ModuleType", });
        internal__static_ProtoCmd_Service_ModifyRobotConfig__Descriptor = Descriptor.MessageTypes[85];
        internal__static_ProtoCmd_Service_ModifyRobotConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ModifyRobotConfig, global::ProtoCmd.Service.ModifyRobotConfig.Builder>(internal__static_ProtoCmd_Service_ModifyRobotConfig__Descriptor,
                new string[] { "GameType", "Limit", "IsBet", });
        internal__static_ProtoCmd_Service_LoginRequest__Descriptor = Descriptor.MessageTypes[86];
        internal__static_ProtoCmd_Service_LoginRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.LoginRequest, global::ProtoCmd.Service.LoginRequest.Builder>(internal__static_ProtoCmd_Service_LoginRequest__Descriptor,
                new string[] { "GameType", "LoginFrequency", "LoginCnt", "Strategy", });
        internal__static_ProtoCmd_Service_GameStatu__Descriptor = Descriptor.MessageTypes[87];
        internal__static_ProtoCmd_Service_GameStatu__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.GameStatu, global::ProtoCmd.Service.GameStatu.Builder>(internal__static_ProtoCmd_Service_GameStatu__Descriptor,
                new string[] { "GameType", "PlayerCnt", "PlayerLimit", "IsBet", });
        internal__static_ProtoCmd_Service_GameOverView__Descriptor = Descriptor.MessageTypes[88];
        internal__static_ProtoCmd_Service_GameOverView__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.GameOverView, global::ProtoCmd.Service.GameOverView.Builder>(internal__static_ProtoCmd_Service_GameOverView__Descriptor,
                new string[] { "PlayerCnt", });
        internal__static_ProtoCmd_Service_SystemStatu__Descriptor = Descriptor.MessageTypes[89];
        internal__static_ProtoCmd_Service_SystemStatu__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.SystemStatu, global::ProtoCmd.Service.SystemStatu.Builder>(internal__static_ProtoCmd_Service_SystemStatu__Descriptor,
                new string[] { "CpuPercent", "MemUsed", "MemTotal", "FlowRate", "ConnCnt", "ConnLimit", });
        internal__static_ProtoCmd_Service_RobotStatus__Descriptor = Descriptor.MessageTypes[90];
        internal__static_ProtoCmd_Service_RobotStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.RobotStatus, global::ProtoCmd.Service.RobotStatus.Builder>(internal__static_ProtoCmd_Service_RobotStatus__Descriptor,
                new string[] { "ModuleType", "GameStatu", "GameOverview", "SystemStatu", });
        internal__static_ProtoCmd_Service_ErrorMessage__Descriptor = Descriptor.MessageTypes[91];
        internal__static_ProtoCmd_Service_ErrorMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.ErrorMessage, global::ProtoCmd.Service.ErrorMessage.Builder>(internal__static_ProtoCmd_Service_ErrorMessage__Descriptor,
                new string[] { "ErrorMessage_", });
        internal__static_ProtoCmd_Service_UserStateReq__Descriptor = Descriptor.MessageTypes[92];
        internal__static_ProtoCmd_Service_UserStateReq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.UserStateReq, global::ProtoCmd.Service.UserStateReq.Builder>(internal__static_ProtoCmd_Service_UserStateReq__Descriptor,
                new string[] { "UserId", });
        internal__static_ProtoCmd_Service_UserStateRes__Descriptor = Descriptor.MessageTypes[93];
        internal__static_ProtoCmd_Service_UserStateRes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtoCmd.Service.UserStateRes, global::ProtoCmd.Service.UserStateRes.Builder>(internal__static_ProtoCmd_Service_UserStateRes__Descriptor,
                new string[] { "UserId", "State", "RoomId", "RoomType", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum ServiceCmd {
    SC_BEGIN = 11,
    SC_KICK_USER = 12,
    SC_QUERY_USER = 13,
    SC_FREEZE_USER = 14,
    SC_SEND_SYSMAIL = 15,
    SC_SERVER_STOP = 16,
    SC_QUERY_ONLINEUSER = 17,
    SC_QUERY_USEROPERHIS = 18,
    SC_QUERY_SERVERSTATUS = 19,
    SC_SEND_ANNOUNCEMENT = 20,
    SC_BAN_SPEAK = 21,
    SC_ADD_GOLD = 22,
    SC_QUERY_INTERNALLOGIN = 23,
    SC_SET_INTERALLOGIN = 24,
    SC_SEND_ITEMMAIL = 25,
    SC_QUERY_FISH = 26,
    SC_BAN_LOGIN_IP = 27,
    SC_REG_IP = 28,
    SC_SELECT_TEXAS_POT = 29,
    SC_OPERTOR_TEXAS_POT = 30,
    SC_SELECT_REDEVENLOPE_Q = 31,
    SC_OPERTOR_REDEVENLOPE_Q = 32,
    SC_BAN_LOGIN_MAC = 33,
    SC_RESET_SAFEBOXPWD = 34,
    SC_POT_SWITCH = 35,
    SC_SELECT_SCALE_POT = 36,
    SC_OPERTOR_SACLE_POT = 37,
    SC_GET_POT_SWITCH = 38,
    SC_CLUB_USERMODE = 39,
    SC_SELECT_IPSTATUS_Q = 40,
    SC_OPERTOR_IPSTATUS_Q = 41,
    SC_SET_IP_WHITELIST = 42,
    SC_CANCEL_CLUB = 43,
    SC_SET_ROBOT_POT = 44,
    SC_BELAND_CLUB = 45,
    SC_ROBOT_QUERY = 46,
    SC_ROBOT_MODIFY = 47,
    SC_ROBOT_LOGIN = 48,
    SC_SET_ZFBPOT_OPEN = 50,
    SC_USER_STATE = 51,
    SC_SET_TEXPROPOT_OPEN = 52,
    SC_SELECT_TEXPRO_POT = 53,
    SC_OPERTOR_TEXPRO_POT = 54,
    SC_MODULE_SWITCH = 55,
    SC_CLIENT_GAME_SWITCH = 56,
    SC_SET_INDEBATED_REBATE_OPEN = 59,
    SC_NTF_UPDATE_POPUPCONTROL = 60,
    SC_MOBILE_SWITCHS = 61,
    SC_MOBILE_SWITCH_OPERATOR = 62,
    SC_SET_Herocraft_Twice_OPEN = 64,
    SC_SET_MIDAUTUMN_FESTIVAL_OPEN = 63,
    SC_TOTAL = 200,
  }
  
  public enum CenterCmd {
    CS_BEGIN = 11,
    CS_CONNECT_ERROR = 12,
    CS_ACCOUNT_ERROR = 13,
    CS_QUERY_UESR = 14,
    CS_SERVER_STOP = 15,
    CS_KICK_USER = 16,
    CS_FREEZE_USER = 17,
    CS_QUERY_ONLINEUSER = 18,
    CS_QUERY_USEROPERHIS = 19,
    CS_SEND_SYSMAIL = 20,
    CS_QUERY_SERVERSTATUS = 21,
    CS_SEND_ANNOUNCEMENT = 22,
    CS_QUERY_INTERNALLOGIN = 23,
    CS_SET_INTERALLOGIN = 24,
    CS_SEND_ITEMMAIL = 25,
    CS_QUERY_FISH = 26,
    CS_BAN_SPEAK = 27,
    CS_BAN_LOGIN_IP = 28,
    CS_REG_IP = 29,
    CS_SELECT_TEXAS_POT = 30,
    CS_OPERTOR_TEXAS_POT = 31,
    CS_SELECT_REDEVENLOPE_P = 32,
    CS_OPERTOR_REDEVENLOPE_P = 33,
    CS_BAN_LOGIN_MAC = 34,
    CS_RESET_SAFEBOXPWD = 35,
    CS_SELECT_SCALE_POT = 36,
    CS_OPERTOR_SCALE_POT = 37,
    CS_POT_SWITCH_RESP = 38,
    CS_GET_POT_SWITCH_RESP = 39,
    CS_CLUB_USERMODE = 40,
    CS_SELECT_IPSTATUS = 41,
    CS_OPERTOR_IPSTATUS = 42,
    CS_SET_IP_WHITELIST = 43,
    CS_CANCEL_CLUB = 44,
    CS_SET_ROBOT_POT = 45,
    CS_BELAND_CLUB = 46,
    CS_ROBOT_STATU = 47,
    C2S_ROBOT_ERRMSG = 48,
    CS_SET_ZFBPOT_OPEN = 50,
    CS_USER_STATE = 51,
    CS_SET_TEXPROPOT_OPEN = 52,
    CS_SELECT_TEXPROPOT_POT = 53,
    CS_OPERTOR_TEXPROPOT_POT = 54,
    CS_MODULE_SWITCH = 55,
    CS_CLIENT_GAME_SWITCH = 56,
    CS_SET_INDEBATED_REBATE_OPEN = 59,
    CS_NTF_UPDATE_POPUPCONTROL = 60,
    CS_MOBILE_SWITCHS = 61,
    CS_MOBILE_SWITCH_OPERATOR = 62,
    CS_SET_Herocraft_Twice_OPEN = 64,
    CS_SET_MIDAUTUMN_FESTIVAL_OPEN = 63,
    CS_TOTAL = 100,
  }
  
  public enum ModuleType {
    ALL = 0,
    SYSTEM = 1,
    OVERVIEW = 2,
    MODULE_MAX = 2,
    GAME_TYTPE_BEGIN = 100,
    TEXAS = 100,
    ZFB = 101,
    CARS = 102,
    ZODIAC = 103,
    TEXAS_EX = 104,
    GAME_TYPE_MAX = 104,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetZfbPotOpenReq : pb::GeneratedMessage<BGSetZfbPotOpenReq, BGSetZfbPotOpenReq.Builder> {
    private BGSetZfbPotOpenReq() { }
    private static readonly BGSetZfbPotOpenReq defaultInstance = new BGSetZfbPotOpenReq().MakeReadOnly();
    private static readonly string[] _bGSetZfbPotOpenReqFieldNames = new string[] { "isOpen" };
    private static readonly uint[] _bGSetZfbPotOpenReqFieldTags = new uint[] { 8 };
    public static BGSetZfbPotOpenReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetZfbPotOpenReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetZfbPotOpenReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetZfbPotOpenReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetZfbPotOpenReq, BGSetZfbPotOpenReq.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetZfbPotOpenReq__FieldAccessorTable; }
    }
    
    public const int IsOpenFieldNumber = 1;
    private bool hasIsOpen;
    private int isOpen_;
    public bool HasIsOpen {
      get { return hasIsOpen; }
    }
    public int IsOpen {
      get { return isOpen_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetZfbPotOpenReqFieldNames;
      if (hasIsOpen) {
        output.WriteInt32(1, field_names[0], IsOpen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsOpen) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, IsOpen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetZfbPotOpenReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetZfbPotOpenReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetZfbPotOpenReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetZfbPotOpenReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetZfbPotOpenReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetZfbPotOpenReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetZfbPotOpenReq result;
      
      private BGSetZfbPotOpenReq PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetZfbPotOpenReq original = result;
          result = new BGSetZfbPotOpenReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetZfbPotOpenReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetZfbPotOpenReq.Descriptor; }
      }
      
      public override BGSetZfbPotOpenReq DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetZfbPotOpenReq.DefaultInstance; }
      }
      
      public override BGSetZfbPotOpenReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetZfbPotOpenReq) {
          return MergeFrom((BGSetZfbPotOpenReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetZfbPotOpenReq other) {
        if (other == global::ProtoCmd.Service.BGSetZfbPotOpenReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsOpen) {
          IsOpen = other.IsOpen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetZfbPotOpenReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetZfbPotOpenReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsOpen = input.ReadInt32(ref result.isOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsOpen {
        get { return result.hasIsOpen; }
      }
      public int IsOpen {
        get { return result.IsOpen; }
        set { SetIsOpen(value); }
      }
      public Builder SetIsOpen(int value) {
        PrepareBuilder();
        result.hasIsOpen = true;
        result.isOpen_ = value;
        return this;
      }
      public Builder ClearIsOpen() {
        PrepareBuilder();
        result.hasIsOpen = false;
        result.isOpen_ = 0;
        return this;
      }
    }
    static BGSetZfbPotOpenReq() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetZfbPotOpenRes : pb::GeneratedMessage<BGSetZfbPotOpenRes, BGSetZfbPotOpenRes.Builder> {
    private BGSetZfbPotOpenRes() { }
    private static readonly BGSetZfbPotOpenRes defaultInstance = new BGSetZfbPotOpenRes().MakeReadOnly();
    private static readonly string[] _bGSetZfbPotOpenResFieldNames = new string[] { "currStatus", "suc" };
    private static readonly uint[] _bGSetZfbPotOpenResFieldTags = new uint[] { 16, 8 };
    public static BGSetZfbPotOpenRes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetZfbPotOpenRes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetZfbPotOpenRes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetZfbPotOpenRes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetZfbPotOpenRes, BGSetZfbPotOpenRes.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetZfbPotOpenRes__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private int suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public int Suc {
      get { return suc_; }
    }
    
    public const int CurrStatusFieldNumber = 2;
    private bool hasCurrStatus;
    private int currStatus_;
    public bool HasCurrStatus {
      get { return hasCurrStatus; }
    }
    public int CurrStatus {
      get { return currStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetZfbPotOpenResFieldNames;
      if (hasSuc) {
        output.WriteInt32(1, field_names[1], Suc);
      }
      if (hasCurrStatus) {
        output.WriteInt32(2, field_names[0], CurrStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Suc);
      }
      if (hasCurrStatus) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CurrStatus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetZfbPotOpenRes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetZfbPotOpenRes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetZfbPotOpenRes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetZfbPotOpenRes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetZfbPotOpenRes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetZfbPotOpenRes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetZfbPotOpenRes result;
      
      private BGSetZfbPotOpenRes PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetZfbPotOpenRes original = result;
          result = new BGSetZfbPotOpenRes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetZfbPotOpenRes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetZfbPotOpenRes.Descriptor; }
      }
      
      public override BGSetZfbPotOpenRes DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetZfbPotOpenRes.DefaultInstance; }
      }
      
      public override BGSetZfbPotOpenRes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetZfbPotOpenRes) {
          return MergeFrom((BGSetZfbPotOpenRes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetZfbPotOpenRes other) {
        if (other == global::ProtoCmd.Service.BGSetZfbPotOpenRes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        if (other.HasCurrStatus) {
          CurrStatus = other.CurrStatus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetZfbPotOpenResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetZfbPotOpenResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadInt32(ref result.suc_);
              break;
            }
            case 16: {
              result.hasCurrStatus = input.ReadInt32(ref result.currStatus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public int Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(int value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = 0;
        return this;
      }
      
      public bool HasCurrStatus {
        get { return result.hasCurrStatus; }
      }
      public int CurrStatus {
        get { return result.CurrStatus; }
        set { SetCurrStatus(value); }
      }
      public Builder SetCurrStatus(int value) {
        PrepareBuilder();
        result.hasCurrStatus = true;
        result.currStatus_ = value;
        return this;
      }
      public Builder ClearCurrStatus() {
        PrepareBuilder();
        result.hasCurrStatus = false;
        result.currStatus_ = 0;
        return this;
      }
    }
    static BGSetZfbPotOpenRes() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetPotSwitchResp : pb::GeneratedMessage<GetPotSwitchResp, GetPotSwitchResp.Builder> {
    private GetPotSwitchResp() { }
    private static readonly GetPotSwitchResp defaultInstance = new GetPotSwitchResp().MakeReadOnly();
    private static readonly string[] _getPotSwitchRespFieldNames = new string[] { "switch" };
    private static readonly uint[] _getPotSwitchRespFieldTags = new uint[] { 8 };
    public static GetPotSwitchResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetPotSwitchResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetPotSwitchResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_GetPotSwitchResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetPotSwitchResp, GetPotSwitchResp.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_GetPotSwitchResp__FieldAccessorTable; }
    }
    
    public const int SwitchFieldNumber = 1;
    private bool hasSwitch;
    private uint switch_;
    public bool HasSwitch {
      get { return hasSwitch; }
    }
    [global::System.CLSCompliant(false)]
    public uint Switch {
      get { return switch_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSwitch) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _getPotSwitchRespFieldNames;
      if (hasSwitch) {
        output.WriteUInt32(1, field_names[0], Switch);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSwitch) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Switch);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GetPotSwitchResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetPotSwitchResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetPotSwitchResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetPotSwitchResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetPotSwitchResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetPotSwitchResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetPotSwitchResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetPotSwitchResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetPotSwitchResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetPotSwitchResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetPotSwitchResp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetPotSwitchResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetPotSwitchResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetPotSwitchResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetPotSwitchResp result;
      
      private GetPotSwitchResp PrepareBuilder() {
        if (resultIsReadOnly) {
          GetPotSwitchResp original = result;
          result = new GetPotSwitchResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetPotSwitchResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.GetPotSwitchResp.Descriptor; }
      }
      
      public override GetPotSwitchResp DefaultInstanceForType {
        get { return global::ProtoCmd.Service.GetPotSwitchResp.DefaultInstance; }
      }
      
      public override GetPotSwitchResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetPotSwitchResp) {
          return MergeFrom((GetPotSwitchResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetPotSwitchResp other) {
        if (other == global::ProtoCmd.Service.GetPotSwitchResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSwitch) {
          Switch = other.Switch;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getPotSwitchRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getPotSwitchRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSwitch = input.ReadUInt32(ref result.switch_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSwitch {
        get { return result.hasSwitch; }
      }
      [global::System.CLSCompliant(false)]
      public uint Switch {
        get { return result.Switch; }
        set { SetSwitch(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSwitch(uint value) {
        PrepareBuilder();
        result.hasSwitch = true;
        result.switch_ = value;
        return this;
      }
      public Builder ClearSwitch() {
        PrepareBuilder();
        result.hasSwitch = false;
        result.switch_ = 0;
        return this;
      }
    }
    static GetPotSwitchResp() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PotSwitchResp : pb::GeneratedMessage<PotSwitchResp, PotSwitchResp.Builder> {
    private PotSwitchResp() { }
    private static readonly PotSwitchResp defaultInstance = new PotSwitchResp().MakeReadOnly();
    private static readonly string[] _potSwitchRespFieldNames = new string[] { "result" };
    private static readonly uint[] _potSwitchRespFieldTags = new uint[] { 8 };
    public static PotSwitchResp DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PotSwitchResp DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PotSwitchResp ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_PotSwitchResp__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PotSwitchResp, PotSwitchResp.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_PotSwitchResp__FieldAccessorTable; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private uint result_;
    public bool HasResult {
      get { return hasResult; }
    }
    [global::System.CLSCompliant(false)]
    public uint Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _potSwitchRespFieldNames;
      if (hasResult) {
        output.WriteUInt32(1, field_names[0], Result);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Result);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PotSwitchResp ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PotSwitchResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PotSwitchResp ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PotSwitchResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PotSwitchResp ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PotSwitchResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PotSwitchResp ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PotSwitchResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PotSwitchResp ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PotSwitchResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PotSwitchResp MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PotSwitchResp prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PotSwitchResp, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PotSwitchResp cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PotSwitchResp result;
      
      private PotSwitchResp PrepareBuilder() {
        if (resultIsReadOnly) {
          PotSwitchResp original = result;
          result = new PotSwitchResp();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PotSwitchResp MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.PotSwitchResp.Descriptor; }
      }
      
      public override PotSwitchResp DefaultInstanceForType {
        get { return global::ProtoCmd.Service.PotSwitchResp.DefaultInstance; }
      }
      
      public override PotSwitchResp BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PotSwitchResp) {
          return MergeFrom((PotSwitchResp) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PotSwitchResp other) {
        if (other == global::ProtoCmd.Service.PotSwitchResp.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_potSwitchRespFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _potSwitchRespFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadUInt32(ref result.result_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      [global::System.CLSCompliant(false)]
      public uint Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResult(uint value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static PotSwitchResp() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PotSwitch : pb::GeneratedMessage<PotSwitch, PotSwitch.Builder> {
    private PotSwitch() { }
    private static readonly PotSwitch defaultInstance = new PotSwitch().MakeReadOnly();
    private static readonly string[] _potSwitchFieldNames = new string[] { "config", "tableid" };
    private static readonly uint[] _potSwitchFieldTags = new uint[] { 16, 8 };
    public static PotSwitch DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PotSwitch DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PotSwitch ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_PotSwitch__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PotSwitch, PotSwitch.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_PotSwitch__FieldAccessorTable; }
    }
    
    public const int TableidFieldNumber = 1;
    private bool hasTableid;
    private uint tableid_;
    public bool HasTableid {
      get { return hasTableid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tableid {
      get { return tableid_; }
    }
    
    public const int ConfigFieldNumber = 2;
    private bool hasConfig;
    private uint config_;
    public bool HasConfig {
      get { return hasConfig; }
    }
    [global::System.CLSCompliant(false)]
    public uint Config {
      get { return config_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableid) return false;
        if (!hasConfig) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _potSwitchFieldNames;
      if (hasTableid) {
        output.WriteUInt32(1, field_names[1], Tableid);
      }
      if (hasConfig) {
        output.WriteUInt32(2, field_names[0], Config);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTableid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Tableid);
      }
      if (hasConfig) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Config);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PotSwitch ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PotSwitch ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PotSwitch ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PotSwitch ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PotSwitch ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PotSwitch ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PotSwitch ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PotSwitch ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PotSwitch ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PotSwitch ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PotSwitch MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PotSwitch prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PotSwitch, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PotSwitch cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PotSwitch result;
      
      private PotSwitch PrepareBuilder() {
        if (resultIsReadOnly) {
          PotSwitch original = result;
          result = new PotSwitch();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PotSwitch MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.PotSwitch.Descriptor; }
      }
      
      public override PotSwitch DefaultInstanceForType {
        get { return global::ProtoCmd.Service.PotSwitch.DefaultInstance; }
      }
      
      public override PotSwitch BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PotSwitch) {
          return MergeFrom((PotSwitch) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PotSwitch other) {
        if (other == global::ProtoCmd.Service.PotSwitch.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTableid) {
          Tableid = other.Tableid;
        }
        if (other.HasConfig) {
          Config = other.Config;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_potSwitchFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _potSwitchFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTableid = input.ReadUInt32(ref result.tableid_);
              break;
            }
            case 16: {
              result.hasConfig = input.ReadUInt32(ref result.config_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTableid {
        get { return result.hasTableid; }
      }
      [global::System.CLSCompliant(false)]
      public uint Tableid {
        get { return result.Tableid; }
        set { SetTableid(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTableid(uint value) {
        PrepareBuilder();
        result.hasTableid = true;
        result.tableid_ = value;
        return this;
      }
      public Builder ClearTableid() {
        PrepareBuilder();
        result.hasTableid = false;
        result.tableid_ = 0;
        return this;
      }
      
      public bool HasConfig {
        get { return result.hasConfig; }
      }
      [global::System.CLSCompliant(false)]
      public uint Config {
        get { return result.Config; }
        set { SetConfig(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetConfig(uint value) {
        PrepareBuilder();
        result.hasConfig = true;
        result.config_ = value;
        return this;
      }
      public Builder ClearConfig() {
        PrepareBuilder();
        result.hasConfig = false;
        result.config_ = 0;
        return this;
      }
    }
    static PotSwitch() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Test_S : pb::GeneratedMessage<Service_Test_S, Service_Test_S.Builder> {
    private Service_Test_S() { }
    private static readonly Service_Test_S defaultInstance = new Service_Test_S().MakeReadOnly();
    private static readonly string[] _serviceTestSFieldNames = new string[] { "suc", "szAccount" };
    private static readonly uint[] _serviceTestSFieldTags = new uint[] { 16, 10 };
    public static Service_Test_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Test_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Test_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Test_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Test_S, Service_Test_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Test_S__FieldAccessorTable; }
    }
    
    public const int SzAccountFieldNumber = 1;
    private bool hasSzAccount;
    private string szAccount_ = "";
    public bool HasSzAccount {
      get { return hasSzAccount; }
    }
    public string SzAccount {
      get { return szAccount_; }
    }
    
    public const int SucFieldNumber = 2;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSzAccount) return false;
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceTestSFieldNames;
      if (hasSzAccount) {
        output.WriteString(1, field_names[1], SzAccount);
      }
      if (hasSuc) {
        output.WriteBool(2, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSzAccount) {
        size += pb::CodedOutputStream.ComputeStringSize(1, SzAccount);
      }
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Test_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Test_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Test_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Test_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Test_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Test_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Test_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Test_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Test_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Test_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Test_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Test_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Test_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Test_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Test_S result;
      
      private Service_Test_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Test_S original = result;
          result = new Service_Test_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Test_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Test_S.Descriptor; }
      }
      
      public override Service_Test_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Test_S.DefaultInstance; }
      }
      
      public override Service_Test_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Test_S) {
          return MergeFrom((Service_Test_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Test_S other) {
        if (other == global::ProtoCmd.Service.Service_Test_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSzAccount) {
          SzAccount = other.SzAccount;
        }
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceTestSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceTestSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSzAccount = input.ReadString(ref result.szAccount_);
              break;
            }
            case 16: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSzAccount {
        get { return result.hasSzAccount; }
      }
      public string SzAccount {
        get { return result.SzAccount; }
        set { SetSzAccount(value); }
      }
      public Builder SetSzAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzAccount = true;
        result.szAccount_ = value;
        return this;
      }
      public Builder ClearSzAccount() {
        PrepareBuilder();
        result.hasSzAccount = false;
        result.szAccount_ = "";
        return this;
      }
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_Test_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Kick_C : pb::GeneratedMessage<Service_Kick_C, Service_Kick_C.Builder> {
    private Service_Kick_C() { }
    private static readonly Service_Kick_C defaultInstance = new Service_Kick_C().MakeReadOnly();
    private static readonly string[] _serviceKickCFieldNames = new string[] { "dwUserID" };
    private static readonly uint[] _serviceKickCFieldTags = new uint[] { 8 };
    public static Service_Kick_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Kick_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Kick_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Kick_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Kick_C, Service_Kick_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Kick_C__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceKickCFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[0], DwUserID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Kick_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Kick_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Kick_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Kick_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Kick_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Kick_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Kick_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Kick_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Kick_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Kick_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Kick_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Kick_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Kick_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Kick_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Kick_C result;
      
      private Service_Kick_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Kick_C original = result;
          result = new Service_Kick_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Kick_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Kick_C.Descriptor; }
      }
      
      public override Service_Kick_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Kick_C.DefaultInstance; }
      }
      
      public override Service_Kick_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Kick_C) {
          return MergeFrom((Service_Kick_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Kick_C other) {
        if (other == global::ProtoCmd.Service.Service_Kick_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceKickCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceKickCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
    }
    static Service_Kick_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Kick_S : pb::GeneratedMessage<Service_Kick_S, Service_Kick_S.Builder> {
    private Service_Kick_S() { }
    private static readonly Service_Kick_S defaultInstance = new Service_Kick_S().MakeReadOnly();
    private static readonly string[] _serviceKickSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceKickSFieldTags = new uint[] { 8 };
    public static Service_Kick_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Kick_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Kick_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Kick_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Kick_S, Service_Kick_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Kick_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceKickSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Kick_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Kick_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Kick_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Kick_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Kick_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Kick_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Kick_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Kick_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Kick_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Kick_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Kick_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Kick_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Kick_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Kick_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Kick_S result;
      
      private Service_Kick_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Kick_S original = result;
          result = new Service_Kick_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Kick_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Kick_S.Descriptor; }
      }
      
      public override Service_Kick_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Kick_S.DefaultInstance; }
      }
      
      public override Service_Kick_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Kick_S) {
          return MergeFrom((Service_Kick_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Kick_S other) {
        if (other == global::ProtoCmd.Service.Service_Kick_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceKickSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceKickSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_Kick_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Query_C : pb::GeneratedMessage<Service_Query_C, Service_Query_C.Builder> {
    private Service_Query_C() { }
    private static readonly Service_Query_C defaultInstance = new Service_Query_C().MakeReadOnly();
    private static readonly string[] _serviceQueryCFieldNames = new string[] { "szAccount" };
    private static readonly uint[] _serviceQueryCFieldTags = new uint[] { 10 };
    public static Service_Query_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Query_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Query_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Query_C, Service_Query_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_C__FieldAccessorTable; }
    }
    
    public const int SzAccountFieldNumber = 1;
    private bool hasSzAccount;
    private string szAccount_ = "";
    public bool HasSzAccount {
      get { return hasSzAccount; }
    }
    public string SzAccount {
      get { return szAccount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSzAccount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceQueryCFieldNames;
      if (hasSzAccount) {
        output.WriteString(1, field_names[0], SzAccount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSzAccount) {
        size += pb::CodedOutputStream.ComputeStringSize(1, SzAccount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Query_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Query_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Query_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Query_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Query_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Query_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Query_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Query_C result;
      
      private Service_Query_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Query_C original = result;
          result = new Service_Query_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Query_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Query_C.Descriptor; }
      }
      
      public override Service_Query_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Query_C.DefaultInstance; }
      }
      
      public override Service_Query_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Query_C) {
          return MergeFrom((Service_Query_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Query_C other) {
        if (other == global::ProtoCmd.Service.Service_Query_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSzAccount) {
          SzAccount = other.SzAccount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceQueryCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceQueryCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSzAccount = input.ReadString(ref result.szAccount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSzAccount {
        get { return result.hasSzAccount; }
      }
      public string SzAccount {
        get { return result.SzAccount; }
        set { SetSzAccount(value); }
      }
      public Builder SetSzAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzAccount = true;
        result.szAccount_ = value;
        return this;
      }
      public Builder ClearSzAccount() {
        PrepareBuilder();
        result.hasSzAccount = false;
        result.szAccount_ = "";
        return this;
      }
    }
    static Service_Query_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Query_S : pb::GeneratedMessage<Service_Query_S, Service_Query_S.Builder> {
    private Service_Query_S() { }
    private static readonly Service_Query_S defaultInstance = new Service_Query_S().MakeReadOnly();
    private static readonly string[] _serviceQuerySFieldNames = new string[] { "dwAgentID", "dwUserID", "isFreeze", "isOnline", "sex", "szAccount", "szCreateTime", "szEmail", "szIdentity", "szNickName", "szTelNum", "szTrueName" };
    private static readonly uint[] _serviceQuerySFieldTags = new uint[] { 88, 8, 56, 48, 80, 18, 98, 42, 74, 26, 34, 66 };
    public static Service_Query_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Query_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Query_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Query_S, Service_Query_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_S__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public const int SzAccountFieldNumber = 2;
    private bool hasSzAccount;
    private string szAccount_ = "";
    public bool HasSzAccount {
      get { return hasSzAccount; }
    }
    public string SzAccount {
      get { return szAccount_; }
    }
    
    public const int SzNickNameFieldNumber = 3;
    private bool hasSzNickName;
    private string szNickName_ = "";
    public bool HasSzNickName {
      get { return hasSzNickName; }
    }
    public string SzNickName {
      get { return szNickName_; }
    }
    
    public const int SzTelNumFieldNumber = 4;
    private bool hasSzTelNum;
    private string szTelNum_ = "";
    public bool HasSzTelNum {
      get { return hasSzTelNum; }
    }
    public string SzTelNum {
      get { return szTelNum_; }
    }
    
    public const int SzEmailFieldNumber = 5;
    private bool hasSzEmail;
    private string szEmail_ = "";
    public bool HasSzEmail {
      get { return hasSzEmail; }
    }
    public string SzEmail {
      get { return szEmail_; }
    }
    
    public const int IsOnlineFieldNumber = 6;
    private bool hasIsOnline;
    private bool isOnline_;
    public bool HasIsOnline {
      get { return hasIsOnline; }
    }
    public bool IsOnline {
      get { return isOnline_; }
    }
    
    public const int IsFreezeFieldNumber = 7;
    private bool hasIsFreeze;
    private bool isFreeze_;
    public bool HasIsFreeze {
      get { return hasIsFreeze; }
    }
    public bool IsFreeze {
      get { return isFreeze_; }
    }
    
    public const int SzTrueNameFieldNumber = 8;
    private bool hasSzTrueName;
    private string szTrueName_ = "";
    public bool HasSzTrueName {
      get { return hasSzTrueName; }
    }
    public string SzTrueName {
      get { return szTrueName_; }
    }
    
    public const int SzIdentityFieldNumber = 9;
    private bool hasSzIdentity;
    private string szIdentity_ = "";
    public bool HasSzIdentity {
      get { return hasSzIdentity; }
    }
    public string SzIdentity {
      get { return szIdentity_; }
    }
    
    public const int SexFieldNumber = 10;
    private bool hasSex;
    private uint sex_;
    public bool HasSex {
      get { return hasSex; }
    }
    [global::System.CLSCompliant(false)]
    public uint Sex {
      get { return sex_; }
    }
    
    public const int DwAgentIDFieldNumber = 11;
    private bool hasDwAgentID;
    private uint dwAgentID_;
    public bool HasDwAgentID {
      get { return hasDwAgentID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwAgentID {
      get { return dwAgentID_; }
    }
    
    public const int SzCreateTimeFieldNumber = 12;
    private bool hasSzCreateTime;
    private string szCreateTime_ = "";
    public bool HasSzCreateTime {
      get { return hasSzCreateTime; }
    }
    public string SzCreateTime {
      get { return szCreateTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        if (!hasSzAccount) return false;
        if (!hasSzNickName) return false;
        if (!hasSzTelNum) return false;
        if (!hasSzEmail) return false;
        if (!hasIsFreeze) return false;
        if (!hasSzTrueName) return false;
        if (!hasSzIdentity) return false;
        if (!hasSex) return false;
        if (!hasDwAgentID) return false;
        if (!hasSzCreateTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceQuerySFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[1], DwUserID);
      }
      if (hasSzAccount) {
        output.WriteString(2, field_names[5], SzAccount);
      }
      if (hasSzNickName) {
        output.WriteString(3, field_names[9], SzNickName);
      }
      if (hasSzTelNum) {
        output.WriteString(4, field_names[10], SzTelNum);
      }
      if (hasSzEmail) {
        output.WriteString(5, field_names[7], SzEmail);
      }
      if (hasIsOnline) {
        output.WriteBool(6, field_names[3], IsOnline);
      }
      if (hasIsFreeze) {
        output.WriteBool(7, field_names[2], IsFreeze);
      }
      if (hasSzTrueName) {
        output.WriteString(8, field_names[11], SzTrueName);
      }
      if (hasSzIdentity) {
        output.WriteString(9, field_names[8], SzIdentity);
      }
      if (hasSex) {
        output.WriteUInt32(10, field_names[4], Sex);
      }
      if (hasDwAgentID) {
        output.WriteUInt32(11, field_names[0], DwAgentID);
      }
      if (hasSzCreateTime) {
        output.WriteString(12, field_names[6], SzCreateTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      if (hasSzAccount) {
        size += pb::CodedOutputStream.ComputeStringSize(2, SzAccount);
      }
      if (hasSzNickName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, SzNickName);
      }
      if (hasSzTelNum) {
        size += pb::CodedOutputStream.ComputeStringSize(4, SzTelNum);
      }
      if (hasSzEmail) {
        size += pb::CodedOutputStream.ComputeStringSize(5, SzEmail);
      }
      if (hasIsOnline) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, IsOnline);
      }
      if (hasIsFreeze) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, IsFreeze);
      }
      if (hasSzTrueName) {
        size += pb::CodedOutputStream.ComputeStringSize(8, SzTrueName);
      }
      if (hasSzIdentity) {
        size += pb::CodedOutputStream.ComputeStringSize(9, SzIdentity);
      }
      if (hasSex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, Sex);
      }
      if (hasDwAgentID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, DwAgentID);
      }
      if (hasSzCreateTime) {
        size += pb::CodedOutputStream.ComputeStringSize(12, SzCreateTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Query_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Query_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Query_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Query_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Query_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Query_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Query_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Query_S result;
      
      private Service_Query_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Query_S original = result;
          result = new Service_Query_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Query_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Query_S.Descriptor; }
      }
      
      public override Service_Query_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Query_S.DefaultInstance; }
      }
      
      public override Service_Query_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Query_S) {
          return MergeFrom((Service_Query_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Query_S other) {
        if (other == global::ProtoCmd.Service.Service_Query_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        if (other.HasSzAccount) {
          SzAccount = other.SzAccount;
        }
        if (other.HasSzNickName) {
          SzNickName = other.SzNickName;
        }
        if (other.HasSzTelNum) {
          SzTelNum = other.SzTelNum;
        }
        if (other.HasSzEmail) {
          SzEmail = other.SzEmail;
        }
        if (other.HasIsOnline) {
          IsOnline = other.IsOnline;
        }
        if (other.HasIsFreeze) {
          IsFreeze = other.IsFreeze;
        }
        if (other.HasSzTrueName) {
          SzTrueName = other.SzTrueName;
        }
        if (other.HasSzIdentity) {
          SzIdentity = other.SzIdentity;
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.HasDwAgentID) {
          DwAgentID = other.DwAgentID;
        }
        if (other.HasSzCreateTime) {
          SzCreateTime = other.SzCreateTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceQuerySFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceQuerySFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
            case 18: {
              result.hasSzAccount = input.ReadString(ref result.szAccount_);
              break;
            }
            case 26: {
              result.hasSzNickName = input.ReadString(ref result.szNickName_);
              break;
            }
            case 34: {
              result.hasSzTelNum = input.ReadString(ref result.szTelNum_);
              break;
            }
            case 42: {
              result.hasSzEmail = input.ReadString(ref result.szEmail_);
              break;
            }
            case 48: {
              result.hasIsOnline = input.ReadBool(ref result.isOnline_);
              break;
            }
            case 56: {
              result.hasIsFreeze = input.ReadBool(ref result.isFreeze_);
              break;
            }
            case 66: {
              result.hasSzTrueName = input.ReadString(ref result.szTrueName_);
              break;
            }
            case 74: {
              result.hasSzIdentity = input.ReadString(ref result.szIdentity_);
              break;
            }
            case 80: {
              result.hasSex = input.ReadUInt32(ref result.sex_);
              break;
            }
            case 88: {
              result.hasDwAgentID = input.ReadUInt32(ref result.dwAgentID_);
              break;
            }
            case 98: {
              result.hasSzCreateTime = input.ReadString(ref result.szCreateTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
      
      public bool HasSzAccount {
        get { return result.hasSzAccount; }
      }
      public string SzAccount {
        get { return result.SzAccount; }
        set { SetSzAccount(value); }
      }
      public Builder SetSzAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzAccount = true;
        result.szAccount_ = value;
        return this;
      }
      public Builder ClearSzAccount() {
        PrepareBuilder();
        result.hasSzAccount = false;
        result.szAccount_ = "";
        return this;
      }
      
      public bool HasSzNickName {
        get { return result.hasSzNickName; }
      }
      public string SzNickName {
        get { return result.SzNickName; }
        set { SetSzNickName(value); }
      }
      public Builder SetSzNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzNickName = true;
        result.szNickName_ = value;
        return this;
      }
      public Builder ClearSzNickName() {
        PrepareBuilder();
        result.hasSzNickName = false;
        result.szNickName_ = "";
        return this;
      }
      
      public bool HasSzTelNum {
        get { return result.hasSzTelNum; }
      }
      public string SzTelNum {
        get { return result.SzTelNum; }
        set { SetSzTelNum(value); }
      }
      public Builder SetSzTelNum(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzTelNum = true;
        result.szTelNum_ = value;
        return this;
      }
      public Builder ClearSzTelNum() {
        PrepareBuilder();
        result.hasSzTelNum = false;
        result.szTelNum_ = "";
        return this;
      }
      
      public bool HasSzEmail {
        get { return result.hasSzEmail; }
      }
      public string SzEmail {
        get { return result.SzEmail; }
        set { SetSzEmail(value); }
      }
      public Builder SetSzEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzEmail = true;
        result.szEmail_ = value;
        return this;
      }
      public Builder ClearSzEmail() {
        PrepareBuilder();
        result.hasSzEmail = false;
        result.szEmail_ = "";
        return this;
      }
      
      public bool HasIsOnline {
        get { return result.hasIsOnline; }
      }
      public bool IsOnline {
        get { return result.IsOnline; }
        set { SetIsOnline(value); }
      }
      public Builder SetIsOnline(bool value) {
        PrepareBuilder();
        result.hasIsOnline = true;
        result.isOnline_ = value;
        return this;
      }
      public Builder ClearIsOnline() {
        PrepareBuilder();
        result.hasIsOnline = false;
        result.isOnline_ = false;
        return this;
      }
      
      public bool HasIsFreeze {
        get { return result.hasIsFreeze; }
      }
      public bool IsFreeze {
        get { return result.IsFreeze; }
        set { SetIsFreeze(value); }
      }
      public Builder SetIsFreeze(bool value) {
        PrepareBuilder();
        result.hasIsFreeze = true;
        result.isFreeze_ = value;
        return this;
      }
      public Builder ClearIsFreeze() {
        PrepareBuilder();
        result.hasIsFreeze = false;
        result.isFreeze_ = false;
        return this;
      }
      
      public bool HasSzTrueName {
        get { return result.hasSzTrueName; }
      }
      public string SzTrueName {
        get { return result.SzTrueName; }
        set { SetSzTrueName(value); }
      }
      public Builder SetSzTrueName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzTrueName = true;
        result.szTrueName_ = value;
        return this;
      }
      public Builder ClearSzTrueName() {
        PrepareBuilder();
        result.hasSzTrueName = false;
        result.szTrueName_ = "";
        return this;
      }
      
      public bool HasSzIdentity {
        get { return result.hasSzIdentity; }
      }
      public string SzIdentity {
        get { return result.SzIdentity; }
        set { SetSzIdentity(value); }
      }
      public Builder SetSzIdentity(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzIdentity = true;
        result.szIdentity_ = value;
        return this;
      }
      public Builder ClearSzIdentity() {
        PrepareBuilder();
        result.hasSzIdentity = false;
        result.szIdentity_ = "";
        return this;
      }
      
      public bool HasSex {
        get { return result.hasSex; }
      }
      [global::System.CLSCompliant(false)]
      public uint Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSex(uint value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }
      
      public bool HasDwAgentID {
        get { return result.hasDwAgentID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwAgentID {
        get { return result.DwAgentID; }
        set { SetDwAgentID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwAgentID(uint value) {
        PrepareBuilder();
        result.hasDwAgentID = true;
        result.dwAgentID_ = value;
        return this;
      }
      public Builder ClearDwAgentID() {
        PrepareBuilder();
        result.hasDwAgentID = false;
        result.dwAgentID_ = 0;
        return this;
      }
      
      public bool HasSzCreateTime {
        get { return result.hasSzCreateTime; }
      }
      public string SzCreateTime {
        get { return result.SzCreateTime; }
        set { SetSzCreateTime(value); }
      }
      public Builder SetSzCreateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzCreateTime = true;
        result.szCreateTime_ = value;
        return this;
      }
      public Builder ClearSzCreateTime() {
        PrepareBuilder();
        result.hasSzCreateTime = false;
        result.szCreateTime_ = "";
        return this;
      }
    }
    static Service_Query_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Freeze_C : pb::GeneratedMessage<Service_Freeze_C, Service_Freeze_C.Builder> {
    private Service_Freeze_C() { }
    private static readonly Service_Freeze_C defaultInstance = new Service_Freeze_C().MakeReadOnly();
    private static readonly string[] _serviceFreezeCFieldNames = new string[] { "dwFreeze", "dwMinute", "dwUserID" };
    private static readonly uint[] _serviceFreezeCFieldTags = new uint[] { 16, 24, 8 };
    public static Service_Freeze_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Freeze_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Freeze_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Freeze_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Freeze_C, Service_Freeze_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Freeze_C__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public const int DwFreezeFieldNumber = 2;
    private bool hasDwFreeze;
    private uint dwFreeze_;
    public bool HasDwFreeze {
      get { return hasDwFreeze; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwFreeze {
      get { return dwFreeze_; }
    }
    
    public const int DwMinuteFieldNumber = 3;
    private bool hasDwMinute;
    private uint dwMinute_;
    public bool HasDwMinute {
      get { return hasDwMinute; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwMinute {
      get { return dwMinute_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        if (!hasDwFreeze) return false;
        if (!hasDwMinute) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceFreezeCFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[2], DwUserID);
      }
      if (hasDwFreeze) {
        output.WriteUInt32(2, field_names[0], DwFreeze);
      }
      if (hasDwMinute) {
        output.WriteUInt32(3, field_names[1], DwMinute);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      if (hasDwFreeze) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DwFreeze);
      }
      if (hasDwMinute) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, DwMinute);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Freeze_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Freeze_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Freeze_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Freeze_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Freeze_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Freeze_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Freeze_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Freeze_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Freeze_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Freeze_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Freeze_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Freeze_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Freeze_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Freeze_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Freeze_C result;
      
      private Service_Freeze_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Freeze_C original = result;
          result = new Service_Freeze_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Freeze_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Freeze_C.Descriptor; }
      }
      
      public override Service_Freeze_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Freeze_C.DefaultInstance; }
      }
      
      public override Service_Freeze_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Freeze_C) {
          return MergeFrom((Service_Freeze_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Freeze_C other) {
        if (other == global::ProtoCmd.Service.Service_Freeze_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        if (other.HasDwFreeze) {
          DwFreeze = other.DwFreeze;
        }
        if (other.HasDwMinute) {
          DwMinute = other.DwMinute;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceFreezeCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceFreezeCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
            case 16: {
              result.hasDwFreeze = input.ReadUInt32(ref result.dwFreeze_);
              break;
            }
            case 24: {
              result.hasDwMinute = input.ReadUInt32(ref result.dwMinute_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
      
      public bool HasDwFreeze {
        get { return result.hasDwFreeze; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwFreeze {
        get { return result.DwFreeze; }
        set { SetDwFreeze(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwFreeze(uint value) {
        PrepareBuilder();
        result.hasDwFreeze = true;
        result.dwFreeze_ = value;
        return this;
      }
      public Builder ClearDwFreeze() {
        PrepareBuilder();
        result.hasDwFreeze = false;
        result.dwFreeze_ = 0;
        return this;
      }
      
      public bool HasDwMinute {
        get { return result.hasDwMinute; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwMinute {
        get { return result.DwMinute; }
        set { SetDwMinute(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwMinute(uint value) {
        PrepareBuilder();
        result.hasDwMinute = true;
        result.dwMinute_ = value;
        return this;
      }
      public Builder ClearDwMinute() {
        PrepareBuilder();
        result.hasDwMinute = false;
        result.dwMinute_ = 0;
        return this;
      }
    }
    static Service_Freeze_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Freeze_S : pb::GeneratedMessage<Service_Freeze_S, Service_Freeze_S.Builder> {
    private Service_Freeze_S() { }
    private static readonly Service_Freeze_S defaultInstance = new Service_Freeze_S().MakeReadOnly();
    private static readonly string[] _serviceFreezeSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceFreezeSFieldTags = new uint[] { 8 };
    public static Service_Freeze_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Freeze_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Freeze_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Freeze_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Freeze_S, Service_Freeze_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Freeze_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceFreezeSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Freeze_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Freeze_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Freeze_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Freeze_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Freeze_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Freeze_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Freeze_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Freeze_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Freeze_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Freeze_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Freeze_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Freeze_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Freeze_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Freeze_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Freeze_S result;
      
      private Service_Freeze_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Freeze_S original = result;
          result = new Service_Freeze_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Freeze_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Freeze_S.Descriptor; }
      }
      
      public override Service_Freeze_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Freeze_S.DefaultInstance; }
      }
      
      public override Service_Freeze_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Freeze_S) {
          return MergeFrom((Service_Freeze_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Freeze_S other) {
        if (other == global::ProtoCmd.Service.Service_Freeze_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceFreezeSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceFreezeSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_Freeze_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Send_SysMail_C : pb::GeneratedMessage<Service_Send_SysMail_C, Service_Send_SysMail_C.Builder> {
    private Service_Send_SysMail_C() { }
    private static readonly Service_Send_SysMail_C defaultInstance = new Service_Send_SysMail_C().MakeReadOnly();
    private static readonly string[] _serviceSendSysMailCFieldNames = new string[] { "szContext", "szTitle" };
    private static readonly uint[] _serviceSendSysMailCFieldTags = new uint[] { 18, 10 };
    public static Service_Send_SysMail_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Send_SysMail_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Send_SysMail_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Send_SysMail_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Send_SysMail_C, Service_Send_SysMail_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Send_SysMail_C__FieldAccessorTable; }
    }
    
    public const int SzTitleFieldNumber = 1;
    private bool hasSzTitle;
    private string szTitle_ = "";
    public bool HasSzTitle {
      get { return hasSzTitle; }
    }
    public string SzTitle {
      get { return szTitle_; }
    }
    
    public const int SzContextFieldNumber = 2;
    private bool hasSzContext;
    private string szContext_ = "";
    public bool HasSzContext {
      get { return hasSzContext; }
    }
    public string SzContext {
      get { return szContext_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSzTitle) return false;
        if (!hasSzContext) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceSendSysMailCFieldNames;
      if (hasSzTitle) {
        output.WriteString(1, field_names[1], SzTitle);
      }
      if (hasSzContext) {
        output.WriteString(2, field_names[0], SzContext);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSzTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(1, SzTitle);
      }
      if (hasSzContext) {
        size += pb::CodedOutputStream.ComputeStringSize(2, SzContext);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Send_SysMail_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Send_SysMail_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Send_SysMail_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Send_SysMail_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Send_SysMail_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Send_SysMail_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Send_SysMail_C result;
      
      private Service_Send_SysMail_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Send_SysMail_C original = result;
          result = new Service_Send_SysMail_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Send_SysMail_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Send_SysMail_C.Descriptor; }
      }
      
      public override Service_Send_SysMail_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Send_SysMail_C.DefaultInstance; }
      }
      
      public override Service_Send_SysMail_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Send_SysMail_C) {
          return MergeFrom((Service_Send_SysMail_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Send_SysMail_C other) {
        if (other == global::ProtoCmd.Service.Service_Send_SysMail_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSzTitle) {
          SzTitle = other.SzTitle;
        }
        if (other.HasSzContext) {
          SzContext = other.SzContext;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceSendSysMailCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceSendSysMailCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSzTitle = input.ReadString(ref result.szTitle_);
              break;
            }
            case 18: {
              result.hasSzContext = input.ReadString(ref result.szContext_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSzTitle {
        get { return result.hasSzTitle; }
      }
      public string SzTitle {
        get { return result.SzTitle; }
        set { SetSzTitle(value); }
      }
      public Builder SetSzTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzTitle = true;
        result.szTitle_ = value;
        return this;
      }
      public Builder ClearSzTitle() {
        PrepareBuilder();
        result.hasSzTitle = false;
        result.szTitle_ = "";
        return this;
      }
      
      public bool HasSzContext {
        get { return result.hasSzContext; }
      }
      public string SzContext {
        get { return result.SzContext; }
        set { SetSzContext(value); }
      }
      public Builder SetSzContext(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzContext = true;
        result.szContext_ = value;
        return this;
      }
      public Builder ClearSzContext() {
        PrepareBuilder();
        result.hasSzContext = false;
        result.szContext_ = "";
        return this;
      }
    }
    static Service_Send_SysMail_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Send_CloseServer : pb::GeneratedMessage<Service_Send_CloseServer, Service_Send_CloseServer.Builder> {
    private Service_Send_CloseServer() { }
    private static readonly Service_Send_CloseServer defaultInstance = new Service_Send_CloseServer().MakeReadOnly();
    private static readonly string[] _serviceSendCloseServerFieldNames = new string[] { "close" };
    private static readonly uint[] _serviceSendCloseServerFieldTags = new uint[] { 8 };
    public static Service_Send_CloseServer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Send_CloseServer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Send_CloseServer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Send_CloseServer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Send_CloseServer, Service_Send_CloseServer.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Send_CloseServer__FieldAccessorTable; }
    }
    
    public const int CloseFieldNumber = 1;
    private bool hasClose;
    private bool close_;
    public bool HasClose {
      get { return hasClose; }
    }
    public bool Close {
      get { return close_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClose) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceSendCloseServerFieldNames;
      if (hasClose) {
        output.WriteBool(1, field_names[0], Close);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClose) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Close);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Send_CloseServer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Send_CloseServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_CloseServer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Send_CloseServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_CloseServer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Send_CloseServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_CloseServer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Send_CloseServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Send_CloseServer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Send_CloseServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Send_CloseServer MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Send_CloseServer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Send_CloseServer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Send_CloseServer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Send_CloseServer result;
      
      private Service_Send_CloseServer PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Send_CloseServer original = result;
          result = new Service_Send_CloseServer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Send_CloseServer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Send_CloseServer.Descriptor; }
      }
      
      public override Service_Send_CloseServer DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Send_CloseServer.DefaultInstance; }
      }
      
      public override Service_Send_CloseServer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Send_CloseServer) {
          return MergeFrom((Service_Send_CloseServer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Send_CloseServer other) {
        if (other == global::ProtoCmd.Service.Service_Send_CloseServer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClose) {
          Close = other.Close;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceSendCloseServerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceSendCloseServerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClose = input.ReadBool(ref result.close_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClose {
        get { return result.hasClose; }
      }
      public bool Close {
        get { return result.Close; }
        set { SetClose(value); }
      }
      public Builder SetClose(bool value) {
        PrepareBuilder();
        result.hasClose = true;
        result.close_ = value;
        return this;
      }
      public Builder ClearClose() {
        PrepareBuilder();
        result.hasClose = false;
        result.close_ = false;
        return this;
      }
    }
    static Service_Send_CloseServer() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Query_ServerStatus_S : pb::GeneratedMessage<Service_Query_ServerStatus_S, Service_Query_ServerStatus_S.Builder> {
    private Service_Query_ServerStatus_S() { }
    private static readonly Service_Query_ServerStatus_S defaultInstance = new Service_Query_ServerStatus_S().MakeReadOnly();
    private static readonly string[] _serviceQueryServerStatusSFieldNames = new string[] { "close" };
    private static readonly uint[] _serviceQueryServerStatusSFieldTags = new uint[] { 8 };
    public static Service_Query_ServerStatus_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Query_ServerStatus_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Query_ServerStatus_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_ServerStatus_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Query_ServerStatus_S, Service_Query_ServerStatus_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_ServerStatus_S__FieldAccessorTable; }
    }
    
    public const int CloseFieldNumber = 1;
    private bool hasClose;
    private bool close_;
    public bool HasClose {
      get { return hasClose; }
    }
    public bool Close {
      get { return close_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClose) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceQueryServerStatusSFieldNames;
      if (hasClose) {
        output.WriteBool(1, field_names[0], Close);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClose) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Close);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Query_ServerStatus_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_ServerStatus_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Query_ServerStatus_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Query_ServerStatus_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Query_ServerStatus_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Query_ServerStatus_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Query_ServerStatus_S result;
      
      private Service_Query_ServerStatus_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Query_ServerStatus_S original = result;
          result = new Service_Query_ServerStatus_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Query_ServerStatus_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Query_ServerStatus_S.Descriptor; }
      }
      
      public override Service_Query_ServerStatus_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Query_ServerStatus_S.DefaultInstance; }
      }
      
      public override Service_Query_ServerStatus_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Query_ServerStatus_S) {
          return MergeFrom((Service_Query_ServerStatus_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Query_ServerStatus_S other) {
        if (other == global::ProtoCmd.Service.Service_Query_ServerStatus_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClose) {
          Close = other.Close;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceQueryServerStatusSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceQueryServerStatusSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClose = input.ReadBool(ref result.close_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClose {
        get { return result.hasClose; }
      }
      public bool Close {
        get { return result.Close; }
        set { SetClose(value); }
      }
      public Builder SetClose(bool value) {
        PrepareBuilder();
        result.hasClose = true;
        result.close_ = value;
        return this;
      }
      public Builder ClearClose() {
        PrepareBuilder();
        result.hasClose = false;
        result.close_ = false;
        return this;
      }
    }
    static Service_Query_ServerStatus_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Query_OnlineUser_C : pb::GeneratedMessage<Service_Query_OnlineUser_C, Service_Query_OnlineUser_C.Builder> {
    private Service_Query_OnlineUser_C() { }
    private static readonly Service_Query_OnlineUser_C defaultInstance = new Service_Query_OnlineUser_C().MakeReadOnly();
    private static readonly string[] _serviceQueryOnlineUserCFieldNames = new string[] { "dwPageIndex", "dwShowNum" };
    private static readonly uint[] _serviceQueryOnlineUserCFieldTags = new uint[] { 8, 16 };
    public static Service_Query_OnlineUser_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Query_OnlineUser_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Query_OnlineUser_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_OnlineUser_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Query_OnlineUser_C, Service_Query_OnlineUser_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_OnlineUser_C__FieldAccessorTable; }
    }
    
    public const int DwPageIndexFieldNumber = 1;
    private bool hasDwPageIndex;
    private uint dwPageIndex_;
    public bool HasDwPageIndex {
      get { return hasDwPageIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwPageIndex {
      get { return dwPageIndex_; }
    }
    
    public const int DwShowNumFieldNumber = 2;
    private bool hasDwShowNum;
    private uint dwShowNum_;
    public bool HasDwShowNum {
      get { return hasDwShowNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwShowNum {
      get { return dwShowNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwPageIndex) return false;
        if (!hasDwShowNum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceQueryOnlineUserCFieldNames;
      if (hasDwPageIndex) {
        output.WriteUInt32(1, field_names[0], DwPageIndex);
      }
      if (hasDwShowNum) {
        output.WriteUInt32(2, field_names[1], DwShowNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwPageIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwPageIndex);
      }
      if (hasDwShowNum) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DwShowNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Query_OnlineUser_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_OnlineUser_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Query_OnlineUser_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Query_OnlineUser_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Query_OnlineUser_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Query_OnlineUser_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Query_OnlineUser_C result;
      
      private Service_Query_OnlineUser_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Query_OnlineUser_C original = result;
          result = new Service_Query_OnlineUser_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Query_OnlineUser_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Query_OnlineUser_C.Descriptor; }
      }
      
      public override Service_Query_OnlineUser_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Query_OnlineUser_C.DefaultInstance; }
      }
      
      public override Service_Query_OnlineUser_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Query_OnlineUser_C) {
          return MergeFrom((Service_Query_OnlineUser_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Query_OnlineUser_C other) {
        if (other == global::ProtoCmd.Service.Service_Query_OnlineUser_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwPageIndex) {
          DwPageIndex = other.DwPageIndex;
        }
        if (other.HasDwShowNum) {
          DwShowNum = other.DwShowNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceQueryOnlineUserCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceQueryOnlineUserCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwPageIndex = input.ReadUInt32(ref result.dwPageIndex_);
              break;
            }
            case 16: {
              result.hasDwShowNum = input.ReadUInt32(ref result.dwShowNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwPageIndex {
        get { return result.hasDwPageIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwPageIndex {
        get { return result.DwPageIndex; }
        set { SetDwPageIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwPageIndex(uint value) {
        PrepareBuilder();
        result.hasDwPageIndex = true;
        result.dwPageIndex_ = value;
        return this;
      }
      public Builder ClearDwPageIndex() {
        PrepareBuilder();
        result.hasDwPageIndex = false;
        result.dwPageIndex_ = 0;
        return this;
      }
      
      public bool HasDwShowNum {
        get { return result.hasDwShowNum; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwShowNum {
        get { return result.DwShowNum; }
        set { SetDwShowNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwShowNum(uint value) {
        PrepareBuilder();
        result.hasDwShowNum = true;
        result.dwShowNum_ = value;
        return this;
      }
      public Builder ClearDwShowNum() {
        PrepareBuilder();
        result.hasDwShowNum = false;
        result.dwShowNum_ = 0;
        return this;
      }
    }
    static Service_Query_OnlineUser_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_OnlineUserInfo : pb::GeneratedMessage<Service_OnlineUserInfo, Service_OnlineUserInfo.Builder> {
    private Service_OnlineUserInfo() { }
    private static readonly Service_OnlineUserInfo defaultInstance = new Service_OnlineUserInfo().MakeReadOnly();
    private static readonly string[] _serviceOnlineUserInfoFieldNames = new string[] { "dwUserID", "strAccount", "strIP", "strLoginTime" };
    private static readonly uint[] _serviceOnlineUserInfoFieldTags = new uint[] { 16, 10, 26, 34 };
    public static Service_OnlineUserInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_OnlineUserInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_OnlineUserInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_OnlineUserInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_OnlineUserInfo, Service_OnlineUserInfo.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_OnlineUserInfo__FieldAccessorTable; }
    }
    
    public const int StrAccountFieldNumber = 1;
    private bool hasStrAccount;
    private string strAccount_ = "";
    public bool HasStrAccount {
      get { return hasStrAccount; }
    }
    public string StrAccount {
      get { return strAccount_; }
    }
    
    public const int DwUserIDFieldNumber = 2;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public const int StrIPFieldNumber = 3;
    private bool hasStrIP;
    private string strIP_ = "";
    public bool HasStrIP {
      get { return hasStrIP; }
    }
    public string StrIP {
      get { return strIP_; }
    }
    
    public const int StrLoginTimeFieldNumber = 4;
    private bool hasStrLoginTime;
    private string strLoginTime_ = "";
    public bool HasStrLoginTime {
      get { return hasStrLoginTime; }
    }
    public string StrLoginTime {
      get { return strLoginTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStrAccount) return false;
        if (!hasDwUserID) return false;
        if (!hasStrIP) return false;
        if (!hasStrLoginTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceOnlineUserInfoFieldNames;
      if (hasStrAccount) {
        output.WriteString(1, field_names[1], StrAccount);
      }
      if (hasDwUserID) {
        output.WriteUInt32(2, field_names[0], DwUserID);
      }
      if (hasStrIP) {
        output.WriteString(3, field_names[2], StrIP);
      }
      if (hasStrLoginTime) {
        output.WriteString(4, field_names[3], StrLoginTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStrAccount) {
        size += pb::CodedOutputStream.ComputeStringSize(1, StrAccount);
      }
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DwUserID);
      }
      if (hasStrIP) {
        size += pb::CodedOutputStream.ComputeStringSize(3, StrIP);
      }
      if (hasStrLoginTime) {
        size += pb::CodedOutputStream.ComputeStringSize(4, StrLoginTime);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_OnlineUserInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_OnlineUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_OnlineUserInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_OnlineUserInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_OnlineUserInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_OnlineUserInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_OnlineUserInfo result;
      
      private Service_OnlineUserInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_OnlineUserInfo original = result;
          result = new Service_OnlineUserInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_OnlineUserInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_OnlineUserInfo.Descriptor; }
      }
      
      public override Service_OnlineUserInfo DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_OnlineUserInfo.DefaultInstance; }
      }
      
      public override Service_OnlineUserInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_OnlineUserInfo) {
          return MergeFrom((Service_OnlineUserInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_OnlineUserInfo other) {
        if (other == global::ProtoCmd.Service.Service_OnlineUserInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStrAccount) {
          StrAccount = other.StrAccount;
        }
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        if (other.HasStrIP) {
          StrIP = other.StrIP;
        }
        if (other.HasStrLoginTime) {
          StrLoginTime = other.StrLoginTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceOnlineUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceOnlineUserInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasStrAccount = input.ReadString(ref result.strAccount_);
              break;
            }
            case 16: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
            case 26: {
              result.hasStrIP = input.ReadString(ref result.strIP_);
              break;
            }
            case 34: {
              result.hasStrLoginTime = input.ReadString(ref result.strLoginTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStrAccount {
        get { return result.hasStrAccount; }
      }
      public string StrAccount {
        get { return result.StrAccount; }
        set { SetStrAccount(value); }
      }
      public Builder SetStrAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrAccount = true;
        result.strAccount_ = value;
        return this;
      }
      public Builder ClearStrAccount() {
        PrepareBuilder();
        result.hasStrAccount = false;
        result.strAccount_ = "";
        return this;
      }
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
      
      public bool HasStrIP {
        get { return result.hasStrIP; }
      }
      public string StrIP {
        get { return result.StrIP; }
        set { SetStrIP(value); }
      }
      public Builder SetStrIP(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrIP = true;
        result.strIP_ = value;
        return this;
      }
      public Builder ClearStrIP() {
        PrepareBuilder();
        result.hasStrIP = false;
        result.strIP_ = "";
        return this;
      }
      
      public bool HasStrLoginTime {
        get { return result.hasStrLoginTime; }
      }
      public string StrLoginTime {
        get { return result.StrLoginTime; }
        set { SetStrLoginTime(value); }
      }
      public Builder SetStrLoginTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrLoginTime = true;
        result.strLoginTime_ = value;
        return this;
      }
      public Builder ClearStrLoginTime() {
        PrepareBuilder();
        result.hasStrLoginTime = false;
        result.strLoginTime_ = "";
        return this;
      }
    }
    static Service_OnlineUserInfo() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Query_OnlineUser_S : pb::GeneratedMessage<Service_Query_OnlineUser_S, Service_Query_OnlineUser_S.Builder> {
    private Service_Query_OnlineUser_S() { }
    private static readonly Service_Query_OnlineUser_S defaultInstance = new Service_Query_OnlineUser_S().MakeReadOnly();
    private static readonly string[] _serviceQueryOnlineUserSFieldNames = new string[] { "list", "page", "pageTotal", "showNum", "startIndex" };
    private static readonly uint[] _serviceQueryOnlineUserSFieldTags = new uint[] { 42, 24, 32, 16, 8 };
    public static Service_Query_OnlineUser_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Query_OnlineUser_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Query_OnlineUser_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_OnlineUser_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Query_OnlineUser_S, Service_Query_OnlineUser_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_OnlineUser_S__FieldAccessorTable; }
    }
    
    public const int StartIndexFieldNumber = 1;
    private bool hasStartIndex;
    private uint startIndex_;
    public bool HasStartIndex {
      get { return hasStartIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint StartIndex {
      get { return startIndex_; }
    }
    
    public const int ShowNumFieldNumber = 2;
    private bool hasShowNum;
    private uint showNum_;
    public bool HasShowNum {
      get { return hasShowNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint ShowNum {
      get { return showNum_; }
    }
    
    public const int PageFieldNumber = 3;
    private bool hasPage;
    private uint page_;
    public bool HasPage {
      get { return hasPage; }
    }
    [global::System.CLSCompliant(false)]
    public uint Page {
      get { return page_; }
    }
    
    public const int PageTotalFieldNumber = 4;
    private bool hasPageTotal;
    private uint pageTotal_;
    public bool HasPageTotal {
      get { return hasPageTotal; }
    }
    [global::System.CLSCompliant(false)]
    public uint PageTotal {
      get { return pageTotal_; }
    }
    
    public const int ListFieldNumber = 5;
    private pbc::PopsicleList<global::ProtoCmd.Service.Service_OnlineUserInfo> list_ = new pbc::PopsicleList<global::ProtoCmd.Service.Service_OnlineUserInfo>();
    public scg::IList<global::ProtoCmd.Service.Service_OnlineUserInfo> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::ProtoCmd.Service.Service_OnlineUserInfo GetList(int index) {
      return list_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStartIndex) return false;
        if (!hasShowNum) return false;
        if (!hasPage) return false;
        if (!hasPageTotal) return false;
        foreach (global::ProtoCmd.Service.Service_OnlineUserInfo element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceQueryOnlineUserSFieldNames;
      if (hasStartIndex) {
        output.WriteUInt32(1, field_names[4], StartIndex);
      }
      if (hasShowNum) {
        output.WriteUInt32(2, field_names[3], ShowNum);
      }
      if (hasPage) {
        output.WriteUInt32(3, field_names[1], Page);
      }
      if (hasPageTotal) {
        output.WriteUInt32(4, field_names[2], PageTotal);
      }
      if (list_.Count > 0) {
        output.WriteMessageArray(5, field_names[0], list_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStartIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, StartIndex);
      }
      if (hasShowNum) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ShowNum);
      }
      if (hasPage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Page);
      }
      if (hasPageTotal) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, PageTotal);
      }
      foreach (global::ProtoCmd.Service.Service_OnlineUserInfo element in ListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Query_OnlineUser_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_OnlineUser_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Query_OnlineUser_S MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Query_OnlineUser_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Query_OnlineUser_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Query_OnlineUser_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Query_OnlineUser_S result;
      
      private Service_Query_OnlineUser_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Query_OnlineUser_S original = result;
          result = new Service_Query_OnlineUser_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Query_OnlineUser_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Query_OnlineUser_S.Descriptor; }
      }
      
      public override Service_Query_OnlineUser_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Query_OnlineUser_S.DefaultInstance; }
      }
      
      public override Service_Query_OnlineUser_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Query_OnlineUser_S) {
          return MergeFrom((Service_Query_OnlineUser_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Query_OnlineUser_S other) {
        if (other == global::ProtoCmd.Service.Service_Query_OnlineUser_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartIndex) {
          StartIndex = other.StartIndex;
        }
        if (other.HasShowNum) {
          ShowNum = other.ShowNum;
        }
        if (other.HasPage) {
          Page = other.Page;
        }
        if (other.HasPageTotal) {
          PageTotal = other.PageTotal;
        }
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceQueryOnlineUserSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceQueryOnlineUserSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartIndex = input.ReadUInt32(ref result.startIndex_);
              break;
            }
            case 16: {
              result.hasShowNum = input.ReadUInt32(ref result.showNum_);
              break;
            }
            case 24: {
              result.hasPage = input.ReadUInt32(ref result.page_);
              break;
            }
            case 32: {
              result.hasPageTotal = input.ReadUInt32(ref result.pageTotal_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.list_, global::ProtoCmd.Service.Service_OnlineUserInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStartIndex {
        get { return result.hasStartIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint StartIndex {
        get { return result.StartIndex; }
        set { SetStartIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStartIndex(uint value) {
        PrepareBuilder();
        result.hasStartIndex = true;
        result.startIndex_ = value;
        return this;
      }
      public Builder ClearStartIndex() {
        PrepareBuilder();
        result.hasStartIndex = false;
        result.startIndex_ = 0;
        return this;
      }
      
      public bool HasShowNum {
        get { return result.hasShowNum; }
      }
      [global::System.CLSCompliant(false)]
      public uint ShowNum {
        get { return result.ShowNum; }
        set { SetShowNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetShowNum(uint value) {
        PrepareBuilder();
        result.hasShowNum = true;
        result.showNum_ = value;
        return this;
      }
      public Builder ClearShowNum() {
        PrepareBuilder();
        result.hasShowNum = false;
        result.showNum_ = 0;
        return this;
      }
      
      public bool HasPage {
        get { return result.hasPage; }
      }
      [global::System.CLSCompliant(false)]
      public uint Page {
        get { return result.Page; }
        set { SetPage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPage(uint value) {
        PrepareBuilder();
        result.hasPage = true;
        result.page_ = value;
        return this;
      }
      public Builder ClearPage() {
        PrepareBuilder();
        result.hasPage = false;
        result.page_ = 0;
        return this;
      }
      
      public bool HasPageTotal {
        get { return result.hasPageTotal; }
      }
      [global::System.CLSCompliant(false)]
      public uint PageTotal {
        get { return result.PageTotal; }
        set { SetPageTotal(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPageTotal(uint value) {
        PrepareBuilder();
        result.hasPageTotal = true;
        result.pageTotal_ = value;
        return this;
      }
      public Builder ClearPageTotal() {
        PrepareBuilder();
        result.hasPageTotal = false;
        result.pageTotal_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::ProtoCmd.Service.Service_OnlineUserInfo> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::ProtoCmd.Service.Service_OnlineUserInfo GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::ProtoCmd.Service.Service_OnlineUserInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::ProtoCmd.Service.Service_OnlineUserInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::ProtoCmd.Service.Service_OnlineUserInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::ProtoCmd.Service.Service_OnlineUserInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::ProtoCmd.Service.Service_OnlineUserInfo> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
    }
    static Service_Query_OnlineUser_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Query_UseOperHis_C : pb::GeneratedMessage<Service_Query_UseOperHis_C, Service_Query_UseOperHis_C.Builder> {
    private Service_Query_UseOperHis_C() { }
    private static readonly Service_Query_UseOperHis_C defaultInstance = new Service_Query_UseOperHis_C().MakeReadOnly();
    private static readonly string[] _serviceQueryUseOperHisCFieldNames = new string[] { "dwPageIndex", "dwShowNum", "dwUserID" };
    private static readonly uint[] _serviceQueryUseOperHisCFieldTags = new uint[] { 16, 24, 8 };
    public static Service_Query_UseOperHis_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Query_UseOperHis_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Query_UseOperHis_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_UseOperHis_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Query_UseOperHis_C, Service_Query_UseOperHis_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_UseOperHis_C__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public const int DwPageIndexFieldNumber = 2;
    private bool hasDwPageIndex;
    private uint dwPageIndex_;
    public bool HasDwPageIndex {
      get { return hasDwPageIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwPageIndex {
      get { return dwPageIndex_; }
    }
    
    public const int DwShowNumFieldNumber = 3;
    private bool hasDwShowNum;
    private uint dwShowNum_;
    public bool HasDwShowNum {
      get { return hasDwShowNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwShowNum {
      get { return dwShowNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        if (!hasDwPageIndex) return false;
        if (!hasDwShowNum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceQueryUseOperHisCFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[2], DwUserID);
      }
      if (hasDwPageIndex) {
        output.WriteUInt32(2, field_names[0], DwPageIndex);
      }
      if (hasDwShowNum) {
        output.WriteUInt32(3, field_names[1], DwShowNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      if (hasDwPageIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DwPageIndex);
      }
      if (hasDwShowNum) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, DwShowNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Query_UseOperHis_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_UseOperHis_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Query_UseOperHis_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Query_UseOperHis_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Query_UseOperHis_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Query_UseOperHis_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Query_UseOperHis_C result;
      
      private Service_Query_UseOperHis_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Query_UseOperHis_C original = result;
          result = new Service_Query_UseOperHis_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Query_UseOperHis_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Query_UseOperHis_C.Descriptor; }
      }
      
      public override Service_Query_UseOperHis_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Query_UseOperHis_C.DefaultInstance; }
      }
      
      public override Service_Query_UseOperHis_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Query_UseOperHis_C) {
          return MergeFrom((Service_Query_UseOperHis_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Query_UseOperHis_C other) {
        if (other == global::ProtoCmd.Service.Service_Query_UseOperHis_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        if (other.HasDwPageIndex) {
          DwPageIndex = other.DwPageIndex;
        }
        if (other.HasDwShowNum) {
          DwShowNum = other.DwShowNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceQueryUseOperHisCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceQueryUseOperHisCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
            case 16: {
              result.hasDwPageIndex = input.ReadUInt32(ref result.dwPageIndex_);
              break;
            }
            case 24: {
              result.hasDwShowNum = input.ReadUInt32(ref result.dwShowNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
      
      public bool HasDwPageIndex {
        get { return result.hasDwPageIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwPageIndex {
        get { return result.DwPageIndex; }
        set { SetDwPageIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwPageIndex(uint value) {
        PrepareBuilder();
        result.hasDwPageIndex = true;
        result.dwPageIndex_ = value;
        return this;
      }
      public Builder ClearDwPageIndex() {
        PrepareBuilder();
        result.hasDwPageIndex = false;
        result.dwPageIndex_ = 0;
        return this;
      }
      
      public bool HasDwShowNum {
        get { return result.hasDwShowNum; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwShowNum {
        get { return result.DwShowNum; }
        set { SetDwShowNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwShowNum(uint value) {
        PrepareBuilder();
        result.hasDwShowNum = true;
        result.dwShowNum_ = value;
        return this;
      }
      public Builder ClearDwShowNum() {
        PrepareBuilder();
        result.hasDwShowNum = false;
        result.dwShowNum_ = 0;
        return this;
      }
    }
    static Service_Query_UseOperHis_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_UserOperHisInfo : pb::GeneratedMessage<Service_UserOperHisInfo, Service_UserOperHisInfo.Builder> {
    private Service_UserOperHisInfo() { }
    private static readonly Service_UserOperHisInfo defaultInstance = new Service_UserOperHisInfo().MakeReadOnly();
    private static readonly string[] _serviceUserOperHisInfoFieldNames = new string[] { "content", "strTime" };
    private static readonly uint[] _serviceUserOperHisInfoFieldTags = new uint[] { 18, 10 };
    public static Service_UserOperHisInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_UserOperHisInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_UserOperHisInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_UserOperHisInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_UserOperHisInfo, Service_UserOperHisInfo.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_UserOperHisInfo__FieldAccessorTable; }
    }
    
    public const int StrTimeFieldNumber = 1;
    private bool hasStrTime;
    private string strTime_ = "";
    public bool HasStrTime {
      get { return hasStrTime; }
    }
    public string StrTime {
      get { return strTime_; }
    }
    
    public const int ContentFieldNumber = 2;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStrTime) return false;
        if (!hasContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceUserOperHisInfoFieldNames;
      if (hasStrTime) {
        output.WriteString(1, field_names[1], StrTime);
      }
      if (hasContent) {
        output.WriteString(2, field_names[0], Content);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStrTime) {
        size += pb::CodedOutputStream.ComputeStringSize(1, StrTime);
      }
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Content);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_UserOperHisInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_UserOperHisInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_UserOperHisInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_UserOperHisInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_UserOperHisInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_UserOperHisInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_UserOperHisInfo result;
      
      private Service_UserOperHisInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_UserOperHisInfo original = result;
          result = new Service_UserOperHisInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_UserOperHisInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_UserOperHisInfo.Descriptor; }
      }
      
      public override Service_UserOperHisInfo DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_UserOperHisInfo.DefaultInstance; }
      }
      
      public override Service_UserOperHisInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_UserOperHisInfo) {
          return MergeFrom((Service_UserOperHisInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_UserOperHisInfo other) {
        if (other == global::ProtoCmd.Service.Service_UserOperHisInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStrTime) {
          StrTime = other.StrTime;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceUserOperHisInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceUserOperHisInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasStrTime = input.ReadString(ref result.strTime_);
              break;
            }
            case 18: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStrTime {
        get { return result.hasStrTime; }
      }
      public string StrTime {
        get { return result.StrTime; }
        set { SetStrTime(value); }
      }
      public Builder SetStrTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrTime = true;
        result.strTime_ = value;
        return this;
      }
      public Builder ClearStrTime() {
        PrepareBuilder();
        result.hasStrTime = false;
        result.strTime_ = "";
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
    }
    static Service_UserOperHisInfo() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Query_UseOperHis_S : pb::GeneratedMessage<Service_Query_UseOperHis_S, Service_Query_UseOperHis_S.Builder> {
    private Service_Query_UseOperHis_S() { }
    private static readonly Service_Query_UseOperHis_S defaultInstance = new Service_Query_UseOperHis_S().MakeReadOnly();
    private static readonly string[] _serviceQueryUseOperHisSFieldNames = new string[] { "dwUserID", "listInfo", "page", "pageTotal", "showNum", "startIndex" };
    private static readonly uint[] _serviceQueryUseOperHisSFieldTags = new uint[] { 8, 50, 32, 40, 24, 16 };
    public static Service_Query_UseOperHis_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Query_UseOperHis_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Query_UseOperHis_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_UseOperHis_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Query_UseOperHis_S, Service_Query_UseOperHis_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Query_UseOperHis_S__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public const int StartIndexFieldNumber = 2;
    private bool hasStartIndex;
    private uint startIndex_;
    public bool HasStartIndex {
      get { return hasStartIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint StartIndex {
      get { return startIndex_; }
    }
    
    public const int ShowNumFieldNumber = 3;
    private bool hasShowNum;
    private uint showNum_;
    public bool HasShowNum {
      get { return hasShowNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint ShowNum {
      get { return showNum_; }
    }
    
    public const int PageFieldNumber = 4;
    private bool hasPage;
    private uint page_;
    public bool HasPage {
      get { return hasPage; }
    }
    [global::System.CLSCompliant(false)]
    public uint Page {
      get { return page_; }
    }
    
    public const int PageTotalFieldNumber = 5;
    private bool hasPageTotal;
    private uint pageTotal_;
    public bool HasPageTotal {
      get { return hasPageTotal; }
    }
    [global::System.CLSCompliant(false)]
    public uint PageTotal {
      get { return pageTotal_; }
    }
    
    public const int ListInfoFieldNumber = 6;
    private pbc::PopsicleList<global::ProtoCmd.Service.Service_UserOperHisInfo> listInfo_ = new pbc::PopsicleList<global::ProtoCmd.Service.Service_UserOperHisInfo>();
    public scg::IList<global::ProtoCmd.Service.Service_UserOperHisInfo> ListInfoList {
      get { return listInfo_; }
    }
    public int ListInfoCount {
      get { return listInfo_.Count; }
    }
    public global::ProtoCmd.Service.Service_UserOperHisInfo GetListInfo(int index) {
      return listInfo_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        if (!hasStartIndex) return false;
        if (!hasShowNum) return false;
        if (!hasPage) return false;
        if (!hasPageTotal) return false;
        foreach (global::ProtoCmd.Service.Service_UserOperHisInfo element in ListInfoList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceQueryUseOperHisSFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[0], DwUserID);
      }
      if (hasStartIndex) {
        output.WriteUInt32(2, field_names[5], StartIndex);
      }
      if (hasShowNum) {
        output.WriteUInt32(3, field_names[4], ShowNum);
      }
      if (hasPage) {
        output.WriteUInt32(4, field_names[2], Page);
      }
      if (hasPageTotal) {
        output.WriteUInt32(5, field_names[3], PageTotal);
      }
      if (listInfo_.Count > 0) {
        output.WriteMessageArray(6, field_names[1], listInfo_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      if (hasStartIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, StartIndex);
      }
      if (hasShowNum) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ShowNum);
      }
      if (hasPage) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Page);
      }
      if (hasPageTotal) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, PageTotal);
      }
      foreach (global::ProtoCmd.Service.Service_UserOperHisInfo element in ListInfoList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Query_UseOperHis_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Query_UseOperHis_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Query_UseOperHis_S MakeReadOnly() {
      listInfo_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Query_UseOperHis_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Query_UseOperHis_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Query_UseOperHis_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Query_UseOperHis_S result;
      
      private Service_Query_UseOperHis_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Query_UseOperHis_S original = result;
          result = new Service_Query_UseOperHis_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Query_UseOperHis_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Query_UseOperHis_S.Descriptor; }
      }
      
      public override Service_Query_UseOperHis_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Query_UseOperHis_S.DefaultInstance; }
      }
      
      public override Service_Query_UseOperHis_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Query_UseOperHis_S) {
          return MergeFrom((Service_Query_UseOperHis_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Query_UseOperHis_S other) {
        if (other == global::ProtoCmd.Service.Service_Query_UseOperHis_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        if (other.HasStartIndex) {
          StartIndex = other.StartIndex;
        }
        if (other.HasShowNum) {
          ShowNum = other.ShowNum;
        }
        if (other.HasPage) {
          Page = other.Page;
        }
        if (other.HasPageTotal) {
          PageTotal = other.PageTotal;
        }
        if (other.listInfo_.Count != 0) {
          result.listInfo_.Add(other.listInfo_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceQueryUseOperHisSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceQueryUseOperHisSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
            case 16: {
              result.hasStartIndex = input.ReadUInt32(ref result.startIndex_);
              break;
            }
            case 24: {
              result.hasShowNum = input.ReadUInt32(ref result.showNum_);
              break;
            }
            case 32: {
              result.hasPage = input.ReadUInt32(ref result.page_);
              break;
            }
            case 40: {
              result.hasPageTotal = input.ReadUInt32(ref result.pageTotal_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.listInfo_, global::ProtoCmd.Service.Service_UserOperHisInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
      
      public bool HasStartIndex {
        get { return result.hasStartIndex; }
      }
      [global::System.CLSCompliant(false)]
      public uint StartIndex {
        get { return result.StartIndex; }
        set { SetStartIndex(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStartIndex(uint value) {
        PrepareBuilder();
        result.hasStartIndex = true;
        result.startIndex_ = value;
        return this;
      }
      public Builder ClearStartIndex() {
        PrepareBuilder();
        result.hasStartIndex = false;
        result.startIndex_ = 0;
        return this;
      }
      
      public bool HasShowNum {
        get { return result.hasShowNum; }
      }
      [global::System.CLSCompliant(false)]
      public uint ShowNum {
        get { return result.ShowNum; }
        set { SetShowNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetShowNum(uint value) {
        PrepareBuilder();
        result.hasShowNum = true;
        result.showNum_ = value;
        return this;
      }
      public Builder ClearShowNum() {
        PrepareBuilder();
        result.hasShowNum = false;
        result.showNum_ = 0;
        return this;
      }
      
      public bool HasPage {
        get { return result.hasPage; }
      }
      [global::System.CLSCompliant(false)]
      public uint Page {
        get { return result.Page; }
        set { SetPage(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPage(uint value) {
        PrepareBuilder();
        result.hasPage = true;
        result.page_ = value;
        return this;
      }
      public Builder ClearPage() {
        PrepareBuilder();
        result.hasPage = false;
        result.page_ = 0;
        return this;
      }
      
      public bool HasPageTotal {
        get { return result.hasPageTotal; }
      }
      [global::System.CLSCompliant(false)]
      public uint PageTotal {
        get { return result.PageTotal; }
        set { SetPageTotal(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPageTotal(uint value) {
        PrepareBuilder();
        result.hasPageTotal = true;
        result.pageTotal_ = value;
        return this;
      }
      public Builder ClearPageTotal() {
        PrepareBuilder();
        result.hasPageTotal = false;
        result.pageTotal_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::ProtoCmd.Service.Service_UserOperHisInfo> ListInfoList {
        get { return PrepareBuilder().listInfo_; }
      }
      public int ListInfoCount {
        get { return result.ListInfoCount; }
      }
      public global::ProtoCmd.Service.Service_UserOperHisInfo GetListInfo(int index) {
        return result.GetListInfo(index);
      }
      public Builder SetListInfo(int index, global::ProtoCmd.Service.Service_UserOperHisInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.listInfo_[index] = value;
        return this;
      }
      public Builder SetListInfo(int index, global::ProtoCmd.Service.Service_UserOperHisInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.listInfo_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddListInfo(global::ProtoCmd.Service.Service_UserOperHisInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.listInfo_.Add(value);
        return this;
      }
      public Builder AddListInfo(global::ProtoCmd.Service.Service_UserOperHisInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.listInfo_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeListInfo(scg::IEnumerable<global::ProtoCmd.Service.Service_UserOperHisInfo> values) {
        PrepareBuilder();
        result.listInfo_.Add(values);
        return this;
      }
      public Builder ClearListInfo() {
        PrepareBuilder();
        result.listInfo_.Clear();
        return this;
      }
    }
    static Service_Query_UseOperHis_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Send_AnnounceMent_C : pb::GeneratedMessage<Service_Send_AnnounceMent_C, Service_Send_AnnounceMent_C.Builder> {
    private Service_Send_AnnounceMent_C() { }
    private static readonly Service_Send_AnnounceMent_C defaultInstance = new Service_Send_AnnounceMent_C().MakeReadOnly();
    private static readonly string[] _serviceSendAnnounceMentCFieldNames = new string[] { "content", "dwInterval", "dwRepeat" };
    private static readonly uint[] _serviceSendAnnounceMentCFieldTags = new uint[] { 10, 24, 16 };
    public static Service_Send_AnnounceMent_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Send_AnnounceMent_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Send_AnnounceMent_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Send_AnnounceMent_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Send_AnnounceMent_C, Service_Send_AnnounceMent_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Send_AnnounceMent_C__FieldAccessorTable; }
    }
    
    public const int ContentFieldNumber = 1;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int DwRepeatFieldNumber = 2;
    private bool hasDwRepeat;
    private uint dwRepeat_;
    public bool HasDwRepeat {
      get { return hasDwRepeat; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwRepeat {
      get { return dwRepeat_; }
    }
    
    public const int DwIntervalFieldNumber = 3;
    private bool hasDwInterval;
    private uint dwInterval_;
    public bool HasDwInterval {
      get { return hasDwInterval; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwInterval {
      get { return dwInterval_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasContent) return false;
        if (!hasDwRepeat) return false;
        if (!hasDwInterval) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceSendAnnounceMentCFieldNames;
      if (hasContent) {
        output.WriteString(1, field_names[0], Content);
      }
      if (hasDwRepeat) {
        output.WriteUInt32(2, field_names[2], DwRepeat);
      }
      if (hasDwInterval) {
        output.WriteUInt32(3, field_names[1], DwInterval);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Content);
      }
      if (hasDwRepeat) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DwRepeat);
      }
      if (hasDwInterval) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, DwInterval);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Send_AnnounceMent_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Send_AnnounceMent_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Send_AnnounceMent_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Send_AnnounceMent_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Send_AnnounceMent_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Send_AnnounceMent_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Send_AnnounceMent_C result;
      
      private Service_Send_AnnounceMent_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Send_AnnounceMent_C original = result;
          result = new Service_Send_AnnounceMent_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Send_AnnounceMent_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Send_AnnounceMent_C.Descriptor; }
      }
      
      public override Service_Send_AnnounceMent_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Send_AnnounceMent_C.DefaultInstance; }
      }
      
      public override Service_Send_AnnounceMent_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Send_AnnounceMent_C) {
          return MergeFrom((Service_Send_AnnounceMent_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Send_AnnounceMent_C other) {
        if (other == global::ProtoCmd.Service.Service_Send_AnnounceMent_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.HasDwRepeat) {
          DwRepeat = other.DwRepeat;
        }
        if (other.HasDwInterval) {
          DwInterval = other.DwInterval;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceSendAnnounceMentCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceSendAnnounceMentCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 16: {
              result.hasDwRepeat = input.ReadUInt32(ref result.dwRepeat_);
              break;
            }
            case 24: {
              result.hasDwInterval = input.ReadUInt32(ref result.dwInterval_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public bool HasDwRepeat {
        get { return result.hasDwRepeat; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwRepeat {
        get { return result.DwRepeat; }
        set { SetDwRepeat(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwRepeat(uint value) {
        PrepareBuilder();
        result.hasDwRepeat = true;
        result.dwRepeat_ = value;
        return this;
      }
      public Builder ClearDwRepeat() {
        PrepareBuilder();
        result.hasDwRepeat = false;
        result.dwRepeat_ = 0;
        return this;
      }
      
      public bool HasDwInterval {
        get { return result.hasDwInterval; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwInterval {
        get { return result.DwInterval; }
        set { SetDwInterval(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwInterval(uint value) {
        PrepareBuilder();
        result.hasDwInterval = true;
        result.dwInterval_ = value;
        return this;
      }
      public Builder ClearDwInterval() {
        PrepareBuilder();
        result.hasDwInterval = false;
        result.dwInterval_ = 0;
        return this;
      }
    }
    static Service_Send_AnnounceMent_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_BanSpeak_C : pb::GeneratedMessage<Service_BanSpeak_C, Service_BanSpeak_C.Builder> {
    private Service_BanSpeak_C() { }
    private static readonly Service_BanSpeak_C defaultInstance = new Service_BanSpeak_C().MakeReadOnly();
    private static readonly string[] _serviceBanSpeakCFieldNames = new string[] { "dwBanSpeak", "dwUserID", "minute" };
    private static readonly uint[] _serviceBanSpeakCFieldTags = new uint[] { 16, 8, 24 };
    public static Service_BanSpeak_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_BanSpeak_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_BanSpeak_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanSpeak_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_BanSpeak_C, Service_BanSpeak_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanSpeak_C__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public const int DwBanSpeakFieldNumber = 2;
    private bool hasDwBanSpeak;
    private uint dwBanSpeak_;
    public bool HasDwBanSpeak {
      get { return hasDwBanSpeak; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwBanSpeak {
      get { return dwBanSpeak_; }
    }
    
    public const int MinuteFieldNumber = 3;
    private bool hasMinute;
    private uint minute_;
    public bool HasMinute {
      get { return hasMinute; }
    }
    [global::System.CLSCompliant(false)]
    public uint Minute {
      get { return minute_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        if (!hasDwBanSpeak) return false;
        if (!hasMinute) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceBanSpeakCFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[1], DwUserID);
      }
      if (hasDwBanSpeak) {
        output.WriteUInt32(2, field_names[0], DwBanSpeak);
      }
      if (hasMinute) {
        output.WriteUInt32(3, field_names[2], Minute);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      if (hasDwBanSpeak) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DwBanSpeak);
      }
      if (hasMinute) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Minute);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_BanSpeak_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanSpeak_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanSpeak_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanSpeak_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanSpeak_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanSpeak_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_BanSpeak_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_BanSpeak_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_BanSpeak_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanSpeak_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_BanSpeak_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_BanSpeak_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_BanSpeak_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_BanSpeak_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_BanSpeak_C result;
      
      private Service_BanSpeak_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_BanSpeak_C original = result;
          result = new Service_BanSpeak_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_BanSpeak_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_BanSpeak_C.Descriptor; }
      }
      
      public override Service_BanSpeak_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_BanSpeak_C.DefaultInstance; }
      }
      
      public override Service_BanSpeak_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_BanSpeak_C) {
          return MergeFrom((Service_BanSpeak_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_BanSpeak_C other) {
        if (other == global::ProtoCmd.Service.Service_BanSpeak_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        if (other.HasDwBanSpeak) {
          DwBanSpeak = other.DwBanSpeak;
        }
        if (other.HasMinute) {
          Minute = other.Minute;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceBanSpeakCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceBanSpeakCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
            case 16: {
              result.hasDwBanSpeak = input.ReadUInt32(ref result.dwBanSpeak_);
              break;
            }
            case 24: {
              result.hasMinute = input.ReadUInt32(ref result.minute_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
      
      public bool HasDwBanSpeak {
        get { return result.hasDwBanSpeak; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwBanSpeak {
        get { return result.DwBanSpeak; }
        set { SetDwBanSpeak(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwBanSpeak(uint value) {
        PrepareBuilder();
        result.hasDwBanSpeak = true;
        result.dwBanSpeak_ = value;
        return this;
      }
      public Builder ClearDwBanSpeak() {
        PrepareBuilder();
        result.hasDwBanSpeak = false;
        result.dwBanSpeak_ = 0;
        return this;
      }
      
      public bool HasMinute {
        get { return result.hasMinute; }
      }
      [global::System.CLSCompliant(false)]
      public uint Minute {
        get { return result.Minute; }
        set { SetMinute(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinute(uint value) {
        PrepareBuilder();
        result.hasMinute = true;
        result.minute_ = value;
        return this;
      }
      public Builder ClearMinute() {
        PrepareBuilder();
        result.hasMinute = false;
        result.minute_ = 0;
        return this;
      }
    }
    static Service_BanSpeak_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_BanSpeak_S : pb::GeneratedMessage<Service_BanSpeak_S, Service_BanSpeak_S.Builder> {
    private Service_BanSpeak_S() { }
    private static readonly Service_BanSpeak_S defaultInstance = new Service_BanSpeak_S().MakeReadOnly();
    private static readonly string[] _serviceBanSpeakSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceBanSpeakSFieldTags = new uint[] { 8 };
    public static Service_BanSpeak_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_BanSpeak_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_BanSpeak_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanSpeak_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_BanSpeak_S, Service_BanSpeak_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanSpeak_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceBanSpeakSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_BanSpeak_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanSpeak_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanSpeak_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanSpeak_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanSpeak_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanSpeak_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_BanSpeak_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_BanSpeak_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_BanSpeak_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanSpeak_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_BanSpeak_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_BanSpeak_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_BanSpeak_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_BanSpeak_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_BanSpeak_S result;
      
      private Service_BanSpeak_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_BanSpeak_S original = result;
          result = new Service_BanSpeak_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_BanSpeak_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_BanSpeak_S.Descriptor; }
      }
      
      public override Service_BanSpeak_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_BanSpeak_S.DefaultInstance; }
      }
      
      public override Service_BanSpeak_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_BanSpeak_S) {
          return MergeFrom((Service_BanSpeak_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_BanSpeak_S other) {
        if (other == global::ProtoCmd.Service.Service_BanSpeak_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceBanSpeakSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceBanSpeakSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_BanSpeak_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_OnlineAddGold_C : pb::GeneratedMessage<Service_OnlineAddGold_C, Service_OnlineAddGold_C.Builder> {
    private Service_OnlineAddGold_C() { }
    private static readonly Service_OnlineAddGold_C defaultInstance = new Service_OnlineAddGold_C().MakeReadOnly();
    private static readonly string[] _serviceOnlineAddGoldCFieldNames = new string[] { "dwAddGold", "dwUserID" };
    private static readonly uint[] _serviceOnlineAddGoldCFieldTags = new uint[] { 16, 8 };
    public static Service_OnlineAddGold_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_OnlineAddGold_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_OnlineAddGold_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_OnlineAddGold_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_OnlineAddGold_C, Service_OnlineAddGold_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_OnlineAddGold_C__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public const int DwAddGoldFieldNumber = 2;
    private bool hasDwAddGold;
    private uint dwAddGold_;
    public bool HasDwAddGold {
      get { return hasDwAddGold; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwAddGold {
      get { return dwAddGold_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        if (!hasDwAddGold) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceOnlineAddGoldCFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[1], DwUserID);
      }
      if (hasDwAddGold) {
        output.WriteUInt32(2, field_names[0], DwAddGold);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      if (hasDwAddGold) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DwAddGold);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_OnlineAddGold_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_OnlineAddGold_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_OnlineAddGold_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_OnlineAddGold_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_OnlineAddGold_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_OnlineAddGold_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_OnlineAddGold_C result;
      
      private Service_OnlineAddGold_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_OnlineAddGold_C original = result;
          result = new Service_OnlineAddGold_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_OnlineAddGold_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_OnlineAddGold_C.Descriptor; }
      }
      
      public override Service_OnlineAddGold_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_OnlineAddGold_C.DefaultInstance; }
      }
      
      public override Service_OnlineAddGold_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_OnlineAddGold_C) {
          return MergeFrom((Service_OnlineAddGold_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_OnlineAddGold_C other) {
        if (other == global::ProtoCmd.Service.Service_OnlineAddGold_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        if (other.HasDwAddGold) {
          DwAddGold = other.DwAddGold;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceOnlineAddGoldCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceOnlineAddGoldCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
            case 16: {
              result.hasDwAddGold = input.ReadUInt32(ref result.dwAddGold_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
      
      public bool HasDwAddGold {
        get { return result.hasDwAddGold; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwAddGold {
        get { return result.DwAddGold; }
        set { SetDwAddGold(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwAddGold(uint value) {
        PrepareBuilder();
        result.hasDwAddGold = true;
        result.dwAddGold_ = value;
        return this;
      }
      public Builder ClearDwAddGold() {
        PrepareBuilder();
        result.hasDwAddGold = false;
        result.dwAddGold_ = 0;
        return this;
      }
    }
    static Service_OnlineAddGold_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_OnlineAddGold_S : pb::GeneratedMessage<Service_OnlineAddGold_S, Service_OnlineAddGold_S.Builder> {
    private Service_OnlineAddGold_S() { }
    private static readonly Service_OnlineAddGold_S defaultInstance = new Service_OnlineAddGold_S().MakeReadOnly();
    private static readonly string[] _serviceOnlineAddGoldSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceOnlineAddGoldSFieldTags = new uint[] { 8 };
    public static Service_OnlineAddGold_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_OnlineAddGold_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_OnlineAddGold_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_OnlineAddGold_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_OnlineAddGold_S, Service_OnlineAddGold_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_OnlineAddGold_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceOnlineAddGoldSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_OnlineAddGold_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_OnlineAddGold_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_OnlineAddGold_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_OnlineAddGold_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_OnlineAddGold_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_OnlineAddGold_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_OnlineAddGold_S result;
      
      private Service_OnlineAddGold_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_OnlineAddGold_S original = result;
          result = new Service_OnlineAddGold_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_OnlineAddGold_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_OnlineAddGold_S.Descriptor; }
      }
      
      public override Service_OnlineAddGold_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_OnlineAddGold_S.DefaultInstance; }
      }
      
      public override Service_OnlineAddGold_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_OnlineAddGold_S) {
          return MergeFrom((Service_OnlineAddGold_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_OnlineAddGold_S other) {
        if (other == global::ProtoCmd.Service.Service_OnlineAddGold_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceOnlineAddGoldSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceOnlineAddGoldSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_OnlineAddGold_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_QueryInternalLogin_S : pb::GeneratedMessage<Service_QueryInternalLogin_S, Service_QueryInternalLogin_S.Builder> {
    private Service_QueryInternalLogin_S() { }
    private static readonly Service_QueryInternalLogin_S defaultInstance = new Service_QueryInternalLogin_S().MakeReadOnly();
    private static readonly string[] _serviceQueryInternalLoginSFieldNames = new string[] { "isOpen" };
    private static readonly uint[] _serviceQueryInternalLoginSFieldTags = new uint[] { 8 };
    public static Service_QueryInternalLogin_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_QueryInternalLogin_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_QueryInternalLogin_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_QueryInternalLogin_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_QueryInternalLogin_S, Service_QueryInternalLogin_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_QueryInternalLogin_S__FieldAccessorTable; }
    }
    
    public const int IsOpenFieldNumber = 1;
    private bool hasIsOpen;
    private bool isOpen_;
    public bool HasIsOpen {
      get { return hasIsOpen; }
    }
    public bool IsOpen {
      get { return isOpen_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsOpen) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceQueryInternalLoginSFieldNames;
      if (hasIsOpen) {
        output.WriteBool(1, field_names[0], IsOpen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsOpen) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, IsOpen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_QueryInternalLogin_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_QueryInternalLogin_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_QueryInternalLogin_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_QueryInternalLogin_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_QueryInternalLogin_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_QueryInternalLogin_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_QueryInternalLogin_S result;
      
      private Service_QueryInternalLogin_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_QueryInternalLogin_S original = result;
          result = new Service_QueryInternalLogin_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_QueryInternalLogin_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_QueryInternalLogin_S.Descriptor; }
      }
      
      public override Service_QueryInternalLogin_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_QueryInternalLogin_S.DefaultInstance; }
      }
      
      public override Service_QueryInternalLogin_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_QueryInternalLogin_S) {
          return MergeFrom((Service_QueryInternalLogin_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_QueryInternalLogin_S other) {
        if (other == global::ProtoCmd.Service.Service_QueryInternalLogin_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsOpen) {
          IsOpen = other.IsOpen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceQueryInternalLoginSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceQueryInternalLoginSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsOpen = input.ReadBool(ref result.isOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsOpen {
        get { return result.hasIsOpen; }
      }
      public bool IsOpen {
        get { return result.IsOpen; }
        set { SetIsOpen(value); }
      }
      public Builder SetIsOpen(bool value) {
        PrepareBuilder();
        result.hasIsOpen = true;
        result.isOpen_ = value;
        return this;
      }
      public Builder ClearIsOpen() {
        PrepareBuilder();
        result.hasIsOpen = false;
        result.isOpen_ = false;
        return this;
      }
    }
    static Service_QueryInternalLogin_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_SetInternalLogin_C : pb::GeneratedMessage<Service_SetInternalLogin_C, Service_SetInternalLogin_C.Builder> {
    private Service_SetInternalLogin_C() { }
    private static readonly Service_SetInternalLogin_C defaultInstance = new Service_SetInternalLogin_C().MakeReadOnly();
    private static readonly string[] _serviceSetInternalLoginCFieldNames = new string[] { "bOpen" };
    private static readonly uint[] _serviceSetInternalLoginCFieldTags = new uint[] { 8 };
    public static Service_SetInternalLogin_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_SetInternalLogin_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_SetInternalLogin_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_SetInternalLogin_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_SetInternalLogin_C, Service_SetInternalLogin_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_SetInternalLogin_C__FieldAccessorTable; }
    }
    
    public const int BOpenFieldNumber = 1;
    private bool hasBOpen;
    private bool bOpen_;
    public bool HasBOpen {
      get { return hasBOpen; }
    }
    public bool BOpen {
      get { return bOpen_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBOpen) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceSetInternalLoginCFieldNames;
      if (hasBOpen) {
        output.WriteBool(1, field_names[0], BOpen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBOpen) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, BOpen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_SetInternalLogin_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_SetInternalLogin_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_SetInternalLogin_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_SetInternalLogin_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_SetInternalLogin_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_SetInternalLogin_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_SetInternalLogin_C result;
      
      private Service_SetInternalLogin_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_SetInternalLogin_C original = result;
          result = new Service_SetInternalLogin_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_SetInternalLogin_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_SetInternalLogin_C.Descriptor; }
      }
      
      public override Service_SetInternalLogin_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_SetInternalLogin_C.DefaultInstance; }
      }
      
      public override Service_SetInternalLogin_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_SetInternalLogin_C) {
          return MergeFrom((Service_SetInternalLogin_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_SetInternalLogin_C other) {
        if (other == global::ProtoCmd.Service.Service_SetInternalLogin_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBOpen) {
          BOpen = other.BOpen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceSetInternalLoginCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceSetInternalLoginCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBOpen = input.ReadBool(ref result.bOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBOpen {
        get { return result.hasBOpen; }
      }
      public bool BOpen {
        get { return result.BOpen; }
        set { SetBOpen(value); }
      }
      public Builder SetBOpen(bool value) {
        PrepareBuilder();
        result.hasBOpen = true;
        result.bOpen_ = value;
        return this;
      }
      public Builder ClearBOpen() {
        PrepareBuilder();
        result.hasBOpen = false;
        result.bOpen_ = false;
        return this;
      }
    }
    static Service_SetInternalLogin_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_SetInternalLogin_S : pb::GeneratedMessage<Service_SetInternalLogin_S, Service_SetInternalLogin_S.Builder> {
    private Service_SetInternalLogin_S() { }
    private static readonly Service_SetInternalLogin_S defaultInstance = new Service_SetInternalLogin_S().MakeReadOnly();
    private static readonly string[] _serviceSetInternalLoginSFieldNames = new string[] { "isOpen" };
    private static readonly uint[] _serviceSetInternalLoginSFieldTags = new uint[] { 8 };
    public static Service_SetInternalLogin_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_SetInternalLogin_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_SetInternalLogin_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_SetInternalLogin_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_SetInternalLogin_S, Service_SetInternalLogin_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_SetInternalLogin_S__FieldAccessorTable; }
    }
    
    public const int IsOpenFieldNumber = 1;
    private bool hasIsOpen;
    private bool isOpen_;
    public bool HasIsOpen {
      get { return hasIsOpen; }
    }
    public bool IsOpen {
      get { return isOpen_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIsOpen) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceSetInternalLoginSFieldNames;
      if (hasIsOpen) {
        output.WriteBool(1, field_names[0], IsOpen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsOpen) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, IsOpen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_SetInternalLogin_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_SetInternalLogin_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_SetInternalLogin_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_SetInternalLogin_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_SetInternalLogin_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_SetInternalLogin_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_SetInternalLogin_S result;
      
      private Service_SetInternalLogin_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_SetInternalLogin_S original = result;
          result = new Service_SetInternalLogin_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_SetInternalLogin_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_SetInternalLogin_S.Descriptor; }
      }
      
      public override Service_SetInternalLogin_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_SetInternalLogin_S.DefaultInstance; }
      }
      
      public override Service_SetInternalLogin_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_SetInternalLogin_S) {
          return MergeFrom((Service_SetInternalLogin_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_SetInternalLogin_S other) {
        if (other == global::ProtoCmd.Service.Service_SetInternalLogin_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsOpen) {
          IsOpen = other.IsOpen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceSetInternalLoginSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceSetInternalLoginSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsOpen = input.ReadBool(ref result.isOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsOpen {
        get { return result.hasIsOpen; }
      }
      public bool IsOpen {
        get { return result.IsOpen; }
        set { SetIsOpen(value); }
      }
      public Builder SetIsOpen(bool value) {
        PrepareBuilder();
        result.hasIsOpen = true;
        result.isOpen_ = value;
        return this;
      }
      public Builder ClearIsOpen() {
        PrepareBuilder();
        result.hasIsOpen = false;
        result.isOpen_ = false;
        return this;
      }
    }
    static Service_SetInternalLogin_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_ItemMail_C : pb::GeneratedMessage<Service_ItemMail_C, Service_ItemMail_C.Builder> {
    private Service_ItemMail_C() { }
    private static readonly Service_ItemMail_C defaultInstance = new Service_ItemMail_C().MakeReadOnly();
    private static readonly string[] _serviceItemMailCFieldNames = new string[] { "award_type", "context", "isGlobal", "itemNum", "itemType", "itemValue", "title", "userID" };
    private static readonly uint[] _serviceItemMailCFieldTags = new uint[] { 64, 26, 56, 48, 32, 40, 18, 8 };
    public static Service_ItemMail_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_ItemMail_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_ItemMail_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ItemMail_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_ItemMail_C, Service_ItemMail_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ItemMail_C__FieldAccessorTable; }
    }
    
    public const int UserIDFieldNumber = 1;
    private pbc::PopsicleList<uint> userID_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> UserIDList {
      get { return pbc::Lists.AsReadOnly(userID_); }
    }
    public int UserIDCount {
      get { return userID_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetUserID(int index) {
      return userID_[index];
    }
    
    public const int TitleFieldNumber = 2;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int ContextFieldNumber = 3;
    private bool hasContext;
    private string context_ = "";
    public bool HasContext {
      get { return hasContext; }
    }
    public string Context {
      get { return context_; }
    }
    
    public const int ItemTypeFieldNumber = 4;
    private bool hasItemType;
    private uint itemType_;
    public bool HasItemType {
      get { return hasItemType; }
    }
    [global::System.CLSCompliant(false)]
    public uint ItemType {
      get { return itemType_; }
    }
    
    public const int ItemValueFieldNumber = 5;
    private bool hasItemValue;
    private uint itemValue_;
    public bool HasItemValue {
      get { return hasItemValue; }
    }
    [global::System.CLSCompliant(false)]
    public uint ItemValue {
      get { return itemValue_; }
    }
    
    public const int ItemNumFieldNumber = 6;
    private bool hasItemNum;
    private uint itemNum_;
    public bool HasItemNum {
      get { return hasItemNum; }
    }
    [global::System.CLSCompliant(false)]
    public uint ItemNum {
      get { return itemNum_; }
    }
    
    public const int IsGlobalFieldNumber = 7;
    private bool hasIsGlobal;
    private bool isGlobal_;
    public bool HasIsGlobal {
      get { return hasIsGlobal; }
    }
    public bool IsGlobal {
      get { return isGlobal_; }
    }
    
    public const int AwardTypeFieldNumber = 8;
    private bool hasAwardType;
    private int awardType_;
    public bool HasAwardType {
      get { return hasAwardType; }
    }
    public int AwardType {
      get { return awardType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTitle) return false;
        if (!hasContext) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceItemMailCFieldNames;
      if (userID_.Count > 0) {
        output.WriteUInt32Array(1, field_names[7], userID_);
      }
      if (hasTitle) {
        output.WriteString(2, field_names[6], Title);
      }
      if (hasContext) {
        output.WriteString(3, field_names[1], Context);
      }
      if (hasItemType) {
        output.WriteUInt32(4, field_names[4], ItemType);
      }
      if (hasItemValue) {
        output.WriteUInt32(5, field_names[5], ItemValue);
      }
      if (hasItemNum) {
        output.WriteUInt32(6, field_names[3], ItemNum);
      }
      if (hasIsGlobal) {
        output.WriteBool(7, field_names[2], IsGlobal);
      }
      if (hasAwardType) {
        output.WriteInt32(8, field_names[0], AwardType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (uint element in UserIDList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * userID_.Count;
      }
      if (hasTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Title);
      }
      if (hasContext) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Context);
      }
      if (hasItemType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ItemType);
      }
      if (hasItemValue) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ItemValue);
      }
      if (hasItemNum) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ItemNum);
      }
      if (hasIsGlobal) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, IsGlobal);
      }
      if (hasAwardType) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, AwardType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_ItemMail_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ItemMail_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ItemMail_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ItemMail_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ItemMail_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ItemMail_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_ItemMail_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_ItemMail_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_ItemMail_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ItemMail_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_ItemMail_C MakeReadOnly() {
      userID_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_ItemMail_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_ItemMail_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_ItemMail_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_ItemMail_C result;
      
      private Service_ItemMail_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_ItemMail_C original = result;
          result = new Service_ItemMail_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_ItemMail_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_ItemMail_C.Descriptor; }
      }
      
      public override Service_ItemMail_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_ItemMail_C.DefaultInstance; }
      }
      
      public override Service_ItemMail_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_ItemMail_C) {
          return MergeFrom((Service_ItemMail_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_ItemMail_C other) {
        if (other == global::ProtoCmd.Service.Service_ItemMail_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.userID_.Count != 0) {
          result.userID_.Add(other.userID_);
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasContext) {
          Context = other.Context;
        }
        if (other.HasItemType) {
          ItemType = other.ItemType;
        }
        if (other.HasItemValue) {
          ItemValue = other.ItemValue;
        }
        if (other.HasItemNum) {
          ItemNum = other.ItemNum;
        }
        if (other.HasIsGlobal) {
          IsGlobal = other.IsGlobal;
        }
        if (other.HasAwardType) {
          AwardType = other.AwardType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceItemMailCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceItemMailCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadUInt32Array(tag, field_name, result.userID_);
              break;
            }
            case 18: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 26: {
              result.hasContext = input.ReadString(ref result.context_);
              break;
            }
            case 32: {
              result.hasItemType = input.ReadUInt32(ref result.itemType_);
              break;
            }
            case 40: {
              result.hasItemValue = input.ReadUInt32(ref result.itemValue_);
              break;
            }
            case 48: {
              result.hasItemNum = input.ReadUInt32(ref result.itemNum_);
              break;
            }
            case 56: {
              result.hasIsGlobal = input.ReadBool(ref result.isGlobal_);
              break;
            }
            case 64: {
              result.hasAwardType = input.ReadInt32(ref result.awardType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> UserIDList {
        get { return PrepareBuilder().userID_; }
      }
      public int UserIDCount {
        get { return result.UserIDCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetUserID(int index) {
        return result.GetUserID(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUserID(int index, uint value) {
        PrepareBuilder();
        result.userID_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddUserID(uint value) {
        PrepareBuilder();
        result.userID_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeUserID(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.userID_.Add(values);
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.userID_.Clear();
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasContext {
        get { return result.hasContext; }
      }
      public string Context {
        get { return result.Context; }
        set { SetContext(value); }
      }
      public Builder SetContext(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContext = true;
        result.context_ = value;
        return this;
      }
      public Builder ClearContext() {
        PrepareBuilder();
        result.hasContext = false;
        result.context_ = "";
        return this;
      }
      
      public bool HasItemType {
        get { return result.hasItemType; }
      }
      [global::System.CLSCompliant(false)]
      public uint ItemType {
        get { return result.ItemType; }
        set { SetItemType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetItemType(uint value) {
        PrepareBuilder();
        result.hasItemType = true;
        result.itemType_ = value;
        return this;
      }
      public Builder ClearItemType() {
        PrepareBuilder();
        result.hasItemType = false;
        result.itemType_ = 0;
        return this;
      }
      
      public bool HasItemValue {
        get { return result.hasItemValue; }
      }
      [global::System.CLSCompliant(false)]
      public uint ItemValue {
        get { return result.ItemValue; }
        set { SetItemValue(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetItemValue(uint value) {
        PrepareBuilder();
        result.hasItemValue = true;
        result.itemValue_ = value;
        return this;
      }
      public Builder ClearItemValue() {
        PrepareBuilder();
        result.hasItemValue = false;
        result.itemValue_ = 0;
        return this;
      }
      
      public bool HasItemNum {
        get { return result.hasItemNum; }
      }
      [global::System.CLSCompliant(false)]
      public uint ItemNum {
        get { return result.ItemNum; }
        set { SetItemNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetItemNum(uint value) {
        PrepareBuilder();
        result.hasItemNum = true;
        result.itemNum_ = value;
        return this;
      }
      public Builder ClearItemNum() {
        PrepareBuilder();
        result.hasItemNum = false;
        result.itemNum_ = 0;
        return this;
      }
      
      public bool HasIsGlobal {
        get { return result.hasIsGlobal; }
      }
      public bool IsGlobal {
        get { return result.IsGlobal; }
        set { SetIsGlobal(value); }
      }
      public Builder SetIsGlobal(bool value) {
        PrepareBuilder();
        result.hasIsGlobal = true;
        result.isGlobal_ = value;
        return this;
      }
      public Builder ClearIsGlobal() {
        PrepareBuilder();
        result.hasIsGlobal = false;
        result.isGlobal_ = false;
        return this;
      }
      
      public bool HasAwardType {
        get { return result.hasAwardType; }
      }
      public int AwardType {
        get { return result.AwardType; }
        set { SetAwardType(value); }
      }
      public Builder SetAwardType(int value) {
        PrepareBuilder();
        result.hasAwardType = true;
        result.awardType_ = value;
        return this;
      }
      public Builder ClearAwardType() {
        PrepareBuilder();
        result.hasAwardType = false;
        result.awardType_ = 0;
        return this;
      }
    }
    static Service_ItemMail_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_ItemMail_S : pb::GeneratedMessage<Service_ItemMail_S, Service_ItemMail_S.Builder> {
    private Service_ItemMail_S() { }
    private static readonly Service_ItemMail_S defaultInstance = new Service_ItemMail_S().MakeReadOnly();
    private static readonly string[] _serviceItemMailSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceItemMailSFieldTags = new uint[] { 8 };
    public static Service_ItemMail_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_ItemMail_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_ItemMail_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ItemMail_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_ItemMail_S, Service_ItemMail_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ItemMail_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceItemMailSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_ItemMail_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ItemMail_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ItemMail_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ItemMail_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ItemMail_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ItemMail_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_ItemMail_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_ItemMail_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_ItemMail_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ItemMail_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_ItemMail_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_ItemMail_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_ItemMail_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_ItemMail_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_ItemMail_S result;
      
      private Service_ItemMail_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_ItemMail_S original = result;
          result = new Service_ItemMail_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_ItemMail_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_ItemMail_S.Descriptor; }
      }
      
      public override Service_ItemMail_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_ItemMail_S.DefaultInstance; }
      }
      
      public override Service_ItemMail_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_ItemMail_S) {
          return MergeFrom((Service_ItemMail_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_ItemMail_S other) {
        if (other == global::ProtoCmd.Service.Service_ItemMail_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceItemMailSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceItemMailSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_ItemMail_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Fish_C : pb::GeneratedMessage<Service_Fish_C, Service_Fish_C.Builder> {
    private Service_Fish_C() { }
    private static readonly Service_Fish_C defaultInstance = new Service_Fish_C().MakeReadOnly();
    private static readonly string[] _serviceFishCFieldNames = new string[] { "userID" };
    private static readonly uint[] _serviceFishCFieldTags = new uint[] { 8 };
    public static Service_Fish_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Fish_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Fish_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Fish_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Fish_C, Service_Fish_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Fish_C__FieldAccessorTable; }
    }
    
    public const int UserIDFieldNumber = 1;
    private bool hasUserID;
    private uint userID_;
    public bool HasUserID {
      get { return hasUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint UserID {
      get { return userID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceFishCFieldNames;
      if (hasUserID) {
        output.WriteUInt32(1, field_names[0], UserID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, UserID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Fish_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Fish_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Fish_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Fish_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Fish_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Fish_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Fish_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Fish_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Fish_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Fish_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Fish_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Fish_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Fish_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Fish_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Fish_C result;
      
      private Service_Fish_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Fish_C original = result;
          result = new Service_Fish_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Fish_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Fish_C.Descriptor; }
      }
      
      public override Service_Fish_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Fish_C.DefaultInstance; }
      }
      
      public override Service_Fish_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Fish_C) {
          return MergeFrom((Service_Fish_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Fish_C other) {
        if (other == global::ProtoCmd.Service.Service_Fish_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceFishCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceFishCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserID = input.ReadUInt32(ref result.userID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUserID(uint value) {
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = 0;
        return this;
      }
    }
    static Service_Fish_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FishInfo : pb::GeneratedMessage<FishInfo, FishInfo.Builder> {
    private FishInfo() { }
    private static readonly FishInfo defaultInstance = new FishInfo().MakeReadOnly();
    private static readonly string[] _fishInfoFieldNames = new string[] { "date", "giveID", "itemID", "name" };
    private static readonly uint[] _fishInfoFieldTags = new uint[] { 10, 32, 16, 26 };
    public static FishInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FishInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FishInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_FishInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FishInfo, FishInfo.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_FishInfo__FieldAccessorTable; }
    }
    
    public const int DateFieldNumber = 1;
    private bool hasDate;
    private string date_ = "";
    public bool HasDate {
      get { return hasDate; }
    }
    public string Date {
      get { return date_; }
    }
    
    public const int ItemIDFieldNumber = 2;
    private bool hasItemID;
    private uint itemID_;
    public bool HasItemID {
      get { return hasItemID; }
    }
    [global::System.CLSCompliant(false)]
    public uint ItemID {
      get { return itemID_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int GiveIDFieldNumber = 4;
    private bool hasGiveID;
    private uint giveID_;
    public bool HasGiveID {
      get { return hasGiveID; }
    }
    [global::System.CLSCompliant(false)]
    public uint GiveID {
      get { return giveID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDate) return false;
        if (!hasItemID) return false;
        if (!hasName) return false;
        if (!hasGiveID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _fishInfoFieldNames;
      if (hasDate) {
        output.WriteString(1, field_names[0], Date);
      }
      if (hasItemID) {
        output.WriteUInt32(2, field_names[2], ItemID);
      }
      if (hasName) {
        output.WriteString(3, field_names[3], Name);
      }
      if (hasGiveID) {
        output.WriteUInt32(4, field_names[1], GiveID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDate) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Date);
      }
      if (hasItemID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ItemID);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasGiveID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, GiveID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static FishInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FishInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FishInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FishInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FishInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FishInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FishInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FishInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FishInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FishInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FishInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FishInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<FishInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FishInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FishInfo result;
      
      private FishInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          FishInfo original = result;
          result = new FishInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FishInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.FishInfo.Descriptor; }
      }
      
      public override FishInfo DefaultInstanceForType {
        get { return global::ProtoCmd.Service.FishInfo.DefaultInstance; }
      }
      
      public override FishInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FishInfo) {
          return MergeFrom((FishInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FishInfo other) {
        if (other == global::ProtoCmd.Service.FishInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDate) {
          Date = other.Date;
        }
        if (other.HasItemID) {
          ItemID = other.ItemID;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasGiveID) {
          GiveID = other.GiveID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_fishInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _fishInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDate = input.ReadString(ref result.date_);
              break;
            }
            case 16: {
              result.hasItemID = input.ReadUInt32(ref result.itemID_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasGiveID = input.ReadUInt32(ref result.giveID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDate {
        get { return result.hasDate; }
      }
      public string Date {
        get { return result.Date; }
        set { SetDate(value); }
      }
      public Builder SetDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDate = true;
        result.date_ = value;
        return this;
      }
      public Builder ClearDate() {
        PrepareBuilder();
        result.hasDate = false;
        result.date_ = "";
        return this;
      }
      
      public bool HasItemID {
        get { return result.hasItemID; }
      }
      [global::System.CLSCompliant(false)]
      public uint ItemID {
        get { return result.ItemID; }
        set { SetItemID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetItemID(uint value) {
        PrepareBuilder();
        result.hasItemID = true;
        result.itemID_ = value;
        return this;
      }
      public Builder ClearItemID() {
        PrepareBuilder();
        result.hasItemID = false;
        result.itemID_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasGiveID {
        get { return result.hasGiveID; }
      }
      [global::System.CLSCompliant(false)]
      public uint GiveID {
        get { return result.GiveID; }
        set { SetGiveID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGiveID(uint value) {
        PrepareBuilder();
        result.hasGiveID = true;
        result.giveID_ = value;
        return this;
      }
      public Builder ClearGiveID() {
        PrepareBuilder();
        result.hasGiveID = false;
        result.giveID_ = 0;
        return this;
      }
    }
    static FishInfo() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_Fish_S : pb::GeneratedMessage<Service_Fish_S, Service_Fish_S.Builder> {
    private Service_Fish_S() { }
    private static readonly Service_Fish_S defaultInstance = new Service_Fish_S().MakeReadOnly();
    private static readonly string[] _serviceFishSFieldNames = new string[] { "fishList", "userID" };
    private static readonly uint[] _serviceFishSFieldTags = new uint[] { 18, 8 };
    public static Service_Fish_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_Fish_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_Fish_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Fish_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_Fish_S, Service_Fish_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_Fish_S__FieldAccessorTable; }
    }
    
    public const int UserIDFieldNumber = 1;
    private bool hasUserID;
    private uint userID_;
    public bool HasUserID {
      get { return hasUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint UserID {
      get { return userID_; }
    }
    
    public const int FishListFieldNumber = 2;
    private pbc::PopsicleList<global::ProtoCmd.Service.FishInfo> fishList_ = new pbc::PopsicleList<global::ProtoCmd.Service.FishInfo>();
    public scg::IList<global::ProtoCmd.Service.FishInfo> FishListList {
      get { return fishList_; }
    }
    public int FishListCount {
      get { return fishList_.Count; }
    }
    public global::ProtoCmd.Service.FishInfo GetFishList(int index) {
      return fishList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserID) return false;
        foreach (global::ProtoCmd.Service.FishInfo element in FishListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceFishSFieldNames;
      if (hasUserID) {
        output.WriteUInt32(1, field_names[1], UserID);
      }
      if (fishList_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], fishList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, UserID);
      }
      foreach (global::ProtoCmd.Service.FishInfo element in FishListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_Fish_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Fish_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Fish_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_Fish_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_Fish_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Fish_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_Fish_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_Fish_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_Fish_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_Fish_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_Fish_S MakeReadOnly() {
      fishList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_Fish_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_Fish_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_Fish_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_Fish_S result;
      
      private Service_Fish_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_Fish_S original = result;
          result = new Service_Fish_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_Fish_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_Fish_S.Descriptor; }
      }
      
      public override Service_Fish_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_Fish_S.DefaultInstance; }
      }
      
      public override Service_Fish_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_Fish_S) {
          return MergeFrom((Service_Fish_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_Fish_S other) {
        if (other == global::ProtoCmd.Service.Service_Fish_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.fishList_.Count != 0) {
          result.fishList_.Add(other.fishList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceFishSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceFishSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserID = input.ReadUInt32(ref result.userID_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.fishList_, global::ProtoCmd.Service.FishInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUserID(uint value) {
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::ProtoCmd.Service.FishInfo> FishListList {
        get { return PrepareBuilder().fishList_; }
      }
      public int FishListCount {
        get { return result.FishListCount; }
      }
      public global::ProtoCmd.Service.FishInfo GetFishList(int index) {
        return result.GetFishList(index);
      }
      public Builder SetFishList(int index, global::ProtoCmd.Service.FishInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fishList_[index] = value;
        return this;
      }
      public Builder SetFishList(int index, global::ProtoCmd.Service.FishInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fishList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFishList(global::ProtoCmd.Service.FishInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fishList_.Add(value);
        return this;
      }
      public Builder AddFishList(global::ProtoCmd.Service.FishInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fishList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFishList(scg::IEnumerable<global::ProtoCmd.Service.FishInfo> values) {
        PrepareBuilder();
        result.fishList_.Add(values);
        return this;
      }
      public Builder ClearFishList() {
        PrepareBuilder();
        result.fishList_.Clear();
        return this;
      }
    }
    static Service_Fish_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_BanIP_C : pb::GeneratedMessage<Service_BanIP_C, Service_BanIP_C.Builder> {
    private Service_BanIP_C() { }
    private static readonly Service_BanIP_C defaultInstance = new Service_BanIP_C().MakeReadOnly();
    private static readonly string[] _serviceBanIPCFieldNames = new string[] { "ip", "isBan" };
    private static readonly uint[] _serviceBanIPCFieldTags = new uint[] { 10, 16 };
    public static Service_BanIP_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_BanIP_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_BanIP_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanIP_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_BanIP_C, Service_BanIP_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanIP_C__FieldAccessorTable; }
    }
    
    public const int IpFieldNumber = 1;
    private bool hasIp;
    private string ip_ = "";
    public bool HasIp {
      get { return hasIp; }
    }
    public string Ip {
      get { return ip_; }
    }
    
    public const int IsBanFieldNumber = 2;
    private bool hasIsBan;
    private bool isBan_;
    public bool HasIsBan {
      get { return hasIsBan; }
    }
    public bool IsBan {
      get { return isBan_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIp) return false;
        if (!hasIsBan) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceBanIPCFieldNames;
      if (hasIp) {
        output.WriteString(1, field_names[0], Ip);
      }
      if (hasIsBan) {
        output.WriteBool(2, field_names[1], IsBan);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Ip);
      }
      if (hasIsBan) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, IsBan);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_BanIP_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanIP_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanIP_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanIP_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanIP_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanIP_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_BanIP_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_BanIP_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_BanIP_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanIP_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_BanIP_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_BanIP_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_BanIP_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_BanIP_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_BanIP_C result;
      
      private Service_BanIP_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_BanIP_C original = result;
          result = new Service_BanIP_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_BanIP_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_BanIP_C.Descriptor; }
      }
      
      public override Service_BanIP_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_BanIP_C.DefaultInstance; }
      }
      
      public override Service_BanIP_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_BanIP_C) {
          return MergeFrom((Service_BanIP_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_BanIP_C other) {
        if (other == global::ProtoCmd.Service.Service_BanIP_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIp) {
          Ip = other.Ip;
        }
        if (other.HasIsBan) {
          IsBan = other.IsBan;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceBanIPCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceBanIPCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIp = input.ReadString(ref result.ip_);
              break;
            }
            case 16: {
              result.hasIsBan = input.ReadBool(ref result.isBan_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIp {
        get { return result.hasIp; }
      }
      public string Ip {
        get { return result.Ip; }
        set { SetIp(value); }
      }
      public Builder SetIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIp = true;
        result.ip_ = value;
        return this;
      }
      public Builder ClearIp() {
        PrepareBuilder();
        result.hasIp = false;
        result.ip_ = "";
        return this;
      }
      
      public bool HasIsBan {
        get { return result.hasIsBan; }
      }
      public bool IsBan {
        get { return result.IsBan; }
        set { SetIsBan(value); }
      }
      public Builder SetIsBan(bool value) {
        PrepareBuilder();
        result.hasIsBan = true;
        result.isBan_ = value;
        return this;
      }
      public Builder ClearIsBan() {
        PrepareBuilder();
        result.hasIsBan = false;
        result.isBan_ = false;
        return this;
      }
    }
    static Service_BanIP_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_BanIP_S : pb::GeneratedMessage<Service_BanIP_S, Service_BanIP_S.Builder> {
    private Service_BanIP_S() { }
    private static readonly Service_BanIP_S defaultInstance = new Service_BanIP_S().MakeReadOnly();
    private static readonly string[] _serviceBanIPSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceBanIPSFieldTags = new uint[] { 8 };
    public static Service_BanIP_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_BanIP_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_BanIP_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanIP_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_BanIP_S, Service_BanIP_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanIP_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceBanIPSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_BanIP_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanIP_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanIP_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanIP_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanIP_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanIP_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_BanIP_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_BanIP_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_BanIP_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanIP_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_BanIP_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_BanIP_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_BanIP_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_BanIP_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_BanIP_S result;
      
      private Service_BanIP_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_BanIP_S original = result;
          result = new Service_BanIP_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_BanIP_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_BanIP_S.Descriptor; }
      }
      
      public override Service_BanIP_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_BanIP_S.DefaultInstance; }
      }
      
      public override Service_BanIP_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_BanIP_S) {
          return MergeFrom((Service_BanIP_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_BanIP_S other) {
        if (other == global::ProtoCmd.Service.Service_BanIP_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceBanIPSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceBanIPSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_BanIP_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_RegIP_C : pb::GeneratedMessage<Service_RegIP_C, Service_RegIP_C.Builder> {
    private Service_RegIP_C() { }
    private static readonly Service_RegIP_C defaultInstance = new Service_RegIP_C().MakeReadOnly();
    private static readonly string[] _serviceRegIPCFieldNames = new string[] { "content", "ip", "total" };
    private static readonly uint[] _serviceRegIPCFieldTags = new uint[] { 26, 10, 16 };
    public static Service_RegIP_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_RegIP_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_RegIP_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_RegIP_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_RegIP_C, Service_RegIP_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_RegIP_C__FieldAccessorTable; }
    }
    
    public const int IpFieldNumber = 1;
    private bool hasIp;
    private string ip_ = "";
    public bool HasIp {
      get { return hasIp; }
    }
    public string Ip {
      get { return ip_; }
    }
    
    public const int TotalFieldNumber = 2;
    private bool hasTotal;
    private uint total_;
    public bool HasTotal {
      get { return hasTotal; }
    }
    [global::System.CLSCompliant(false)]
    public uint Total {
      get { return total_; }
    }
    
    public const int ContentFieldNumber = 3;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIp) return false;
        if (!hasTotal) return false;
        if (!hasContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceRegIPCFieldNames;
      if (hasIp) {
        output.WriteString(1, field_names[1], Ip);
      }
      if (hasTotal) {
        output.WriteUInt32(2, field_names[2], Total);
      }
      if (hasContent) {
        output.WriteString(3, field_names[0], Content);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Ip);
      }
      if (hasTotal) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Total);
      }
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Content);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_RegIP_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_RegIP_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_RegIP_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_RegIP_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_RegIP_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_RegIP_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_RegIP_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_RegIP_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_RegIP_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_RegIP_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_RegIP_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_RegIP_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_RegIP_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_RegIP_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_RegIP_C result;
      
      private Service_RegIP_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_RegIP_C original = result;
          result = new Service_RegIP_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_RegIP_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_RegIP_C.Descriptor; }
      }
      
      public override Service_RegIP_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_RegIP_C.DefaultInstance; }
      }
      
      public override Service_RegIP_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_RegIP_C) {
          return MergeFrom((Service_RegIP_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_RegIP_C other) {
        if (other == global::ProtoCmd.Service.Service_RegIP_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIp) {
          Ip = other.Ip;
        }
        if (other.HasTotal) {
          Total = other.Total;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceRegIPCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceRegIPCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIp = input.ReadString(ref result.ip_);
              break;
            }
            case 16: {
              result.hasTotal = input.ReadUInt32(ref result.total_);
              break;
            }
            case 26: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIp {
        get { return result.hasIp; }
      }
      public string Ip {
        get { return result.Ip; }
        set { SetIp(value); }
      }
      public Builder SetIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIp = true;
        result.ip_ = value;
        return this;
      }
      public Builder ClearIp() {
        PrepareBuilder();
        result.hasIp = false;
        result.ip_ = "";
        return this;
      }
      
      public bool HasTotal {
        get { return result.hasTotal; }
      }
      [global::System.CLSCompliant(false)]
      public uint Total {
        get { return result.Total; }
        set { SetTotal(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTotal(uint value) {
        PrepareBuilder();
        result.hasTotal = true;
        result.total_ = value;
        return this;
      }
      public Builder ClearTotal() {
        PrepareBuilder();
        result.hasTotal = false;
        result.total_ = 0;
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
    }
    static Service_RegIP_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_RegIP_S : pb::GeneratedMessage<Service_RegIP_S, Service_RegIP_S.Builder> {
    private Service_RegIP_S() { }
    private static readonly Service_RegIP_S defaultInstance = new Service_RegIP_S().MakeReadOnly();
    private static readonly string[] _serviceRegIPSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceRegIPSFieldTags = new uint[] { 8 };
    public static Service_RegIP_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_RegIP_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_RegIP_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_RegIP_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_RegIP_S, Service_RegIP_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_RegIP_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceRegIPSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_RegIP_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_RegIP_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_RegIP_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_RegIP_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_RegIP_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_RegIP_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_RegIP_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_RegIP_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_RegIP_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_RegIP_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_RegIP_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_RegIP_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_RegIP_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_RegIP_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_RegIP_S result;
      
      private Service_RegIP_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_RegIP_S original = result;
          result = new Service_RegIP_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_RegIP_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_RegIP_S.Descriptor; }
      }
      
      public override Service_RegIP_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_RegIP_S.DefaultInstance; }
      }
      
      public override Service_RegIP_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_RegIP_S) {
          return MergeFrom((Service_RegIP_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_RegIP_S other) {
        if (other == global::ProtoCmd.Service.Service_RegIP_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceRegIPSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceRegIPSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_RegIP_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexasPot_Select_S : pb::GeneratedMessage<TexasPot_Select_S, TexasPot_Select_S.Builder> {
    private TexasPot_Select_S() { }
    private static readonly TexasPot_Select_S defaultInstance = new TexasPot_Select_S().MakeReadOnly();
    private static readonly string[] _texasPotSelectSFieldNames = new string[] { "ChipNum" };
    private static readonly uint[] _texasPotSelectSFieldTags = new uint[] { 8 };
    public static TexasPot_Select_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexasPot_Select_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexasPot_Select_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexasPot_Select_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexasPot_Select_S, TexasPot_Select_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexasPot_Select_S__FieldAccessorTable; }
    }
    
    public const int ChipNumFieldNumber = 1;
    private bool hasChipNum;
    private ulong chipNum_;
    public bool HasChipNum {
      get { return hasChipNum; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ChipNum {
      get { return chipNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChipNum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texasPotSelectSFieldNames;
      if (hasChipNum) {
        output.WriteUInt64(1, field_names[0], ChipNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChipNum) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ChipNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexasPot_Select_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasPot_Select_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Select_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasPot_Select_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Select_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasPot_Select_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Select_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexasPot_Select_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexasPot_Select_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasPot_Select_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexasPot_Select_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexasPot_Select_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexasPot_Select_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexasPot_Select_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexasPot_Select_S result;
      
      private TexasPot_Select_S PrepareBuilder() {
        if (resultIsReadOnly) {
          TexasPot_Select_S original = result;
          result = new TexasPot_Select_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexasPot_Select_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.TexasPot_Select_S.Descriptor; }
      }
      
      public override TexasPot_Select_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.TexasPot_Select_S.DefaultInstance; }
      }
      
      public override TexasPot_Select_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexasPot_Select_S) {
          return MergeFrom((TexasPot_Select_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexasPot_Select_S other) {
        if (other == global::ProtoCmd.Service.TexasPot_Select_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChipNum) {
          ChipNum = other.ChipNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texasPotSelectSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texasPotSelectSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChipNum = input.ReadUInt64(ref result.chipNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChipNum {
        get { return result.hasChipNum; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ChipNum {
        get { return result.ChipNum; }
        set { SetChipNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChipNum(ulong value) {
        PrepareBuilder();
        result.hasChipNum = true;
        result.chipNum_ = value;
        return this;
      }
      public Builder ClearChipNum() {
        PrepareBuilder();
        result.hasChipNum = false;
        result.chipNum_ = 0UL;
        return this;
      }
    }
    static TexasPot_Select_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexasPot_Operator_C : pb::GeneratedMessage<TexasPot_Operator_C, TexasPot_Operator_C.Builder> {
    private TexasPot_Operator_C() { }
    private static readonly TexasPot_Operator_C defaultInstance = new TexasPot_Operator_C().MakeReadOnly();
    private static readonly string[] _texasPotOperatorCFieldNames = new string[] { "opType", "opValue", "strContent" };
    private static readonly uint[] _texasPotOperatorCFieldTags = new uint[] { 8, 16, 26 };
    public static TexasPot_Operator_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexasPot_Operator_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexasPot_Operator_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexasPot_Operator_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexasPot_Operator_C, TexasPot_Operator_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexasPot_Operator_C__FieldAccessorTable; }
    }
    
    public const int OpTypeFieldNumber = 1;
    private bool hasOpType;
    private uint opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpType {
      get { return opType_; }
    }
    
    public const int OpValueFieldNumber = 2;
    private bool hasOpValue;
    private ulong opValue_;
    public bool HasOpValue {
      get { return hasOpValue; }
    }
    [global::System.CLSCompliant(false)]
    public ulong OpValue {
      get { return opValue_; }
    }
    
    public const int StrContentFieldNumber = 3;
    private bool hasStrContent;
    private string strContent_ = "";
    public bool HasStrContent {
      get { return hasStrContent; }
    }
    public string StrContent {
      get { return strContent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpType) return false;
        if (!hasOpValue) return false;
        if (!hasStrContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texasPotOperatorCFieldNames;
      if (hasOpType) {
        output.WriteUInt32(1, field_names[0], OpType);
      }
      if (hasOpValue) {
        output.WriteUInt64(2, field_names[1], OpValue);
      }
      if (hasStrContent) {
        output.WriteString(3, field_names[2], StrContent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOpType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, OpType);
      }
      if (hasOpValue) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, OpValue);
      }
      if (hasStrContent) {
        size += pb::CodedOutputStream.ComputeStringSize(3, StrContent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexasPot_Operator_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasPot_Operator_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Operator_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasPot_Operator_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Operator_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasPot_Operator_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Operator_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexasPot_Operator_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexasPot_Operator_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasPot_Operator_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexasPot_Operator_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexasPot_Operator_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexasPot_Operator_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexasPot_Operator_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexasPot_Operator_C result;
      
      private TexasPot_Operator_C PrepareBuilder() {
        if (resultIsReadOnly) {
          TexasPot_Operator_C original = result;
          result = new TexasPot_Operator_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexasPot_Operator_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.TexasPot_Operator_C.Descriptor; }
      }
      
      public override TexasPot_Operator_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.TexasPot_Operator_C.DefaultInstance; }
      }
      
      public override TexasPot_Operator_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexasPot_Operator_C) {
          return MergeFrom((TexasPot_Operator_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexasPot_Operator_C other) {
        if (other == global::ProtoCmd.Service.TexasPot_Operator_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.HasOpValue) {
          OpValue = other.OpValue;
        }
        if (other.HasStrContent) {
          StrContent = other.StrContent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texasPotOperatorCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texasPotOperatorCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOpType = input.ReadUInt32(ref result.opType_);
              break;
            }
            case 16: {
              result.hasOpValue = input.ReadUInt64(ref result.opValue_);
              break;
            }
            case 26: {
              result.hasStrContent = input.ReadString(ref result.strContent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpType(uint value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public bool HasOpValue {
        get { return result.hasOpValue; }
      }
      [global::System.CLSCompliant(false)]
      public ulong OpValue {
        get { return result.OpValue; }
        set { SetOpValue(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpValue(ulong value) {
        PrepareBuilder();
        result.hasOpValue = true;
        result.opValue_ = value;
        return this;
      }
      public Builder ClearOpValue() {
        PrepareBuilder();
        result.hasOpValue = false;
        result.opValue_ = 0UL;
        return this;
      }
      
      public bool HasStrContent {
        get { return result.hasStrContent; }
      }
      public string StrContent {
        get { return result.StrContent; }
        set { SetStrContent(value); }
      }
      public Builder SetStrContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrContent = true;
        result.strContent_ = value;
        return this;
      }
      public Builder ClearStrContent() {
        PrepareBuilder();
        result.hasStrContent = false;
        result.strContent_ = "";
        return this;
      }
    }
    static TexasPot_Operator_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexasPot_Operator_S : pb::GeneratedMessage<TexasPot_Operator_S, TexasPot_Operator_S.Builder> {
    private TexasPot_Operator_S() { }
    private static readonly TexasPot_Operator_S defaultInstance = new TexasPot_Operator_S().MakeReadOnly();
    private static readonly string[] _texasPotOperatorSFieldNames = new string[] { "opType", "suc" };
    private static readonly uint[] _texasPotOperatorSFieldTags = new uint[] { 8, 16 };
    public static TexasPot_Operator_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexasPot_Operator_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexasPot_Operator_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexasPot_Operator_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexasPot_Operator_S, TexasPot_Operator_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexasPot_Operator_S__FieldAccessorTable; }
    }
    
    public const int OpTypeFieldNumber = 1;
    private bool hasOpType;
    private uint opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpType {
      get { return opType_; }
    }
    
    public const int SucFieldNumber = 2;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpType) return false;
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texasPotOperatorSFieldNames;
      if (hasOpType) {
        output.WriteUInt32(1, field_names[0], OpType);
      }
      if (hasSuc) {
        output.WriteBool(2, field_names[1], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOpType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, OpType);
      }
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexasPot_Operator_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasPot_Operator_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Operator_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasPot_Operator_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Operator_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasPot_Operator_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexasPot_Operator_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexasPot_Operator_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexasPot_Operator_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasPot_Operator_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexasPot_Operator_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexasPot_Operator_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexasPot_Operator_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexasPot_Operator_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexasPot_Operator_S result;
      
      private TexasPot_Operator_S PrepareBuilder() {
        if (resultIsReadOnly) {
          TexasPot_Operator_S original = result;
          result = new TexasPot_Operator_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexasPot_Operator_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.TexasPot_Operator_S.Descriptor; }
      }
      
      public override TexasPot_Operator_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.TexasPot_Operator_S.DefaultInstance; }
      }
      
      public override TexasPot_Operator_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexasPot_Operator_S) {
          return MergeFrom((TexasPot_Operator_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexasPot_Operator_S other) {
        if (other == global::ProtoCmd.Service.TexasPot_Operator_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texasPotOperatorSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texasPotOperatorSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOpType = input.ReadUInt32(ref result.opType_);
              break;
            }
            case 16: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpType(uint value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static TexasPot_Operator_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class REDEVENLOPE_SELECT_S : pb::GeneratedMessage<REDEVENLOPE_SELECT_S, REDEVENLOPE_SELECT_S.Builder> {
    private REDEVENLOPE_SELECT_S() { }
    private static readonly REDEVENLOPE_SELECT_S defaultInstance = new REDEVENLOPE_SELECT_S().MakeReadOnly();
    private static readonly string[] _rEDEVENLOPESELECTSFieldNames = new string[] { "state" };
    private static readonly uint[] _rEDEVENLOPESELECTSFieldTags = new uint[] { 8 };
    public static REDEVENLOPE_SELECT_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override REDEVENLOPE_SELECT_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override REDEVENLOPE_SELECT_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_REDEVENLOPE_SELECT_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<REDEVENLOPE_SELECT_S, REDEVENLOPE_SELECT_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_REDEVENLOPE_SELECT_S__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rEDEVENLOPESELECTSFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static REDEVENLOPE_SELECT_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static REDEVENLOPE_SELECT_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private REDEVENLOPE_SELECT_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(REDEVENLOPE_SELECT_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<REDEVENLOPE_SELECT_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(REDEVENLOPE_SELECT_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private REDEVENLOPE_SELECT_S result;
      
      private REDEVENLOPE_SELECT_S PrepareBuilder() {
        if (resultIsReadOnly) {
          REDEVENLOPE_SELECT_S original = result;
          result = new REDEVENLOPE_SELECT_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override REDEVENLOPE_SELECT_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.REDEVENLOPE_SELECT_S.Descriptor; }
      }
      
      public override REDEVENLOPE_SELECT_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.REDEVENLOPE_SELECT_S.DefaultInstance; }
      }
      
      public override REDEVENLOPE_SELECT_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is REDEVENLOPE_SELECT_S) {
          return MergeFrom((REDEVENLOPE_SELECT_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(REDEVENLOPE_SELECT_S other) {
        if (other == global::ProtoCmd.Service.REDEVENLOPE_SELECT_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rEDEVENLOPESELECTSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rEDEVENLOPESELECTSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static REDEVENLOPE_SELECT_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class REDEVENLOPE_OPERATOR_C : pb::GeneratedMessage<REDEVENLOPE_OPERATOR_C, REDEVENLOPE_OPERATOR_C.Builder> {
    private REDEVENLOPE_OPERATOR_C() { }
    private static readonly REDEVENLOPE_OPERATOR_C defaultInstance = new REDEVENLOPE_OPERATOR_C().MakeReadOnly();
    private static readonly string[] _rEDEVENLOPEOPERATORCFieldNames = new string[] { "state" };
    private static readonly uint[] _rEDEVENLOPEOPERATORCFieldTags = new uint[] { 8 };
    public static REDEVENLOPE_OPERATOR_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override REDEVENLOPE_OPERATOR_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override REDEVENLOPE_OPERATOR_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<REDEVENLOPE_OPERATOR_C, REDEVENLOPE_OPERATOR_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_C__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rEDEVENLOPEOPERATORCFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static REDEVENLOPE_OPERATOR_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private REDEVENLOPE_OPERATOR_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(REDEVENLOPE_OPERATOR_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<REDEVENLOPE_OPERATOR_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(REDEVENLOPE_OPERATOR_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private REDEVENLOPE_OPERATOR_C result;
      
      private REDEVENLOPE_OPERATOR_C PrepareBuilder() {
        if (resultIsReadOnly) {
          REDEVENLOPE_OPERATOR_C original = result;
          result = new REDEVENLOPE_OPERATOR_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override REDEVENLOPE_OPERATOR_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_C.Descriptor; }
      }
      
      public override REDEVENLOPE_OPERATOR_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_C.DefaultInstance; }
      }
      
      public override REDEVENLOPE_OPERATOR_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is REDEVENLOPE_OPERATOR_C) {
          return MergeFrom((REDEVENLOPE_OPERATOR_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(REDEVENLOPE_OPERATOR_C other) {
        if (other == global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rEDEVENLOPEOPERATORCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rEDEVENLOPEOPERATORCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static REDEVENLOPE_OPERATOR_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class REDEVENLOPE_OPERATOR_S : pb::GeneratedMessage<REDEVENLOPE_OPERATOR_S, REDEVENLOPE_OPERATOR_S.Builder> {
    private REDEVENLOPE_OPERATOR_S() { }
    private static readonly REDEVENLOPE_OPERATOR_S defaultInstance = new REDEVENLOPE_OPERATOR_S().MakeReadOnly();
    private static readonly string[] _rEDEVENLOPEOPERATORSFieldNames = new string[] { "bsucc", "state" };
    private static readonly uint[] _rEDEVENLOPEOPERATORSFieldTags = new uint[] { 16, 8 };
    public static REDEVENLOPE_OPERATOR_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override REDEVENLOPE_OPERATOR_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override REDEVENLOPE_OPERATOR_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<REDEVENLOPE_OPERATOR_S, REDEVENLOPE_OPERATOR_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_REDEVENLOPE_OPERATOR_S__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public const int BsuccFieldNumber = 2;
    private bool hasBsucc;
    private bool bsucc_;
    public bool HasBsucc {
      get { return hasBsucc; }
    }
    public bool Bsucc {
      get { return bsucc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        if (!hasBsucc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rEDEVENLOPEOPERATORSFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[1], State);
      }
      if (hasBsucc) {
        output.WriteBool(2, field_names[0], Bsucc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      if (hasBsucc) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Bsucc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static REDEVENLOPE_OPERATOR_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static REDEVENLOPE_OPERATOR_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private REDEVENLOPE_OPERATOR_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(REDEVENLOPE_OPERATOR_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<REDEVENLOPE_OPERATOR_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(REDEVENLOPE_OPERATOR_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private REDEVENLOPE_OPERATOR_S result;
      
      private REDEVENLOPE_OPERATOR_S PrepareBuilder() {
        if (resultIsReadOnly) {
          REDEVENLOPE_OPERATOR_S original = result;
          result = new REDEVENLOPE_OPERATOR_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override REDEVENLOPE_OPERATOR_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_S.Descriptor; }
      }
      
      public override REDEVENLOPE_OPERATOR_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_S.DefaultInstance; }
      }
      
      public override REDEVENLOPE_OPERATOR_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is REDEVENLOPE_OPERATOR_S) {
          return MergeFrom((REDEVENLOPE_OPERATOR_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(REDEVENLOPE_OPERATOR_S other) {
        if (other == global::ProtoCmd.Service.REDEVENLOPE_OPERATOR_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasBsucc) {
          Bsucc = other.Bsucc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rEDEVENLOPEOPERATORSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rEDEVENLOPEOPERATORSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
            case 16: {
              result.hasBsucc = input.ReadBool(ref result.bsucc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
      
      public bool HasBsucc {
        get { return result.hasBsucc; }
      }
      public bool Bsucc {
        get { return result.Bsucc; }
        set { SetBsucc(value); }
      }
      public Builder SetBsucc(bool value) {
        PrepareBuilder();
        result.hasBsucc = true;
        result.bsucc_ = value;
        return this;
      }
      public Builder ClearBsucc() {
        PrepareBuilder();
        result.hasBsucc = false;
        result.bsucc_ = false;
        return this;
      }
    }
    static REDEVENLOPE_OPERATOR_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_BanMac_C : pb::GeneratedMessage<Service_BanMac_C, Service_BanMac_C.Builder> {
    private Service_BanMac_C() { }
    private static readonly Service_BanMac_C defaultInstance = new Service_BanMac_C().MakeReadOnly();
    private static readonly string[] _serviceBanMacCFieldNames = new string[] { "isBan", "macAddr" };
    private static readonly uint[] _serviceBanMacCFieldTags = new uint[] { 16, 10 };
    public static Service_BanMac_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_BanMac_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_BanMac_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanMac_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_BanMac_C, Service_BanMac_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanMac_C__FieldAccessorTable; }
    }
    
    public const int MacAddrFieldNumber = 1;
    private bool hasMacAddr;
    private string macAddr_ = "";
    public bool HasMacAddr {
      get { return hasMacAddr; }
    }
    public string MacAddr {
      get { return macAddr_; }
    }
    
    public const int IsBanFieldNumber = 2;
    private bool hasIsBan;
    private bool isBan_;
    public bool HasIsBan {
      get { return hasIsBan; }
    }
    public bool IsBan {
      get { return isBan_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMacAddr) return false;
        if (!hasIsBan) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceBanMacCFieldNames;
      if (hasMacAddr) {
        output.WriteString(1, field_names[1], MacAddr);
      }
      if (hasIsBan) {
        output.WriteBool(2, field_names[0], IsBan);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMacAddr) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MacAddr);
      }
      if (hasIsBan) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, IsBan);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_BanMac_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanMac_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanMac_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanMac_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanMac_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanMac_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_BanMac_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_BanMac_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_BanMac_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanMac_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_BanMac_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_BanMac_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_BanMac_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_BanMac_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_BanMac_C result;
      
      private Service_BanMac_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_BanMac_C original = result;
          result = new Service_BanMac_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_BanMac_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_BanMac_C.Descriptor; }
      }
      
      public override Service_BanMac_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_BanMac_C.DefaultInstance; }
      }
      
      public override Service_BanMac_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_BanMac_C) {
          return MergeFrom((Service_BanMac_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_BanMac_C other) {
        if (other == global::ProtoCmd.Service.Service_BanMac_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMacAddr) {
          MacAddr = other.MacAddr;
        }
        if (other.HasIsBan) {
          IsBan = other.IsBan;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceBanMacCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceBanMacCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMacAddr = input.ReadString(ref result.macAddr_);
              break;
            }
            case 16: {
              result.hasIsBan = input.ReadBool(ref result.isBan_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMacAddr {
        get { return result.hasMacAddr; }
      }
      public string MacAddr {
        get { return result.MacAddr; }
        set { SetMacAddr(value); }
      }
      public Builder SetMacAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMacAddr = true;
        result.macAddr_ = value;
        return this;
      }
      public Builder ClearMacAddr() {
        PrepareBuilder();
        result.hasMacAddr = false;
        result.macAddr_ = "";
        return this;
      }
      
      public bool HasIsBan {
        get { return result.hasIsBan; }
      }
      public bool IsBan {
        get { return result.IsBan; }
        set { SetIsBan(value); }
      }
      public Builder SetIsBan(bool value) {
        PrepareBuilder();
        result.hasIsBan = true;
        result.isBan_ = value;
        return this;
      }
      public Builder ClearIsBan() {
        PrepareBuilder();
        result.hasIsBan = false;
        result.isBan_ = false;
        return this;
      }
    }
    static Service_BanMac_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_BanMac_S : pb::GeneratedMessage<Service_BanMac_S, Service_BanMac_S.Builder> {
    private Service_BanMac_S() { }
    private static readonly Service_BanMac_S defaultInstance = new Service_BanMac_S().MakeReadOnly();
    private static readonly string[] _serviceBanMacSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceBanMacSFieldTags = new uint[] { 8 };
    public static Service_BanMac_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_BanMac_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_BanMac_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanMac_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_BanMac_S, Service_BanMac_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_BanMac_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceBanMacSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_BanMac_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanMac_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanMac_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_BanMac_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_BanMac_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanMac_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_BanMac_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_BanMac_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_BanMac_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_BanMac_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_BanMac_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_BanMac_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_BanMac_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_BanMac_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_BanMac_S result;
      
      private Service_BanMac_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_BanMac_S original = result;
          result = new Service_BanMac_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_BanMac_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_BanMac_S.Descriptor; }
      }
      
      public override Service_BanMac_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_BanMac_S.DefaultInstance; }
      }
      
      public override Service_BanMac_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_BanMac_S) {
          return MergeFrom((Service_BanMac_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_BanMac_S other) {
        if (other == global::ProtoCmd.Service.Service_BanMac_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceBanMacSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceBanMacSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_BanMac_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_ResetSafePwd_C : pb::GeneratedMessage<Service_ResetSafePwd_C, Service_ResetSafePwd_C.Builder> {
    private Service_ResetSafePwd_C() { }
    private static readonly Service_ResetSafePwd_C defaultInstance = new Service_ResetSafePwd_C().MakeReadOnly();
    private static readonly string[] _serviceResetSafePwdCFieldNames = new string[] { "dwUserID" };
    private static readonly uint[] _serviceResetSafePwdCFieldTags = new uint[] { 8 };
    public static Service_ResetSafePwd_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_ResetSafePwd_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_ResetSafePwd_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ResetSafePwd_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_ResetSafePwd_C, Service_ResetSafePwd_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ResetSafePwd_C__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceResetSafePwdCFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[0], DwUserID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_ResetSafePwd_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ResetSafePwd_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_ResetSafePwd_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_ResetSafePwd_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_ResetSafePwd_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_ResetSafePwd_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_ResetSafePwd_C result;
      
      private Service_ResetSafePwd_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_ResetSafePwd_C original = result;
          result = new Service_ResetSafePwd_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_ResetSafePwd_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_ResetSafePwd_C.Descriptor; }
      }
      
      public override Service_ResetSafePwd_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_ResetSafePwd_C.DefaultInstance; }
      }
      
      public override Service_ResetSafePwd_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_ResetSafePwd_C) {
          return MergeFrom((Service_ResetSafePwd_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_ResetSafePwd_C other) {
        if (other == global::ProtoCmd.Service.Service_ResetSafePwd_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceResetSafePwdCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceResetSafePwdCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
    }
    static Service_ResetSafePwd_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_ResetSafePwd_S : pb::GeneratedMessage<Service_ResetSafePwd_S, Service_ResetSafePwd_S.Builder> {
    private Service_ResetSafePwd_S() { }
    private static readonly Service_ResetSafePwd_S defaultInstance = new Service_ResetSafePwd_S().MakeReadOnly();
    private static readonly string[] _serviceResetSafePwdSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceResetSafePwdSFieldTags = new uint[] { 8 };
    public static Service_ResetSafePwd_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_ResetSafePwd_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_ResetSafePwd_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ResetSafePwd_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_ResetSafePwd_S, Service_ResetSafePwd_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ResetSafePwd_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceResetSafePwdSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_ResetSafePwd_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ResetSafePwd_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_ResetSafePwd_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_ResetSafePwd_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_ResetSafePwd_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_ResetSafePwd_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_ResetSafePwd_S result;
      
      private Service_ResetSafePwd_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_ResetSafePwd_S original = result;
          result = new Service_ResetSafePwd_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_ResetSafePwd_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_ResetSafePwd_S.Descriptor; }
      }
      
      public override Service_ResetSafePwd_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_ResetSafePwd_S.DefaultInstance; }
      }
      
      public override Service_ResetSafePwd_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_ResetSafePwd_S) {
          return MergeFrom((Service_ResetSafePwd_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_ResetSafePwd_S other) {
        if (other == global::ProtoCmd.Service.Service_ResetSafePwd_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceResetSafePwdSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceResetSafePwdSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_ResetSafePwd_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Scale_Select_S : pb::GeneratedMessage<Scale_Select_S, Scale_Select_S.Builder> {
    private Scale_Select_S() { }
    private static readonly Scale_Select_S defaultInstance = new Scale_Select_S().MakeReadOnly();
    private static readonly string[] _scaleSelectSFieldNames = new string[] { "ChipNum" };
    private static readonly uint[] _scaleSelectSFieldTags = new uint[] { 8 };
    public static Scale_Select_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Scale_Select_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Scale_Select_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Scale_Select_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Scale_Select_S, Scale_Select_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Scale_Select_S__FieldAccessorTable; }
    }
    
    public const int ChipNumFieldNumber = 1;
    private bool hasChipNum;
    private ulong chipNum_;
    public bool HasChipNum {
      get { return hasChipNum; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ChipNum {
      get { return chipNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChipNum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _scaleSelectSFieldNames;
      if (hasChipNum) {
        output.WriteUInt64(1, field_names[0], ChipNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChipNum) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ChipNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Scale_Select_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Scale_Select_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Scale_Select_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Scale_Select_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Scale_Select_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Scale_Select_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Scale_Select_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Scale_Select_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Scale_Select_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Scale_Select_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Scale_Select_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Scale_Select_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Scale_Select_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Scale_Select_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Scale_Select_S result;
      
      private Scale_Select_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Scale_Select_S original = result;
          result = new Scale_Select_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Scale_Select_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Scale_Select_S.Descriptor; }
      }
      
      public override Scale_Select_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Scale_Select_S.DefaultInstance; }
      }
      
      public override Scale_Select_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Scale_Select_S) {
          return MergeFrom((Scale_Select_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Scale_Select_S other) {
        if (other == global::ProtoCmd.Service.Scale_Select_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChipNum) {
          ChipNum = other.ChipNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_scaleSelectSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _scaleSelectSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChipNum = input.ReadUInt64(ref result.chipNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChipNum {
        get { return result.hasChipNum; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ChipNum {
        get { return result.ChipNum; }
        set { SetChipNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChipNum(ulong value) {
        PrepareBuilder();
        result.hasChipNum = true;
        result.chipNum_ = value;
        return this;
      }
      public Builder ClearChipNum() {
        PrepareBuilder();
        result.hasChipNum = false;
        result.chipNum_ = 0UL;
        return this;
      }
    }
    static Scale_Select_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Scale_Operator_C : pb::GeneratedMessage<Scale_Operator_C, Scale_Operator_C.Builder> {
    private Scale_Operator_C() { }
    private static readonly Scale_Operator_C defaultInstance = new Scale_Operator_C().MakeReadOnly();
    private static readonly string[] _scaleOperatorCFieldNames = new string[] { "opType", "opValue", "strContent" };
    private static readonly uint[] _scaleOperatorCFieldTags = new uint[] { 8, 16, 26 };
    public static Scale_Operator_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Scale_Operator_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Scale_Operator_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Scale_Operator_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Scale_Operator_C, Scale_Operator_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Scale_Operator_C__FieldAccessorTable; }
    }
    
    public const int OpTypeFieldNumber = 1;
    private bool hasOpType;
    private uint opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpType {
      get { return opType_; }
    }
    
    public const int OpValueFieldNumber = 2;
    private bool hasOpValue;
    private ulong opValue_;
    public bool HasOpValue {
      get { return hasOpValue; }
    }
    [global::System.CLSCompliant(false)]
    public ulong OpValue {
      get { return opValue_; }
    }
    
    public const int StrContentFieldNumber = 3;
    private bool hasStrContent;
    private string strContent_ = "";
    public bool HasStrContent {
      get { return hasStrContent; }
    }
    public string StrContent {
      get { return strContent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpType) return false;
        if (!hasOpValue) return false;
        if (!hasStrContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _scaleOperatorCFieldNames;
      if (hasOpType) {
        output.WriteUInt32(1, field_names[0], OpType);
      }
      if (hasOpValue) {
        output.WriteUInt64(2, field_names[1], OpValue);
      }
      if (hasStrContent) {
        output.WriteString(3, field_names[2], StrContent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOpType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, OpType);
      }
      if (hasOpValue) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, OpValue);
      }
      if (hasStrContent) {
        size += pb::CodedOutputStream.ComputeStringSize(3, StrContent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Scale_Operator_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Scale_Operator_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Scale_Operator_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Scale_Operator_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Scale_Operator_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Scale_Operator_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Scale_Operator_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Scale_Operator_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Scale_Operator_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Scale_Operator_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Scale_Operator_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Scale_Operator_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Scale_Operator_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Scale_Operator_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Scale_Operator_C result;
      
      private Scale_Operator_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Scale_Operator_C original = result;
          result = new Scale_Operator_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Scale_Operator_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Scale_Operator_C.Descriptor; }
      }
      
      public override Scale_Operator_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Scale_Operator_C.DefaultInstance; }
      }
      
      public override Scale_Operator_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Scale_Operator_C) {
          return MergeFrom((Scale_Operator_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Scale_Operator_C other) {
        if (other == global::ProtoCmd.Service.Scale_Operator_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.HasOpValue) {
          OpValue = other.OpValue;
        }
        if (other.HasStrContent) {
          StrContent = other.StrContent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_scaleOperatorCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _scaleOperatorCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOpType = input.ReadUInt32(ref result.opType_);
              break;
            }
            case 16: {
              result.hasOpValue = input.ReadUInt64(ref result.opValue_);
              break;
            }
            case 26: {
              result.hasStrContent = input.ReadString(ref result.strContent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpType(uint value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public bool HasOpValue {
        get { return result.hasOpValue; }
      }
      [global::System.CLSCompliant(false)]
      public ulong OpValue {
        get { return result.OpValue; }
        set { SetOpValue(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpValue(ulong value) {
        PrepareBuilder();
        result.hasOpValue = true;
        result.opValue_ = value;
        return this;
      }
      public Builder ClearOpValue() {
        PrepareBuilder();
        result.hasOpValue = false;
        result.opValue_ = 0UL;
        return this;
      }
      
      public bool HasStrContent {
        get { return result.hasStrContent; }
      }
      public string StrContent {
        get { return result.StrContent; }
        set { SetStrContent(value); }
      }
      public Builder SetStrContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrContent = true;
        result.strContent_ = value;
        return this;
      }
      public Builder ClearStrContent() {
        PrepareBuilder();
        result.hasStrContent = false;
        result.strContent_ = "";
        return this;
      }
    }
    static Scale_Operator_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Scale_Operator_S : pb::GeneratedMessage<Scale_Operator_S, Scale_Operator_S.Builder> {
    private Scale_Operator_S() { }
    private static readonly Scale_Operator_S defaultInstance = new Scale_Operator_S().MakeReadOnly();
    private static readonly string[] _scaleOperatorSFieldNames = new string[] { "opType", "suc" };
    private static readonly uint[] _scaleOperatorSFieldTags = new uint[] { 8, 16 };
    public static Scale_Operator_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Scale_Operator_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Scale_Operator_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Scale_Operator_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Scale_Operator_S, Scale_Operator_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Scale_Operator_S__FieldAccessorTable; }
    }
    
    public const int OpTypeFieldNumber = 1;
    private bool hasOpType;
    private uint opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpType {
      get { return opType_; }
    }
    
    public const int SucFieldNumber = 2;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpType) return false;
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _scaleOperatorSFieldNames;
      if (hasOpType) {
        output.WriteUInt32(1, field_names[0], OpType);
      }
      if (hasSuc) {
        output.WriteBool(2, field_names[1], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOpType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, OpType);
      }
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Scale_Operator_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Scale_Operator_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Scale_Operator_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Scale_Operator_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Scale_Operator_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Scale_Operator_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Scale_Operator_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Scale_Operator_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Scale_Operator_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Scale_Operator_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Scale_Operator_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Scale_Operator_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Scale_Operator_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Scale_Operator_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Scale_Operator_S result;
      
      private Scale_Operator_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Scale_Operator_S original = result;
          result = new Scale_Operator_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Scale_Operator_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Scale_Operator_S.Descriptor; }
      }
      
      public override Scale_Operator_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Scale_Operator_S.DefaultInstance; }
      }
      
      public override Scale_Operator_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Scale_Operator_S) {
          return MergeFrom((Scale_Operator_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Scale_Operator_S other) {
        if (other == global::ProtoCmd.Service.Scale_Operator_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_scaleOperatorSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _scaleOperatorSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOpType = input.ReadUInt32(ref result.opType_);
              break;
            }
            case 16: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpType(uint value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Scale_Operator_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_ClubUserMode_C : pb::GeneratedMessage<Service_ClubUserMode_C, Service_ClubUserMode_C.Builder> {
    private Service_ClubUserMode_C() { }
    private static readonly Service_ClubUserMode_C defaultInstance = new Service_ClubUserMode_C().MakeReadOnly();
    private static readonly string[] _serviceClubUserModeCFieldNames = new string[] { "clubID" };
    private static readonly uint[] _serviceClubUserModeCFieldTags = new uint[] { 8 };
    public static Service_ClubUserMode_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_ClubUserMode_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_ClubUserMode_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ClubUserMode_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_ClubUserMode_C, Service_ClubUserMode_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ClubUserMode_C__FieldAccessorTable; }
    }
    
    public const int ClubIDFieldNumber = 1;
    private bool hasClubID;
    private uint clubID_;
    public bool HasClubID {
      get { return hasClubID; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClubID {
      get { return clubID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClubID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceClubUserModeCFieldNames;
      if (hasClubID) {
        output.WriteUInt32(1, field_names[0], ClubID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClubID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ClubID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_ClubUserMode_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ClubUserMode_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_ClubUserMode_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_ClubUserMode_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_ClubUserMode_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_ClubUserMode_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_ClubUserMode_C result;
      
      private Service_ClubUserMode_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_ClubUserMode_C original = result;
          result = new Service_ClubUserMode_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_ClubUserMode_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_ClubUserMode_C.Descriptor; }
      }
      
      public override Service_ClubUserMode_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_ClubUserMode_C.DefaultInstance; }
      }
      
      public override Service_ClubUserMode_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_ClubUserMode_C) {
          return MergeFrom((Service_ClubUserMode_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_ClubUserMode_C other) {
        if (other == global::ProtoCmd.Service.Service_ClubUserMode_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClubID) {
          ClubID = other.ClubID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceClubUserModeCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceClubUserModeCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClubID = input.ReadUInt32(ref result.clubID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClubID {
        get { return result.hasClubID; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClubID {
        get { return result.ClubID; }
        set { SetClubID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClubID(uint value) {
        PrepareBuilder();
        result.hasClubID = true;
        result.clubID_ = value;
        return this;
      }
      public Builder ClearClubID() {
        PrepareBuilder();
        result.hasClubID = false;
        result.clubID_ = 0;
        return this;
      }
    }
    static Service_ClubUserMode_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Service_ClubUserMode_S : pb::GeneratedMessage<Service_ClubUserMode_S, Service_ClubUserMode_S.Builder> {
    private Service_ClubUserMode_S() { }
    private static readonly Service_ClubUserMode_S defaultInstance = new Service_ClubUserMode_S().MakeReadOnly();
    private static readonly string[] _serviceClubUserModeSFieldNames = new string[] { "suc" };
    private static readonly uint[] _serviceClubUserModeSFieldTags = new uint[] { 8 };
    public static Service_ClubUserMode_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Service_ClubUserMode_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Service_ClubUserMode_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ClubUserMode_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Service_ClubUserMode_S, Service_ClubUserMode_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Service_ClubUserMode_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _serviceClubUserModeSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Service_ClubUserMode_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Service_ClubUserMode_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Service_ClubUserMode_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Service_ClubUserMode_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Service_ClubUserMode_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Service_ClubUserMode_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Service_ClubUserMode_S result;
      
      private Service_ClubUserMode_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Service_ClubUserMode_S original = result;
          result = new Service_ClubUserMode_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Service_ClubUserMode_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Service_ClubUserMode_S.Descriptor; }
      }
      
      public override Service_ClubUserMode_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Service_ClubUserMode_S.DefaultInstance; }
      }
      
      public override Service_ClubUserMode_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Service_ClubUserMode_S) {
          return MergeFrom((Service_ClubUserMode_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Service_ClubUserMode_S other) {
        if (other == global::ProtoCmd.Service.Service_ClubUserMode_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serviceClubUserModeSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serviceClubUserModeSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Service_ClubUserMode_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Beland_Club_C : pb::GeneratedMessage<Beland_Club_C, Beland_Club_C.Builder> {
    private Beland_Club_C() { }
    private static readonly Beland_Club_C defaultInstance = new Beland_Club_C().MakeReadOnly();
    private static readonly string[] _belandClubCFieldNames = new string[] { "clubID", "dwUserID" };
    private static readonly uint[] _belandClubCFieldTags = new uint[] { 8, 16 };
    public static Beland_Club_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Beland_Club_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Beland_Club_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Beland_Club_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Beland_Club_C, Beland_Club_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Beland_Club_C__FieldAccessorTable; }
    }
    
    public const int ClubIDFieldNumber = 1;
    private bool hasClubID;
    private uint clubID_;
    public bool HasClubID {
      get { return hasClubID; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClubID {
      get { return clubID_; }
    }
    
    public const int DwUserIDFieldNumber = 2;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClubID) return false;
        if (!hasDwUserID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _belandClubCFieldNames;
      if (hasClubID) {
        output.WriteUInt32(1, field_names[0], ClubID);
      }
      if (hasDwUserID) {
        output.WriteUInt32(2, field_names[1], DwUserID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClubID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ClubID);
      }
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, DwUserID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Beland_Club_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Beland_Club_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Beland_Club_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Beland_Club_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Beland_Club_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Beland_Club_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Beland_Club_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Beland_Club_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Beland_Club_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Beland_Club_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Beland_Club_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Beland_Club_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Beland_Club_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Beland_Club_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Beland_Club_C result;
      
      private Beland_Club_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Beland_Club_C original = result;
          result = new Beland_Club_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Beland_Club_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Beland_Club_C.Descriptor; }
      }
      
      public override Beland_Club_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Beland_Club_C.DefaultInstance; }
      }
      
      public override Beland_Club_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Beland_Club_C) {
          return MergeFrom((Beland_Club_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Beland_Club_C other) {
        if (other == global::ProtoCmd.Service.Beland_Club_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClubID) {
          ClubID = other.ClubID;
        }
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_belandClubCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _belandClubCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasClubID = input.ReadUInt32(ref result.clubID_);
              break;
            }
            case 16: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClubID {
        get { return result.hasClubID; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClubID {
        get { return result.ClubID; }
        set { SetClubID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClubID(uint value) {
        PrepareBuilder();
        result.hasClubID = true;
        result.clubID_ = value;
        return this;
      }
      public Builder ClearClubID() {
        PrepareBuilder();
        result.hasClubID = false;
        result.clubID_ = 0;
        return this;
      }
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
    }
    static Beland_Club_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Beland_Club_S : pb::GeneratedMessage<Beland_Club_S, Beland_Club_S.Builder> {
    private Beland_Club_S() { }
    private static readonly Beland_Club_S defaultInstance = new Beland_Club_S().MakeReadOnly();
    private static readonly string[] _belandClubSFieldNames = new string[] { "suc" };
    private static readonly uint[] _belandClubSFieldTags = new uint[] { 8 };
    public static Beland_Club_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Beland_Club_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Beland_Club_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Beland_Club_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Beland_Club_S, Beland_Club_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Beland_Club_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _belandClubSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Beland_Club_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Beland_Club_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Beland_Club_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Beland_Club_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Beland_Club_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Beland_Club_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Beland_Club_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Beland_Club_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Beland_Club_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Beland_Club_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Beland_Club_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Beland_Club_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Beland_Club_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Beland_Club_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Beland_Club_S result;
      
      private Beland_Club_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Beland_Club_S original = result;
          result = new Beland_Club_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Beland_Club_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Beland_Club_S.Descriptor; }
      }
      
      public override Beland_Club_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Beland_Club_S.DefaultInstance; }
      }
      
      public override Beland_Club_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Beland_Club_S) {
          return MergeFrom((Beland_Club_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Beland_Club_S other) {
        if (other == global::ProtoCmd.Service.Beland_Club_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_belandClubSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _belandClubSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static Beland_Club_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IPSTATUS_SELECT_S : pb::GeneratedMessage<IPSTATUS_SELECT_S, IPSTATUS_SELECT_S.Builder> {
    private IPSTATUS_SELECT_S() { }
    private static readonly IPSTATUS_SELECT_S defaultInstance = new IPSTATUS_SELECT_S().MakeReadOnly();
    private static readonly string[] _iPSTATUSSELECTSFieldNames = new string[] { "state" };
    private static readonly uint[] _iPSTATUSSELECTSFieldTags = new uint[] { 8 };
    public static IPSTATUS_SELECT_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IPSTATUS_SELECT_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IPSTATUS_SELECT_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPSTATUS_SELECT_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IPSTATUS_SELECT_S, IPSTATUS_SELECT_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPSTATUS_SELECT_S__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _iPSTATUSSELECTSFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IPSTATUS_SELECT_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPSTATUS_SELECT_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IPSTATUS_SELECT_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IPSTATUS_SELECT_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IPSTATUS_SELECT_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IPSTATUS_SELECT_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IPSTATUS_SELECT_S result;
      
      private IPSTATUS_SELECT_S PrepareBuilder() {
        if (resultIsReadOnly) {
          IPSTATUS_SELECT_S original = result;
          result = new IPSTATUS_SELECT_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IPSTATUS_SELECT_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.IPSTATUS_SELECT_S.Descriptor; }
      }
      
      public override IPSTATUS_SELECT_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.IPSTATUS_SELECT_S.DefaultInstance; }
      }
      
      public override IPSTATUS_SELECT_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IPSTATUS_SELECT_S) {
          return MergeFrom((IPSTATUS_SELECT_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IPSTATUS_SELECT_S other) {
        if (other == global::ProtoCmd.Service.IPSTATUS_SELECT_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iPSTATUSSELECTSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iPSTATUSSELECTSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static IPSTATUS_SELECT_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IPSTATUS_OPERATOR_C : pb::GeneratedMessage<IPSTATUS_OPERATOR_C, IPSTATUS_OPERATOR_C.Builder> {
    private IPSTATUS_OPERATOR_C() { }
    private static readonly IPSTATUS_OPERATOR_C defaultInstance = new IPSTATUS_OPERATOR_C().MakeReadOnly();
    private static readonly string[] _iPSTATUSOPERATORCFieldNames = new string[] { "state" };
    private static readonly uint[] _iPSTATUSOPERATORCFieldTags = new uint[] { 8 };
    public static IPSTATUS_OPERATOR_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IPSTATUS_OPERATOR_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IPSTATUS_OPERATOR_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IPSTATUS_OPERATOR_C, IPSTATUS_OPERATOR_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_C__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _iPSTATUSOPERATORCFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[0], State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IPSTATUS_OPERATOR_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IPSTATUS_OPERATOR_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IPSTATUS_OPERATOR_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IPSTATUS_OPERATOR_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IPSTATUS_OPERATOR_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IPSTATUS_OPERATOR_C result;
      
      private IPSTATUS_OPERATOR_C PrepareBuilder() {
        if (resultIsReadOnly) {
          IPSTATUS_OPERATOR_C original = result;
          result = new IPSTATUS_OPERATOR_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IPSTATUS_OPERATOR_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.IPSTATUS_OPERATOR_C.Descriptor; }
      }
      
      public override IPSTATUS_OPERATOR_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.IPSTATUS_OPERATOR_C.DefaultInstance; }
      }
      
      public override IPSTATUS_OPERATOR_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IPSTATUS_OPERATOR_C) {
          return MergeFrom((IPSTATUS_OPERATOR_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IPSTATUS_OPERATOR_C other) {
        if (other == global::ProtoCmd.Service.IPSTATUS_OPERATOR_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iPSTATUSOPERATORCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iPSTATUSOPERATORCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
    }
    static IPSTATUS_OPERATOR_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IPSTATUS_OPERATOR_S : pb::GeneratedMessage<IPSTATUS_OPERATOR_S, IPSTATUS_OPERATOR_S.Builder> {
    private IPSTATUS_OPERATOR_S() { }
    private static readonly IPSTATUS_OPERATOR_S defaultInstance = new IPSTATUS_OPERATOR_S().MakeReadOnly();
    private static readonly string[] _iPSTATUSOPERATORSFieldNames = new string[] { "bsucc", "state" };
    private static readonly uint[] _iPSTATUSOPERATORSFieldTags = new uint[] { 16, 8 };
    public static IPSTATUS_OPERATOR_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IPSTATUS_OPERATOR_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IPSTATUS_OPERATOR_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IPSTATUS_OPERATOR_S, IPSTATUS_OPERATOR_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPSTATUS_OPERATOR_S__FieldAccessorTable; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private bool state_;
    public bool HasState {
      get { return hasState; }
    }
    public bool State {
      get { return state_; }
    }
    
    public const int BsuccFieldNumber = 2;
    private bool hasBsucc;
    private bool bsucc_;
    public bool HasBsucc {
      get { return hasBsucc; }
    }
    public bool Bsucc {
      get { return bsucc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        if (!hasBsucc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _iPSTATUSOPERATORSFieldNames;
      if (hasState) {
        output.WriteBool(1, field_names[1], State);
      }
      if (hasBsucc) {
        output.WriteBool(2, field_names[0], Bsucc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, State);
      }
      if (hasBsucc) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Bsucc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IPSTATUS_OPERATOR_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPSTATUS_OPERATOR_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IPSTATUS_OPERATOR_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IPSTATUS_OPERATOR_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IPSTATUS_OPERATOR_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IPSTATUS_OPERATOR_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IPSTATUS_OPERATOR_S result;
      
      private IPSTATUS_OPERATOR_S PrepareBuilder() {
        if (resultIsReadOnly) {
          IPSTATUS_OPERATOR_S original = result;
          result = new IPSTATUS_OPERATOR_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IPSTATUS_OPERATOR_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.IPSTATUS_OPERATOR_S.Descriptor; }
      }
      
      public override IPSTATUS_OPERATOR_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.IPSTATUS_OPERATOR_S.DefaultInstance; }
      }
      
      public override IPSTATUS_OPERATOR_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IPSTATUS_OPERATOR_S) {
          return MergeFrom((IPSTATUS_OPERATOR_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IPSTATUS_OPERATOR_S other) {
        if (other == global::ProtoCmd.Service.IPSTATUS_OPERATOR_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasBsucc) {
          Bsucc = other.Bsucc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iPSTATUSOPERATORSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iPSTATUSOPERATORSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadBool(ref result.state_);
              break;
            }
            case 16: {
              result.hasBsucc = input.ReadBool(ref result.bsucc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public bool State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(bool value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = false;
        return this;
      }
      
      public bool HasBsucc {
        get { return result.hasBsucc; }
      }
      public bool Bsucc {
        get { return result.Bsucc; }
        set { SetBsucc(value); }
      }
      public Builder SetBsucc(bool value) {
        PrepareBuilder();
        result.hasBsucc = true;
        result.bsucc_ = value;
        return this;
      }
      public Builder ClearBsucc() {
        PrepareBuilder();
        result.hasBsucc = false;
        result.bsucc_ = false;
        return this;
      }
    }
    static IPSTATUS_OPERATOR_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IPWHITE_C : pb::GeneratedMessage<IPWHITE_C, IPWHITE_C.Builder> {
    private IPWHITE_C() { }
    private static readonly IPWHITE_C defaultInstance = new IPWHITE_C().MakeReadOnly();
    private static readonly string[] _iPWHITECFieldNames = new string[] { "add", "ip" };
    private static readonly uint[] _iPWHITECFieldTags = new uint[] { 16, 10 };
    public static IPWHITE_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IPWHITE_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IPWHITE_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPWHITE_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IPWHITE_C, IPWHITE_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPWHITE_C__FieldAccessorTable; }
    }
    
    public const int IpFieldNumber = 1;
    private bool hasIp;
    private string ip_ = "";
    public bool HasIp {
      get { return hasIp; }
    }
    public string Ip {
      get { return ip_; }
    }
    
    public const int AddFieldNumber = 2;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIp) return false;
        if (!hasAdd) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _iPWHITECFieldNames;
      if (hasIp) {
        output.WriteString(1, field_names[1], Ip);
      }
      if (hasAdd) {
        output.WriteBool(2, field_names[0], Add);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Ip);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Add);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IPWHITE_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPWHITE_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPWHITE_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPWHITE_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPWHITE_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPWHITE_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IPWHITE_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IPWHITE_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IPWHITE_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPWHITE_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IPWHITE_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IPWHITE_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IPWHITE_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IPWHITE_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IPWHITE_C result;
      
      private IPWHITE_C PrepareBuilder() {
        if (resultIsReadOnly) {
          IPWHITE_C original = result;
          result = new IPWHITE_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IPWHITE_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.IPWHITE_C.Descriptor; }
      }
      
      public override IPWHITE_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.IPWHITE_C.DefaultInstance; }
      }
      
      public override IPWHITE_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IPWHITE_C) {
          return MergeFrom((IPWHITE_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IPWHITE_C other) {
        if (other == global::ProtoCmd.Service.IPWHITE_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIp) {
          Ip = other.Ip;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iPWHITECFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iPWHITECFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIp = input.ReadString(ref result.ip_);
              break;
            }
            case 16: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIp {
        get { return result.hasIp; }
      }
      public string Ip {
        get { return result.Ip; }
        set { SetIp(value); }
      }
      public Builder SetIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIp = true;
        result.ip_ = value;
        return this;
      }
      public Builder ClearIp() {
        PrepareBuilder();
        result.hasIp = false;
        result.ip_ = "";
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
    }
    static IPWHITE_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class IPWHITE_S : pb::GeneratedMessage<IPWHITE_S, IPWHITE_S.Builder> {
    private IPWHITE_S() { }
    private static readonly IPWHITE_S defaultInstance = new IPWHITE_S().MakeReadOnly();
    private static readonly string[] _iPWHITESFieldNames = new string[] { "add", "ip", "suc" };
    private static readonly uint[] _iPWHITESFieldTags = new uint[] { 16, 10, 24 };
    public static IPWHITE_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IPWHITE_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IPWHITE_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPWHITE_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IPWHITE_S, IPWHITE_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_IPWHITE_S__FieldAccessorTable; }
    }
    
    public const int IpFieldNumber = 1;
    private bool hasIp;
    private string ip_ = "";
    public bool HasIp {
      get { return hasIp; }
    }
    public string Ip {
      get { return ip_; }
    }
    
    public const int AddFieldNumber = 2;
    private bool hasAdd;
    private bool add_;
    public bool HasAdd {
      get { return hasAdd; }
    }
    public bool Add {
      get { return add_; }
    }
    
    public const int SucFieldNumber = 3;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIp) return false;
        if (!hasAdd) return false;
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _iPWHITESFieldNames;
      if (hasIp) {
        output.WriteString(1, field_names[1], Ip);
      }
      if (hasAdd) {
        output.WriteBool(2, field_names[0], Add);
      }
      if (hasSuc) {
        output.WriteBool(3, field_names[2], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Ip);
      }
      if (hasAdd) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Add);
      }
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static IPWHITE_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPWHITE_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPWHITE_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IPWHITE_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IPWHITE_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPWHITE_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IPWHITE_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IPWHITE_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IPWHITE_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IPWHITE_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IPWHITE_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IPWHITE_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<IPWHITE_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IPWHITE_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IPWHITE_S result;
      
      private IPWHITE_S PrepareBuilder() {
        if (resultIsReadOnly) {
          IPWHITE_S original = result;
          result = new IPWHITE_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IPWHITE_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.IPWHITE_S.Descriptor; }
      }
      
      public override IPWHITE_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.IPWHITE_S.DefaultInstance; }
      }
      
      public override IPWHITE_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IPWHITE_S) {
          return MergeFrom((IPWHITE_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IPWHITE_S other) {
        if (other == global::ProtoCmd.Service.IPWHITE_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIp) {
          Ip = other.Ip;
        }
        if (other.HasAdd) {
          Add = other.Add;
        }
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_iPWHITESFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _iPWHITESFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasIp = input.ReadString(ref result.ip_);
              break;
            }
            case 16: {
              result.hasAdd = input.ReadBool(ref result.add_);
              break;
            }
            case 24: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIp {
        get { return result.hasIp; }
      }
      public string Ip {
        get { return result.Ip; }
        set { SetIp(value); }
      }
      public Builder SetIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIp = true;
        result.ip_ = value;
        return this;
      }
      public Builder ClearIp() {
        PrepareBuilder();
        result.hasIp = false;
        result.ip_ = "";
        return this;
      }
      
      public bool HasAdd {
        get { return result.hasAdd; }
      }
      public bool Add {
        get { return result.Add; }
        set { SetAdd(value); }
      }
      public Builder SetAdd(bool value) {
        PrepareBuilder();
        result.hasAdd = true;
        result.add_ = value;
        return this;
      }
      public Builder ClearAdd() {
        PrepareBuilder();
        result.hasAdd = false;
        result.add_ = false;
        return this;
      }
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static IPWHITE_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CANCEL_CLUB_C : pb::GeneratedMessage<CANCEL_CLUB_C, CANCEL_CLUB_C.Builder> {
    private CANCEL_CLUB_C() { }
    private static readonly CANCEL_CLUB_C defaultInstance = new CANCEL_CLUB_C().MakeReadOnly();
    private static readonly string[] _cANCELCLUBCFieldNames = new string[] { "dwUserID" };
    private static readonly uint[] _cANCELCLUBCFieldTags = new uint[] { 8 };
    public static CANCEL_CLUB_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CANCEL_CLUB_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CANCEL_CLUB_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_CANCEL_CLUB_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CANCEL_CLUB_C, CANCEL_CLUB_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_CANCEL_CLUB_C__FieldAccessorTable; }
    }
    
    public const int DwUserIDFieldNumber = 1;
    private bool hasDwUserID;
    private uint dwUserID_;
    public bool HasDwUserID {
      get { return hasDwUserID; }
    }
    [global::System.CLSCompliant(false)]
    public uint DwUserID {
      get { return dwUserID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDwUserID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cANCELCLUBCFieldNames;
      if (hasDwUserID) {
        output.WriteUInt32(1, field_names[0], DwUserID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasDwUserID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, DwUserID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CANCEL_CLUB_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CANCEL_CLUB_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CANCEL_CLUB_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CANCEL_CLUB_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CANCEL_CLUB_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CANCEL_CLUB_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CANCEL_CLUB_C result;
      
      private CANCEL_CLUB_C PrepareBuilder() {
        if (resultIsReadOnly) {
          CANCEL_CLUB_C original = result;
          result = new CANCEL_CLUB_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CANCEL_CLUB_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.CANCEL_CLUB_C.Descriptor; }
      }
      
      public override CANCEL_CLUB_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.CANCEL_CLUB_C.DefaultInstance; }
      }
      
      public override CANCEL_CLUB_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CANCEL_CLUB_C) {
          return MergeFrom((CANCEL_CLUB_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CANCEL_CLUB_C other) {
        if (other == global::ProtoCmd.Service.CANCEL_CLUB_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDwUserID) {
          DwUserID = other.DwUserID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cANCELCLUBCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cANCELCLUBCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDwUserID = input.ReadUInt32(ref result.dwUserID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDwUserID {
        get { return result.hasDwUserID; }
      }
      [global::System.CLSCompliant(false)]
      public uint DwUserID {
        get { return result.DwUserID; }
        set { SetDwUserID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDwUserID(uint value) {
        PrepareBuilder();
        result.hasDwUserID = true;
        result.dwUserID_ = value;
        return this;
      }
      public Builder ClearDwUserID() {
        PrepareBuilder();
        result.hasDwUserID = false;
        result.dwUserID_ = 0;
        return this;
      }
    }
    static CANCEL_CLUB_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CANCEL_CLUB_S : pb::GeneratedMessage<CANCEL_CLUB_S, CANCEL_CLUB_S.Builder> {
    private CANCEL_CLUB_S() { }
    private static readonly CANCEL_CLUB_S defaultInstance = new CANCEL_CLUB_S().MakeReadOnly();
    private static readonly string[] _cANCELCLUBSFieldNames = new string[] { "suc" };
    private static readonly uint[] _cANCELCLUBSFieldTags = new uint[] { 8 };
    public static CANCEL_CLUB_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CANCEL_CLUB_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CANCEL_CLUB_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_CANCEL_CLUB_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CANCEL_CLUB_S, CANCEL_CLUB_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_CANCEL_CLUB_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cANCELCLUBSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CANCEL_CLUB_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CANCEL_CLUB_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CANCEL_CLUB_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CANCEL_CLUB_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CANCEL_CLUB_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CANCEL_CLUB_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CANCEL_CLUB_S result;
      
      private CANCEL_CLUB_S PrepareBuilder() {
        if (resultIsReadOnly) {
          CANCEL_CLUB_S original = result;
          result = new CANCEL_CLUB_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CANCEL_CLUB_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.CANCEL_CLUB_S.Descriptor; }
      }
      
      public override CANCEL_CLUB_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.CANCEL_CLUB_S.DefaultInstance; }
      }
      
      public override CANCEL_CLUB_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CANCEL_CLUB_S) {
          return MergeFrom((CANCEL_CLUB_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CANCEL_CLUB_S other) {
        if (other == global::ProtoCmd.Service.CANCEL_CLUB_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cANCELCLUBSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cANCELCLUBSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static CANCEL_CLUB_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ROBOT_POT_C : pb::GeneratedMessage<ROBOT_POT_C, ROBOT_POT_C.Builder> {
    private ROBOT_POT_C() { }
    private static readonly ROBOT_POT_C defaultInstance = new ROBOT_POT_C().MakeReadOnly();
    private static readonly string[] _rOBOTPOTCFieldNames = new string[] { "gameID", "pot", "stand" };
    private static readonly uint[] _rOBOTPOTCFieldTags = new uint[] { 24, 9, 17 };
    public static ROBOT_POT_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ROBOT_POT_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ROBOT_POT_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ROBOT_POT_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ROBOT_POT_C, ROBOT_POT_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ROBOT_POT_C__FieldAccessorTable; }
    }
    
    public const int PotFieldNumber = 1;
    private bool hasPot;
    private double pot_;
    public bool HasPot {
      get { return hasPot; }
    }
    public double Pot {
      get { return pot_; }
    }
    
    public const int StandFieldNumber = 2;
    private bool hasStand;
    private double stand_;
    public bool HasStand {
      get { return hasStand; }
    }
    public double Stand {
      get { return stand_; }
    }
    
    public const int GameIDFieldNumber = 3;
    private bool hasGameID;
    private uint gameID_;
    public bool HasGameID {
      get { return hasGameID; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameID {
      get { return gameID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPot) return false;
        if (!hasStand) return false;
        if (!hasGameID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rOBOTPOTCFieldNames;
      if (hasPot) {
        output.WriteDouble(1, field_names[1], Pot);
      }
      if (hasStand) {
        output.WriteDouble(2, field_names[2], Stand);
      }
      if (hasGameID) {
        output.WriteUInt32(3, field_names[0], GameID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPot) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, Pot);
      }
      if (hasStand) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Stand);
      }
      if (hasGameID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, GameID);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ROBOT_POT_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ROBOT_POT_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ROBOT_POT_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ROBOT_POT_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ROBOT_POT_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ROBOT_POT_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ROBOT_POT_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ROBOT_POT_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ROBOT_POT_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ROBOT_POT_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ROBOT_POT_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ROBOT_POT_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ROBOT_POT_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ROBOT_POT_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ROBOT_POT_C result;
      
      private ROBOT_POT_C PrepareBuilder() {
        if (resultIsReadOnly) {
          ROBOT_POT_C original = result;
          result = new ROBOT_POT_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ROBOT_POT_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.ROBOT_POT_C.Descriptor; }
      }
      
      public override ROBOT_POT_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.ROBOT_POT_C.DefaultInstance; }
      }
      
      public override ROBOT_POT_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ROBOT_POT_C) {
          return MergeFrom((ROBOT_POT_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ROBOT_POT_C other) {
        if (other == global::ProtoCmd.Service.ROBOT_POT_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPot) {
          Pot = other.Pot;
        }
        if (other.HasStand) {
          Stand = other.Stand;
        }
        if (other.HasGameID) {
          GameID = other.GameID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rOBOTPOTCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rOBOTPOTCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasPot = input.ReadDouble(ref result.pot_);
              break;
            }
            case 17: {
              result.hasStand = input.ReadDouble(ref result.stand_);
              break;
            }
            case 24: {
              result.hasGameID = input.ReadUInt32(ref result.gameID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPot {
        get { return result.hasPot; }
      }
      public double Pot {
        get { return result.Pot; }
        set { SetPot(value); }
      }
      public Builder SetPot(double value) {
        PrepareBuilder();
        result.hasPot = true;
        result.pot_ = value;
        return this;
      }
      public Builder ClearPot() {
        PrepareBuilder();
        result.hasPot = false;
        result.pot_ = 0D;
        return this;
      }
      
      public bool HasStand {
        get { return result.hasStand; }
      }
      public double Stand {
        get { return result.Stand; }
        set { SetStand(value); }
      }
      public Builder SetStand(double value) {
        PrepareBuilder();
        result.hasStand = true;
        result.stand_ = value;
        return this;
      }
      public Builder ClearStand() {
        PrepareBuilder();
        result.hasStand = false;
        result.stand_ = 0D;
        return this;
      }
      
      public bool HasGameID {
        get { return result.hasGameID; }
      }
      [global::System.CLSCompliant(false)]
      public uint GameID {
        get { return result.GameID; }
        set { SetGameID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGameID(uint value) {
        PrepareBuilder();
        result.hasGameID = true;
        result.gameID_ = value;
        return this;
      }
      public Builder ClearGameID() {
        PrepareBuilder();
        result.hasGameID = false;
        result.gameID_ = 0;
        return this;
      }
    }
    static ROBOT_POT_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ROBOT_POT_S : pb::GeneratedMessage<ROBOT_POT_S, ROBOT_POT_S.Builder> {
    private ROBOT_POT_S() { }
    private static readonly ROBOT_POT_S defaultInstance = new ROBOT_POT_S().MakeReadOnly();
    private static readonly string[] _rOBOTPOTSFieldNames = new string[] { "suc" };
    private static readonly uint[] _rOBOTPOTSFieldTags = new uint[] { 8 };
    public static ROBOT_POT_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ROBOT_POT_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ROBOT_POT_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ROBOT_POT_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ROBOT_POT_S, ROBOT_POT_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ROBOT_POT_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rOBOTPOTSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ROBOT_POT_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ROBOT_POT_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ROBOT_POT_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ROBOT_POT_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ROBOT_POT_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ROBOT_POT_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ROBOT_POT_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ROBOT_POT_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ROBOT_POT_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ROBOT_POT_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ROBOT_POT_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ROBOT_POT_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ROBOT_POT_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ROBOT_POT_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ROBOT_POT_S result;
      
      private ROBOT_POT_S PrepareBuilder() {
        if (resultIsReadOnly) {
          ROBOT_POT_S original = result;
          result = new ROBOT_POT_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ROBOT_POT_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.ROBOT_POT_S.Descriptor; }
      }
      
      public override ROBOT_POT_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.ROBOT_POT_S.DefaultInstance; }
      }
      
      public override ROBOT_POT_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ROBOT_POT_S) {
          return MergeFrom((ROBOT_POT_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ROBOT_POT_S other) {
        if (other == global::ProtoCmd.Service.ROBOT_POT_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rOBOTPOTSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rOBOTPOTSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static ROBOT_POT_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetTexProPOTOpenReq : pb::GeneratedMessage<BGSetTexProPOTOpenReq, BGSetTexProPOTOpenReq.Builder> {
    private BGSetTexProPOTOpenReq() { }
    private static readonly BGSetTexProPOTOpenReq defaultInstance = new BGSetTexProPOTOpenReq().MakeReadOnly();
    private static readonly string[] _bGSetTexProPOTOpenReqFieldNames = new string[] { "isOpen" };
    private static readonly uint[] _bGSetTexProPOTOpenReqFieldTags = new uint[] { 8 };
    public static BGSetTexProPOTOpenReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetTexProPOTOpenReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetTexProPOTOpenReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetTexProPOTOpenReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetTexProPOTOpenReq, BGSetTexProPOTOpenReq.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetTexProPOTOpenReq__FieldAccessorTable; }
    }
    
    public const int IsOpenFieldNumber = 1;
    private bool hasIsOpen;
    private int isOpen_;
    public bool HasIsOpen {
      get { return hasIsOpen; }
    }
    public int IsOpen {
      get { return isOpen_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetTexProPOTOpenReqFieldNames;
      if (hasIsOpen) {
        output.WriteInt32(1, field_names[0], IsOpen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsOpen) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, IsOpen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetTexProPOTOpenReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetTexProPOTOpenReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetTexProPOTOpenReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetTexProPOTOpenReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetTexProPOTOpenReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetTexProPOTOpenReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetTexProPOTOpenReq result;
      
      private BGSetTexProPOTOpenReq PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetTexProPOTOpenReq original = result;
          result = new BGSetTexProPOTOpenReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetTexProPOTOpenReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetTexProPOTOpenReq.Descriptor; }
      }
      
      public override BGSetTexProPOTOpenReq DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetTexProPOTOpenReq.DefaultInstance; }
      }
      
      public override BGSetTexProPOTOpenReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetTexProPOTOpenReq) {
          return MergeFrom((BGSetTexProPOTOpenReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetTexProPOTOpenReq other) {
        if (other == global::ProtoCmd.Service.BGSetTexProPOTOpenReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsOpen) {
          IsOpen = other.IsOpen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetTexProPOTOpenReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetTexProPOTOpenReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsOpen = input.ReadInt32(ref result.isOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsOpen {
        get { return result.hasIsOpen; }
      }
      public int IsOpen {
        get { return result.IsOpen; }
        set { SetIsOpen(value); }
      }
      public Builder SetIsOpen(int value) {
        PrepareBuilder();
        result.hasIsOpen = true;
        result.isOpen_ = value;
        return this;
      }
      public Builder ClearIsOpen() {
        PrepareBuilder();
        result.hasIsOpen = false;
        result.isOpen_ = 0;
        return this;
      }
    }
    static BGSetTexProPOTOpenReq() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetTexProPOTOpenRes : pb::GeneratedMessage<BGSetTexProPOTOpenRes, BGSetTexProPOTOpenRes.Builder> {
    private BGSetTexProPOTOpenRes() { }
    private static readonly BGSetTexProPOTOpenRes defaultInstance = new BGSetTexProPOTOpenRes().MakeReadOnly();
    private static readonly string[] _bGSetTexProPOTOpenResFieldNames = new string[] { "currStatus", "suc" };
    private static readonly uint[] _bGSetTexProPOTOpenResFieldTags = new uint[] { 16, 8 };
    public static BGSetTexProPOTOpenRes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetTexProPOTOpenRes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetTexProPOTOpenRes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetTexProPOTOpenRes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetTexProPOTOpenRes, BGSetTexProPOTOpenRes.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetTexProPOTOpenRes__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private int suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public int Suc {
      get { return suc_; }
    }
    
    public const int CurrStatusFieldNumber = 2;
    private bool hasCurrStatus;
    private int currStatus_;
    public bool HasCurrStatus {
      get { return hasCurrStatus; }
    }
    public int CurrStatus {
      get { return currStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetTexProPOTOpenResFieldNames;
      if (hasSuc) {
        output.WriteInt32(1, field_names[1], Suc);
      }
      if (hasCurrStatus) {
        output.WriteInt32(2, field_names[0], CurrStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Suc);
      }
      if (hasCurrStatus) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CurrStatus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetTexProPOTOpenRes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetTexProPOTOpenRes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetTexProPOTOpenRes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetTexProPOTOpenRes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetTexProPOTOpenRes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetTexProPOTOpenRes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetTexProPOTOpenRes result;
      
      private BGSetTexProPOTOpenRes PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetTexProPOTOpenRes original = result;
          result = new BGSetTexProPOTOpenRes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetTexProPOTOpenRes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetTexProPOTOpenRes.Descriptor; }
      }
      
      public override BGSetTexProPOTOpenRes DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetTexProPOTOpenRes.DefaultInstance; }
      }
      
      public override BGSetTexProPOTOpenRes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetTexProPOTOpenRes) {
          return MergeFrom((BGSetTexProPOTOpenRes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetTexProPOTOpenRes other) {
        if (other == global::ProtoCmd.Service.BGSetTexProPOTOpenRes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        if (other.HasCurrStatus) {
          CurrStatus = other.CurrStatus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetTexProPOTOpenResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetTexProPOTOpenResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadInt32(ref result.suc_);
              break;
            }
            case 16: {
              result.hasCurrStatus = input.ReadInt32(ref result.currStatus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public int Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(int value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = 0;
        return this;
      }
      
      public bool HasCurrStatus {
        get { return result.hasCurrStatus; }
      }
      public int CurrStatus {
        get { return result.CurrStatus; }
        set { SetCurrStatus(value); }
      }
      public Builder SetCurrStatus(int value) {
        PrepareBuilder();
        result.hasCurrStatus = true;
        result.currStatus_ = value;
        return this;
      }
      public Builder ClearCurrStatus() {
        PrepareBuilder();
        result.hasCurrStatus = false;
        result.currStatus_ = 0;
        return this;
      }
    }
    static BGSetTexProPOTOpenRes() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexPro_Select_S : pb::GeneratedMessage<TexPro_Select_S, TexPro_Select_S.Builder> {
    private TexPro_Select_S() { }
    private static readonly TexPro_Select_S defaultInstance = new TexPro_Select_S().MakeReadOnly();
    private static readonly string[] _texProSelectSFieldNames = new string[] { "ChipNum" };
    private static readonly uint[] _texProSelectSFieldTags = new uint[] { 8 };
    public static TexPro_Select_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexPro_Select_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexPro_Select_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexPro_Select_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexPro_Select_S, TexPro_Select_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexPro_Select_S__FieldAccessorTable; }
    }
    
    public const int ChipNumFieldNumber = 1;
    private bool hasChipNum;
    private ulong chipNum_;
    public bool HasChipNum {
      get { return hasChipNum; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ChipNum {
      get { return chipNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasChipNum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texProSelectSFieldNames;
      if (hasChipNum) {
        output.WriteUInt64(1, field_names[0], ChipNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasChipNum) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ChipNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexPro_Select_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexPro_Select_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Select_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexPro_Select_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Select_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexPro_Select_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Select_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexPro_Select_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexPro_Select_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexPro_Select_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexPro_Select_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexPro_Select_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexPro_Select_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexPro_Select_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexPro_Select_S result;
      
      private TexPro_Select_S PrepareBuilder() {
        if (resultIsReadOnly) {
          TexPro_Select_S original = result;
          result = new TexPro_Select_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexPro_Select_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.TexPro_Select_S.Descriptor; }
      }
      
      public override TexPro_Select_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.TexPro_Select_S.DefaultInstance; }
      }
      
      public override TexPro_Select_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexPro_Select_S) {
          return MergeFrom((TexPro_Select_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexPro_Select_S other) {
        if (other == global::ProtoCmd.Service.TexPro_Select_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasChipNum) {
          ChipNum = other.ChipNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texProSelectSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texProSelectSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasChipNum = input.ReadUInt64(ref result.chipNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasChipNum {
        get { return result.hasChipNum; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ChipNum {
        get { return result.ChipNum; }
        set { SetChipNum(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetChipNum(ulong value) {
        PrepareBuilder();
        result.hasChipNum = true;
        result.chipNum_ = value;
        return this;
      }
      public Builder ClearChipNum() {
        PrepareBuilder();
        result.hasChipNum = false;
        result.chipNum_ = 0UL;
        return this;
      }
    }
    static TexPro_Select_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexPro_Operator_C : pb::GeneratedMessage<TexPro_Operator_C, TexPro_Operator_C.Builder> {
    private TexPro_Operator_C() { }
    private static readonly TexPro_Operator_C defaultInstance = new TexPro_Operator_C().MakeReadOnly();
    private static readonly string[] _texProOperatorCFieldNames = new string[] { "opType", "opValue", "strContent" };
    private static readonly uint[] _texProOperatorCFieldTags = new uint[] { 8, 16, 26 };
    public static TexPro_Operator_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexPro_Operator_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexPro_Operator_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexPro_Operator_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexPro_Operator_C, TexPro_Operator_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexPro_Operator_C__FieldAccessorTable; }
    }
    
    public const int OpTypeFieldNumber = 1;
    private bool hasOpType;
    private uint opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpType {
      get { return opType_; }
    }
    
    public const int OpValueFieldNumber = 2;
    private bool hasOpValue;
    private ulong opValue_;
    public bool HasOpValue {
      get { return hasOpValue; }
    }
    [global::System.CLSCompliant(false)]
    public ulong OpValue {
      get { return opValue_; }
    }
    
    public const int StrContentFieldNumber = 3;
    private bool hasStrContent;
    private string strContent_ = "";
    public bool HasStrContent {
      get { return hasStrContent; }
    }
    public string StrContent {
      get { return strContent_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpType) return false;
        if (!hasOpValue) return false;
        if (!hasStrContent) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texProOperatorCFieldNames;
      if (hasOpType) {
        output.WriteUInt32(1, field_names[0], OpType);
      }
      if (hasOpValue) {
        output.WriteUInt64(2, field_names[1], OpValue);
      }
      if (hasStrContent) {
        output.WriteString(3, field_names[2], StrContent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOpType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, OpType);
      }
      if (hasOpValue) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, OpValue);
      }
      if (hasStrContent) {
        size += pb::CodedOutputStream.ComputeStringSize(3, StrContent);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexPro_Operator_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexPro_Operator_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Operator_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexPro_Operator_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Operator_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexPro_Operator_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Operator_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexPro_Operator_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexPro_Operator_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexPro_Operator_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexPro_Operator_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexPro_Operator_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexPro_Operator_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexPro_Operator_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexPro_Operator_C result;
      
      private TexPro_Operator_C PrepareBuilder() {
        if (resultIsReadOnly) {
          TexPro_Operator_C original = result;
          result = new TexPro_Operator_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexPro_Operator_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.TexPro_Operator_C.Descriptor; }
      }
      
      public override TexPro_Operator_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.TexPro_Operator_C.DefaultInstance; }
      }
      
      public override TexPro_Operator_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexPro_Operator_C) {
          return MergeFrom((TexPro_Operator_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexPro_Operator_C other) {
        if (other == global::ProtoCmd.Service.TexPro_Operator_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.HasOpValue) {
          OpValue = other.OpValue;
        }
        if (other.HasStrContent) {
          StrContent = other.StrContent;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texProOperatorCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texProOperatorCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOpType = input.ReadUInt32(ref result.opType_);
              break;
            }
            case 16: {
              result.hasOpValue = input.ReadUInt64(ref result.opValue_);
              break;
            }
            case 26: {
              result.hasStrContent = input.ReadString(ref result.strContent_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpType(uint value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public bool HasOpValue {
        get { return result.hasOpValue; }
      }
      [global::System.CLSCompliant(false)]
      public ulong OpValue {
        get { return result.OpValue; }
        set { SetOpValue(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpValue(ulong value) {
        PrepareBuilder();
        result.hasOpValue = true;
        result.opValue_ = value;
        return this;
      }
      public Builder ClearOpValue() {
        PrepareBuilder();
        result.hasOpValue = false;
        result.opValue_ = 0UL;
        return this;
      }
      
      public bool HasStrContent {
        get { return result.hasStrContent; }
      }
      public string StrContent {
        get { return result.StrContent; }
        set { SetStrContent(value); }
      }
      public Builder SetStrContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrContent = true;
        result.strContent_ = value;
        return this;
      }
      public Builder ClearStrContent() {
        PrepareBuilder();
        result.hasStrContent = false;
        result.strContent_ = "";
        return this;
      }
    }
    static TexPro_Operator_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexPro_Operator_S : pb::GeneratedMessage<TexPro_Operator_S, TexPro_Operator_S.Builder> {
    private TexPro_Operator_S() { }
    private static readonly TexPro_Operator_S defaultInstance = new TexPro_Operator_S().MakeReadOnly();
    private static readonly string[] _texProOperatorSFieldNames = new string[] { "opType", "suc" };
    private static readonly uint[] _texProOperatorSFieldTags = new uint[] { 8, 16 };
    public static TexPro_Operator_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexPro_Operator_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexPro_Operator_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexPro_Operator_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexPro_Operator_S, TexPro_Operator_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_TexPro_Operator_S__FieldAccessorTable; }
    }
    
    public const int OpTypeFieldNumber = 1;
    private bool hasOpType;
    private uint opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpType {
      get { return opType_; }
    }
    
    public const int SucFieldNumber = 2;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpType) return false;
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texProOperatorSFieldNames;
      if (hasOpType) {
        output.WriteUInt32(1, field_names[0], OpType);
      }
      if (hasSuc) {
        output.WriteBool(2, field_names[1], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOpType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, OpType);
      }
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexPro_Operator_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexPro_Operator_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Operator_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexPro_Operator_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Operator_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexPro_Operator_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexPro_Operator_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexPro_Operator_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexPro_Operator_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexPro_Operator_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexPro_Operator_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexPro_Operator_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexPro_Operator_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexPro_Operator_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexPro_Operator_S result;
      
      private TexPro_Operator_S PrepareBuilder() {
        if (resultIsReadOnly) {
          TexPro_Operator_S original = result;
          result = new TexPro_Operator_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexPro_Operator_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.TexPro_Operator_S.Descriptor; }
      }
      
      public override TexPro_Operator_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.TexPro_Operator_S.DefaultInstance; }
      }
      
      public override TexPro_Operator_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexPro_Operator_S) {
          return MergeFrom((TexPro_Operator_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexPro_Operator_S other) {
        if (other == global::ProtoCmd.Service.TexPro_Operator_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texProOperatorSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texProOperatorSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOpType = input.ReadUInt32(ref result.opType_);
              break;
            }
            case 16: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpType(uint value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static TexPro_Operator_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Module_Switch_C : pb::GeneratedMessage<Module_Switch_C, Module_Switch_C.Builder> {
    private Module_Switch_C() { }
    private static readonly Module_Switch_C defaultInstance = new Module_Switch_C().MakeReadOnly();
    private static readonly string[] _moduleSwitchCFieldNames = new string[] { "module", "opend" };
    private static readonly uint[] _moduleSwitchCFieldTags = new uint[] { 8, 16 };
    public static Module_Switch_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Module_Switch_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Module_Switch_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Module_Switch_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Module_Switch_C, Module_Switch_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Module_Switch_C__FieldAccessorTable; }
    }
    
    public const int ModuleFieldNumber = 1;
    private bool hasModule;
    private uint module_;
    public bool HasModule {
      get { return hasModule; }
    }
    [global::System.CLSCompliant(false)]
    public uint Module {
      get { return module_; }
    }
    
    public const int OpendFieldNumber = 2;
    private bool hasOpend;
    private uint opend_;
    public bool HasOpend {
      get { return hasOpend; }
    }
    [global::System.CLSCompliant(false)]
    public uint Opend {
      get { return opend_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasModule) return false;
        if (!hasOpend) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _moduleSwitchCFieldNames;
      if (hasModule) {
        output.WriteUInt32(1, field_names[0], Module);
      }
      if (hasOpend) {
        output.WriteUInt32(2, field_names[1], Opend);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasModule) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Module);
      }
      if (hasOpend) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Opend);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Module_Switch_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Module_Switch_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Module_Switch_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Module_Switch_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Module_Switch_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Module_Switch_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Module_Switch_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Module_Switch_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Module_Switch_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Module_Switch_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Module_Switch_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Module_Switch_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Module_Switch_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Module_Switch_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Module_Switch_C result;
      
      private Module_Switch_C PrepareBuilder() {
        if (resultIsReadOnly) {
          Module_Switch_C original = result;
          result = new Module_Switch_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Module_Switch_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Module_Switch_C.Descriptor; }
      }
      
      public override Module_Switch_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Module_Switch_C.DefaultInstance; }
      }
      
      public override Module_Switch_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Module_Switch_C) {
          return MergeFrom((Module_Switch_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Module_Switch_C other) {
        if (other == global::ProtoCmd.Service.Module_Switch_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasModule) {
          Module = other.Module;
        }
        if (other.HasOpend) {
          Opend = other.Opend;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_moduleSwitchCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _moduleSwitchCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasModule = input.ReadUInt32(ref result.module_);
              break;
            }
            case 16: {
              result.hasOpend = input.ReadUInt32(ref result.opend_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasModule {
        get { return result.hasModule; }
      }
      [global::System.CLSCompliant(false)]
      public uint Module {
        get { return result.Module; }
        set { SetModule(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetModule(uint value) {
        PrepareBuilder();
        result.hasModule = true;
        result.module_ = value;
        return this;
      }
      public Builder ClearModule() {
        PrepareBuilder();
        result.hasModule = false;
        result.module_ = 0;
        return this;
      }
      
      public bool HasOpend {
        get { return result.hasOpend; }
      }
      [global::System.CLSCompliant(false)]
      public uint Opend {
        get { return result.Opend; }
        set { SetOpend(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpend(uint value) {
        PrepareBuilder();
        result.hasOpend = true;
        result.opend_ = value;
        return this;
      }
      public Builder ClearOpend() {
        PrepareBuilder();
        result.hasOpend = false;
        result.opend_ = 0;
        return this;
      }
    }
    static Module_Switch_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Module_Switch_S : pb::GeneratedMessage<Module_Switch_S, Module_Switch_S.Builder> {
    private Module_Switch_S() { }
    private static readonly Module_Switch_S defaultInstance = new Module_Switch_S().MakeReadOnly();
    private static readonly string[] _moduleSwitchSFieldNames = new string[] { "opend", "suc" };
    private static readonly uint[] _moduleSwitchSFieldTags = new uint[] { 16, 8 };
    public static Module_Switch_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Module_Switch_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Module_Switch_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Module_Switch_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Module_Switch_S, Module_Switch_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_Module_Switch_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public const int OpendFieldNumber = 2;
    private bool hasOpend;
    private uint opend_;
    public bool HasOpend {
      get { return hasOpend; }
    }
    [global::System.CLSCompliant(false)]
    public uint Opend {
      get { return opend_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        if (!hasOpend) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _moduleSwitchSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[1], Suc);
      }
      if (hasOpend) {
        output.WriteUInt32(2, field_names[0], Opend);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      if (hasOpend) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Opend);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Module_Switch_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Module_Switch_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Module_Switch_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Module_Switch_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Module_Switch_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Module_Switch_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Module_Switch_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Module_Switch_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Module_Switch_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Module_Switch_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Module_Switch_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Module_Switch_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Module_Switch_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Module_Switch_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Module_Switch_S result;
      
      private Module_Switch_S PrepareBuilder() {
        if (resultIsReadOnly) {
          Module_Switch_S original = result;
          result = new Module_Switch_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Module_Switch_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.Module_Switch_S.Descriptor; }
      }
      
      public override Module_Switch_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.Module_Switch_S.DefaultInstance; }
      }
      
      public override Module_Switch_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Module_Switch_S) {
          return MergeFrom((Module_Switch_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Module_Switch_S other) {
        if (other == global::ProtoCmd.Service.Module_Switch_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        if (other.HasOpend) {
          Opend = other.Opend;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_moduleSwitchSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _moduleSwitchSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
            case 16: {
              result.hasOpend = input.ReadUInt32(ref result.opend_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
      
      public bool HasOpend {
        get { return result.hasOpend; }
      }
      [global::System.CLSCompliant(false)]
      public uint Opend {
        get { return result.Opend; }
        set { SetOpend(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpend(uint value) {
        PrepareBuilder();
        result.hasOpend = true;
        result.opend_ = value;
        return this;
      }
      public Builder ClearOpend() {
        PrepareBuilder();
        result.hasOpend = false;
        result.opend_ = 0;
        return this;
      }
    }
    static Module_Switch_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClientGame_Switch_C : pb::GeneratedMessage<ClientGame_Switch_C, ClientGame_Switch_C.Builder> {
    private ClientGame_Switch_C() { }
    private static readonly ClientGame_Switch_C defaultInstance = new ClientGame_Switch_C().MakeReadOnly();
    private static readonly string[] _clientGameSwitchCFieldNames = new string[] { "gameID", "platOpen" };
    private static readonly uint[] _clientGameSwitchCFieldTags = new uint[] { 8, 16 };
    public static ClientGame_Switch_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientGame_Switch_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClientGame_Switch_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ClientGame_Switch_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientGame_Switch_C, ClientGame_Switch_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ClientGame_Switch_C__FieldAccessorTable; }
    }
    
    public const int GameIDFieldNumber = 1;
    private bool hasGameID;
    private uint gameID_;
    public bool HasGameID {
      get { return hasGameID; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameID {
      get { return gameID_; }
    }
    
    public const int PlatOpenFieldNumber = 2;
    private pbc::PopsicleList<uint> platOpen_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> PlatOpenList {
      get { return pbc::Lists.AsReadOnly(platOpen_); }
    }
    public int PlatOpenCount {
      get { return platOpen_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetPlatOpen(int index) {
      return platOpen_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _clientGameSwitchCFieldNames;
      if (hasGameID) {
        output.WriteUInt32(1, field_names[0], GameID);
      }
      if (platOpen_.Count > 0) {
        output.WriteUInt32Array(2, field_names[1], platOpen_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameID) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, GameID);
      }
      {
        int dataSize = 0;
        foreach (uint element in PlatOpenList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * platOpen_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ClientGame_Switch_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientGame_Switch_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientGame_Switch_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientGame_Switch_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientGame_Switch_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientGame_Switch_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientGame_Switch_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientGame_Switch_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientGame_Switch_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientGame_Switch_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClientGame_Switch_C MakeReadOnly() {
      platOpen_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientGame_Switch_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ClientGame_Switch_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClientGame_Switch_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClientGame_Switch_C result;
      
      private ClientGame_Switch_C PrepareBuilder() {
        if (resultIsReadOnly) {
          ClientGame_Switch_C original = result;
          result = new ClientGame_Switch_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClientGame_Switch_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.ClientGame_Switch_C.Descriptor; }
      }
      
      public override ClientGame_Switch_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.ClientGame_Switch_C.DefaultInstance; }
      }
      
      public override ClientGame_Switch_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientGame_Switch_C) {
          return MergeFrom((ClientGame_Switch_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientGame_Switch_C other) {
        if (other == global::ProtoCmd.Service.ClientGame_Switch_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameID) {
          GameID = other.GameID;
        }
        if (other.platOpen_.Count != 0) {
          result.platOpen_.Add(other.platOpen_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientGameSwitchCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientGameSwitchCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameID = input.ReadUInt32(ref result.gameID_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.platOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameID {
        get { return result.hasGameID; }
      }
      [global::System.CLSCompliant(false)]
      public uint GameID {
        get { return result.GameID; }
        set { SetGameID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGameID(uint value) {
        PrepareBuilder();
        result.hasGameID = true;
        result.gameID_ = value;
        return this;
      }
      public Builder ClearGameID() {
        PrepareBuilder();
        result.hasGameID = false;
        result.gameID_ = 0;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> PlatOpenList {
        get { return PrepareBuilder().platOpen_; }
      }
      public int PlatOpenCount {
        get { return result.PlatOpenCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetPlatOpen(int index) {
        return result.GetPlatOpen(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlatOpen(int index, uint value) {
        PrepareBuilder();
        result.platOpen_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddPlatOpen(uint value) {
        PrepareBuilder();
        result.platOpen_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangePlatOpen(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.platOpen_.Add(values);
        return this;
      }
      public Builder ClearPlatOpen() {
        PrepareBuilder();
        result.platOpen_.Clear();
        return this;
      }
    }
    static ClientGame_Switch_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClientGame_Switch_S : pb::GeneratedMessage<ClientGame_Switch_S, ClientGame_Switch_S.Builder> {
    private ClientGame_Switch_S() { }
    private static readonly ClientGame_Switch_S defaultInstance = new ClientGame_Switch_S().MakeReadOnly();
    private static readonly string[] _clientGameSwitchSFieldNames = new string[] { "platOpen", "suc" };
    private static readonly uint[] _clientGameSwitchSFieldTags = new uint[] { 16, 8 };
    public static ClientGame_Switch_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClientGame_Switch_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClientGame_Switch_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ClientGame_Switch_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClientGame_Switch_S, ClientGame_Switch_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ClientGame_Switch_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public const int PlatOpenFieldNumber = 2;
    private pbc::PopsicleList<uint> platOpen_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> PlatOpenList {
      get { return pbc::Lists.AsReadOnly(platOpen_); }
    }
    public int PlatOpenCount {
      get { return platOpen_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetPlatOpen(int index) {
      return platOpen_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSuc) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _clientGameSwitchSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[1], Suc);
      }
      if (platOpen_.Count > 0) {
        output.WriteUInt32Array(2, field_names[0], platOpen_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      {
        int dataSize = 0;
        foreach (uint element in PlatOpenList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * platOpen_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ClientGame_Switch_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientGame_Switch_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientGame_Switch_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClientGame_Switch_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClientGame_Switch_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientGame_Switch_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClientGame_Switch_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClientGame_Switch_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClientGame_Switch_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClientGame_Switch_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClientGame_Switch_S MakeReadOnly() {
      platOpen_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClientGame_Switch_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ClientGame_Switch_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClientGame_Switch_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClientGame_Switch_S result;
      
      private ClientGame_Switch_S PrepareBuilder() {
        if (resultIsReadOnly) {
          ClientGame_Switch_S original = result;
          result = new ClientGame_Switch_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClientGame_Switch_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.ClientGame_Switch_S.Descriptor; }
      }
      
      public override ClientGame_Switch_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.ClientGame_Switch_S.DefaultInstance; }
      }
      
      public override ClientGame_Switch_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClientGame_Switch_S) {
          return MergeFrom((ClientGame_Switch_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClientGame_Switch_S other) {
        if (other == global::ProtoCmd.Service.ClientGame_Switch_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        if (other.platOpen_.Count != 0) {
          result.platOpen_.Add(other.platOpen_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clientGameSwitchSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clientGameSwitchSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.platOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> PlatOpenList {
        get { return PrepareBuilder().platOpen_; }
      }
      public int PlatOpenCount {
        get { return result.PlatOpenCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetPlatOpen(int index) {
        return result.GetPlatOpen(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlatOpen(int index, uint value) {
        PrepareBuilder();
        result.platOpen_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddPlatOpen(uint value) {
        PrepareBuilder();
        result.platOpen_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangePlatOpen(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.platOpen_.Add(values);
        return this;
      }
      public Builder ClearPlatOpen() {
        PrepareBuilder();
        result.platOpen_.Clear();
        return this;
      }
    }
    static ClientGame_Switch_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetIndebatedRebateOpenReq : pb::GeneratedMessage<BGSetIndebatedRebateOpenReq, BGSetIndebatedRebateOpenReq.Builder> {
    private BGSetIndebatedRebateOpenReq() { }
    private static readonly BGSetIndebatedRebateOpenReq defaultInstance = new BGSetIndebatedRebateOpenReq().MakeReadOnly();
    private static readonly string[] _bGSetIndebatedRebateOpenReqFieldNames = new string[] { "isOpen" };
    private static readonly uint[] _bGSetIndebatedRebateOpenReqFieldTags = new uint[] { 8 };
    public static BGSetIndebatedRebateOpenReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetIndebatedRebateOpenReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetIndebatedRebateOpenReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetIndebatedRebateOpenReq, BGSetIndebatedRebateOpenReq.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenReq__FieldAccessorTable; }
    }
    
    public const int IsOpenFieldNumber = 1;
    private bool hasIsOpen;
    private int isOpen_;
    public bool HasIsOpen {
      get { return hasIsOpen; }
    }
    public int IsOpen {
      get { return isOpen_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetIndebatedRebateOpenReqFieldNames;
      if (hasIsOpen) {
        output.WriteInt32(1, field_names[0], IsOpen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsOpen) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, IsOpen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetIndebatedRebateOpenReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetIndebatedRebateOpenReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetIndebatedRebateOpenReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetIndebatedRebateOpenReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetIndebatedRebateOpenReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetIndebatedRebateOpenReq result;
      
      private BGSetIndebatedRebateOpenReq PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetIndebatedRebateOpenReq original = result;
          result = new BGSetIndebatedRebateOpenReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetIndebatedRebateOpenReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetIndebatedRebateOpenReq.Descriptor; }
      }
      
      public override BGSetIndebatedRebateOpenReq DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetIndebatedRebateOpenReq.DefaultInstance; }
      }
      
      public override BGSetIndebatedRebateOpenReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetIndebatedRebateOpenReq) {
          return MergeFrom((BGSetIndebatedRebateOpenReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetIndebatedRebateOpenReq other) {
        if (other == global::ProtoCmd.Service.BGSetIndebatedRebateOpenReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsOpen) {
          IsOpen = other.IsOpen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetIndebatedRebateOpenReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetIndebatedRebateOpenReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsOpen = input.ReadInt32(ref result.isOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsOpen {
        get { return result.hasIsOpen; }
      }
      public int IsOpen {
        get { return result.IsOpen; }
        set { SetIsOpen(value); }
      }
      public Builder SetIsOpen(int value) {
        PrepareBuilder();
        result.hasIsOpen = true;
        result.isOpen_ = value;
        return this;
      }
      public Builder ClearIsOpen() {
        PrepareBuilder();
        result.hasIsOpen = false;
        result.isOpen_ = 0;
        return this;
      }
    }
    static BGSetIndebatedRebateOpenReq() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetIndebatedRebateOpenRes : pb::GeneratedMessage<BGSetIndebatedRebateOpenRes, BGSetIndebatedRebateOpenRes.Builder> {
    private BGSetIndebatedRebateOpenRes() { }
    private static readonly BGSetIndebatedRebateOpenRes defaultInstance = new BGSetIndebatedRebateOpenRes().MakeReadOnly();
    private static readonly string[] _bGSetIndebatedRebateOpenResFieldNames = new string[] { "currStatus", "suc" };
    private static readonly uint[] _bGSetIndebatedRebateOpenResFieldTags = new uint[] { 16, 8 };
    public static BGSetIndebatedRebateOpenRes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetIndebatedRebateOpenRes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetIndebatedRebateOpenRes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenRes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetIndebatedRebateOpenRes, BGSetIndebatedRebateOpenRes.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetIndebatedRebateOpenRes__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private int suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public int Suc {
      get { return suc_; }
    }
    
    public const int CurrStatusFieldNumber = 2;
    private bool hasCurrStatus;
    private int currStatus_;
    public bool HasCurrStatus {
      get { return hasCurrStatus; }
    }
    public int CurrStatus {
      get { return currStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetIndebatedRebateOpenResFieldNames;
      if (hasSuc) {
        output.WriteInt32(1, field_names[1], Suc);
      }
      if (hasCurrStatus) {
        output.WriteInt32(2, field_names[0], CurrStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Suc);
      }
      if (hasCurrStatus) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CurrStatus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetIndebatedRebateOpenRes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetIndebatedRebateOpenRes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetIndebatedRebateOpenRes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetIndebatedRebateOpenRes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetIndebatedRebateOpenRes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetIndebatedRebateOpenRes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetIndebatedRebateOpenRes result;
      
      private BGSetIndebatedRebateOpenRes PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetIndebatedRebateOpenRes original = result;
          result = new BGSetIndebatedRebateOpenRes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetIndebatedRebateOpenRes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetIndebatedRebateOpenRes.Descriptor; }
      }
      
      public override BGSetIndebatedRebateOpenRes DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetIndebatedRebateOpenRes.DefaultInstance; }
      }
      
      public override BGSetIndebatedRebateOpenRes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetIndebatedRebateOpenRes) {
          return MergeFrom((BGSetIndebatedRebateOpenRes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetIndebatedRebateOpenRes other) {
        if (other == global::ProtoCmd.Service.BGSetIndebatedRebateOpenRes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        if (other.HasCurrStatus) {
          CurrStatus = other.CurrStatus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetIndebatedRebateOpenResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetIndebatedRebateOpenResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadInt32(ref result.suc_);
              break;
            }
            case 16: {
              result.hasCurrStatus = input.ReadInt32(ref result.currStatus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public int Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(int value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = 0;
        return this;
      }
      
      public bool HasCurrStatus {
        get { return result.hasCurrStatus; }
      }
      public int CurrStatus {
        get { return result.CurrStatus; }
        set { SetCurrStatus(value); }
      }
      public Builder SetCurrStatus(int value) {
        PrepareBuilder();
        result.hasCurrStatus = true;
        result.currStatus_ = value;
        return this;
      }
      public Builder ClearCurrStatus() {
        PrepareBuilder();
        result.hasCurrStatus = false;
        result.currStatus_ = 0;
        return this;
      }
    }
    static BGSetIndebatedRebateOpenRes() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PopUpControl_S : pb::GeneratedMessage<PopUpControl_S, PopUpControl_S.Builder> {
    private PopUpControl_S() { }
    private static readonly PopUpControl_S defaultInstance = new PopUpControl_S().MakeReadOnly();
    private static readonly string[] _popUpControlSFieldNames = new string[] { "suc" };
    private static readonly uint[] _popUpControlSFieldTags = new uint[] { 8 };
    public static PopUpControl_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PopUpControl_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PopUpControl_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_PopUpControl_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PopUpControl_S, PopUpControl_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_PopUpControl_S__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _popUpControlSFieldNames;
      if (hasSuc) {
        output.WriteBool(1, field_names[0], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PopUpControl_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PopUpControl_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PopUpControl_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PopUpControl_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PopUpControl_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PopUpControl_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PopUpControl_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PopUpControl_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PopUpControl_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PopUpControl_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PopUpControl_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PopUpControl_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PopUpControl_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PopUpControl_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PopUpControl_S result;
      
      private PopUpControl_S PrepareBuilder() {
        if (resultIsReadOnly) {
          PopUpControl_S original = result;
          result = new PopUpControl_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PopUpControl_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.PopUpControl_S.Descriptor; }
      }
      
      public override PopUpControl_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.PopUpControl_S.DefaultInstance; }
      }
      
      public override PopUpControl_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PopUpControl_S) {
          return MergeFrom((PopUpControl_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PopUpControl_S other) {
        if (other == global::ProtoCmd.Service.PopUpControl_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_popUpControlSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _popUpControlSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static PopUpControl_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MobileSwitch : pb::GeneratedMessage<MobileSwitch, MobileSwitch.Builder> {
    private MobileSwitch() { }
    private static readonly MobileSwitch defaultInstance = new MobileSwitch().MakeReadOnly();
    private static readonly string[] _mobileSwitchFieldNames = new string[] { "agent", "close_login_type", "close_register_type", "id", "mobile_brand", "mobile_device", "mobile_model" };
    private static readonly uint[] _mobileSwitchFieldTags = new uint[] { 24, 40, 48, 8, 34, 16, 58 };
    public static MobileSwitch DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MobileSwitch DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MobileSwitch ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_MobileSwitch__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MobileSwitch, MobileSwitch.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_MobileSwitch__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int MobileDeviceFieldNumber = 2;
    private bool hasMobileDevice;
    private int mobileDevice_;
    public bool HasMobileDevice {
      get { return hasMobileDevice; }
    }
    public int MobileDevice {
      get { return mobileDevice_; }
    }
    
    public const int AgentFieldNumber = 3;
    private bool hasAgent;
    private int agent_;
    public bool HasAgent {
      get { return hasAgent; }
    }
    public int Agent {
      get { return agent_; }
    }
    
    public const int MobileBrandFieldNumber = 4;
    private bool hasMobileBrand;
    private string mobileBrand_ = "";
    public bool HasMobileBrand {
      get { return hasMobileBrand; }
    }
    public string MobileBrand {
      get { return mobileBrand_; }
    }
    
    public const int CloseLoginTypeFieldNumber = 5;
    private pbc::PopsicleList<int> closeLoginType_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CloseLoginTypeList {
      get { return pbc::Lists.AsReadOnly(closeLoginType_); }
    }
    public int CloseLoginTypeCount {
      get { return closeLoginType_.Count; }
    }
    public int GetCloseLoginType(int index) {
      return closeLoginType_[index];
    }
    
    public const int CloseRegisterTypeFieldNumber = 6;
    private pbc::PopsicleList<int> closeRegisterType_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CloseRegisterTypeList {
      get { return pbc::Lists.AsReadOnly(closeRegisterType_); }
    }
    public int CloseRegisterTypeCount {
      get { return closeRegisterType_.Count; }
    }
    public int GetCloseRegisterType(int index) {
      return closeRegisterType_[index];
    }
    
    public const int MobileModelFieldNumber = 7;
    private pbc::PopsicleList<string> mobileModel_ = new pbc::PopsicleList<string>();
    public scg::IList<string> MobileModelList {
      get { return pbc::Lists.AsReadOnly(mobileModel_); }
    }
    public int MobileModelCount {
      get { return mobileModel_.Count; }
    }
    public string GetMobileModel(int index) {
      return mobileModel_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mobileSwitchFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[3], Id);
      }
      if (hasMobileDevice) {
        output.WriteInt32(2, field_names[5], MobileDevice);
      }
      if (hasAgent) {
        output.WriteInt32(3, field_names[0], Agent);
      }
      if (hasMobileBrand) {
        output.WriteString(4, field_names[4], MobileBrand);
      }
      if (closeLoginType_.Count > 0) {
        output.WriteInt32Array(5, field_names[1], closeLoginType_);
      }
      if (closeRegisterType_.Count > 0) {
        output.WriteInt32Array(6, field_names[2], closeRegisterType_);
      }
      if (mobileModel_.Count > 0) {
        output.WriteStringArray(7, field_names[6], mobileModel_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasMobileDevice) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, MobileDevice);
      }
      if (hasAgent) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Agent);
      }
      if (hasMobileBrand) {
        size += pb::CodedOutputStream.ComputeStringSize(4, MobileBrand);
      }
      {
        int dataSize = 0;
        foreach (int element in CloseLoginTypeList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * closeLoginType_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in CloseRegisterTypeList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * closeRegisterType_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in MobileModelList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * mobileModel_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MobileSwitch ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MobileSwitch ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitch ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MobileSwitch ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitch ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MobileSwitch ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitch ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MobileSwitch ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MobileSwitch ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MobileSwitch ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MobileSwitch MakeReadOnly() {
      closeLoginType_.MakeReadOnly();
      closeRegisterType_.MakeReadOnly();
      mobileModel_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MobileSwitch prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MobileSwitch, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MobileSwitch cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MobileSwitch result;
      
      private MobileSwitch PrepareBuilder() {
        if (resultIsReadOnly) {
          MobileSwitch original = result;
          result = new MobileSwitch();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MobileSwitch MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.MobileSwitch.Descriptor; }
      }
      
      public override MobileSwitch DefaultInstanceForType {
        get { return global::ProtoCmd.Service.MobileSwitch.DefaultInstance; }
      }
      
      public override MobileSwitch BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MobileSwitch) {
          return MergeFrom((MobileSwitch) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MobileSwitch other) {
        if (other == global::ProtoCmd.Service.MobileSwitch.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasMobileDevice) {
          MobileDevice = other.MobileDevice;
        }
        if (other.HasAgent) {
          Agent = other.Agent;
        }
        if (other.HasMobileBrand) {
          MobileBrand = other.MobileBrand;
        }
        if (other.closeLoginType_.Count != 0) {
          result.closeLoginType_.Add(other.closeLoginType_);
        }
        if (other.closeRegisterType_.Count != 0) {
          result.closeRegisterType_.Add(other.closeRegisterType_);
        }
        if (other.mobileModel_.Count != 0) {
          result.mobileModel_.Add(other.mobileModel_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mobileSwitchFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mobileSwitchFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasMobileDevice = input.ReadInt32(ref result.mobileDevice_);
              break;
            }
            case 24: {
              result.hasAgent = input.ReadInt32(ref result.agent_);
              break;
            }
            case 34: {
              result.hasMobileBrand = input.ReadString(ref result.mobileBrand_);
              break;
            }
            case 42:
            case 40: {
              input.ReadInt32Array(tag, field_name, result.closeLoginType_);
              break;
            }
            case 50:
            case 48: {
              input.ReadInt32Array(tag, field_name, result.closeRegisterType_);
              break;
            }
            case 58: {
              input.ReadStringArray(tag, field_name, result.mobileModel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasMobileDevice {
        get { return result.hasMobileDevice; }
      }
      public int MobileDevice {
        get { return result.MobileDevice; }
        set { SetMobileDevice(value); }
      }
      public Builder SetMobileDevice(int value) {
        PrepareBuilder();
        result.hasMobileDevice = true;
        result.mobileDevice_ = value;
        return this;
      }
      public Builder ClearMobileDevice() {
        PrepareBuilder();
        result.hasMobileDevice = false;
        result.mobileDevice_ = 0;
        return this;
      }
      
      public bool HasAgent {
        get { return result.hasAgent; }
      }
      public int Agent {
        get { return result.Agent; }
        set { SetAgent(value); }
      }
      public Builder SetAgent(int value) {
        PrepareBuilder();
        result.hasAgent = true;
        result.agent_ = value;
        return this;
      }
      public Builder ClearAgent() {
        PrepareBuilder();
        result.hasAgent = false;
        result.agent_ = 0;
        return this;
      }
      
      public bool HasMobileBrand {
        get { return result.hasMobileBrand; }
      }
      public string MobileBrand {
        get { return result.MobileBrand; }
        set { SetMobileBrand(value); }
      }
      public Builder SetMobileBrand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMobileBrand = true;
        result.mobileBrand_ = value;
        return this;
      }
      public Builder ClearMobileBrand() {
        PrepareBuilder();
        result.hasMobileBrand = false;
        result.mobileBrand_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> CloseLoginTypeList {
        get { return PrepareBuilder().closeLoginType_; }
      }
      public int CloseLoginTypeCount {
        get { return result.CloseLoginTypeCount; }
      }
      public int GetCloseLoginType(int index) {
        return result.GetCloseLoginType(index);
      }
      public Builder SetCloseLoginType(int index, int value) {
        PrepareBuilder();
        result.closeLoginType_[index] = value;
        return this;
      }
      public Builder AddCloseLoginType(int value) {
        PrepareBuilder();
        result.closeLoginType_.Add(value);
        return this;
      }
      public Builder AddRangeCloseLoginType(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.closeLoginType_.Add(values);
        return this;
      }
      public Builder ClearCloseLoginType() {
        PrepareBuilder();
        result.closeLoginType_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> CloseRegisterTypeList {
        get { return PrepareBuilder().closeRegisterType_; }
      }
      public int CloseRegisterTypeCount {
        get { return result.CloseRegisterTypeCount; }
      }
      public int GetCloseRegisterType(int index) {
        return result.GetCloseRegisterType(index);
      }
      public Builder SetCloseRegisterType(int index, int value) {
        PrepareBuilder();
        result.closeRegisterType_[index] = value;
        return this;
      }
      public Builder AddCloseRegisterType(int value) {
        PrepareBuilder();
        result.closeRegisterType_.Add(value);
        return this;
      }
      public Builder AddRangeCloseRegisterType(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.closeRegisterType_.Add(values);
        return this;
      }
      public Builder ClearCloseRegisterType() {
        PrepareBuilder();
        result.closeRegisterType_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> MobileModelList {
        get { return PrepareBuilder().mobileModel_; }
      }
      public int MobileModelCount {
        get { return result.MobileModelCount; }
      }
      public string GetMobileModel(int index) {
        return result.GetMobileModel(index);
      }
      public Builder SetMobileModel(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mobileModel_[index] = value;
        return this;
      }
      public Builder AddMobileModel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mobileModel_.Add(value);
        return this;
      }
      public Builder AddRangeMobileModel(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.mobileModel_.Add(values);
        return this;
      }
      public Builder ClearMobileModel() {
        PrepareBuilder();
        result.mobileModel_.Clear();
        return this;
      }
    }
    static MobileSwitch() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MobileSwitchs_S : pb::GeneratedMessage<MobileSwitchs_S, MobileSwitchs_S.Builder> {
    private MobileSwitchs_S() { }
    private static readonly MobileSwitchs_S defaultInstance = new MobileSwitchs_S().MakeReadOnly();
    private static readonly string[] _mobileSwitchsSFieldNames = new string[] { "mobile_switchs", "suc" };
    private static readonly uint[] _mobileSwitchsSFieldTags = new uint[] { 10, 16 };
    public static MobileSwitchs_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MobileSwitchs_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MobileSwitchs_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_MobileSwitchs_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MobileSwitchs_S, MobileSwitchs_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_MobileSwitchs_S__FieldAccessorTable; }
    }
    
    public const int MobileSwitchsFieldNumber = 1;
    private pbc::PopsicleList<global::ProtoCmd.Service.MobileSwitch> mobileSwitchs_ = new pbc::PopsicleList<global::ProtoCmd.Service.MobileSwitch>();
    public scg::IList<global::ProtoCmd.Service.MobileSwitch> MobileSwitchsList {
      get { return mobileSwitchs_; }
    }
    public int MobileSwitchsCount {
      get { return mobileSwitchs_.Count; }
    }
    public global::ProtoCmd.Service.MobileSwitch GetMobileSwitchs(int index) {
      return mobileSwitchs_[index];
    }
    
    public const int SucFieldNumber = 2;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mobileSwitchsSFieldNames;
      if (mobileSwitchs_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], mobileSwitchs_);
      }
      if (hasSuc) {
        output.WriteBool(2, field_names[1], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::ProtoCmd.Service.MobileSwitch element in MobileSwitchsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MobileSwitchs_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MobileSwitchs_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchs_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MobileSwitchs_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchs_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MobileSwitchs_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchs_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MobileSwitchs_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MobileSwitchs_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MobileSwitchs_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MobileSwitchs_S MakeReadOnly() {
      mobileSwitchs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MobileSwitchs_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MobileSwitchs_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MobileSwitchs_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MobileSwitchs_S result;
      
      private MobileSwitchs_S PrepareBuilder() {
        if (resultIsReadOnly) {
          MobileSwitchs_S original = result;
          result = new MobileSwitchs_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MobileSwitchs_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.MobileSwitchs_S.Descriptor; }
      }
      
      public override MobileSwitchs_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.MobileSwitchs_S.DefaultInstance; }
      }
      
      public override MobileSwitchs_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MobileSwitchs_S) {
          return MergeFrom((MobileSwitchs_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MobileSwitchs_S other) {
        if (other == global::ProtoCmd.Service.MobileSwitchs_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.mobileSwitchs_.Count != 0) {
          result.mobileSwitchs_.Add(other.mobileSwitchs_);
        }
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mobileSwitchsSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mobileSwitchsSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.mobileSwitchs_, global::ProtoCmd.Service.MobileSwitch.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::ProtoCmd.Service.MobileSwitch> MobileSwitchsList {
        get { return PrepareBuilder().mobileSwitchs_; }
      }
      public int MobileSwitchsCount {
        get { return result.MobileSwitchsCount; }
      }
      public global::ProtoCmd.Service.MobileSwitch GetMobileSwitchs(int index) {
        return result.GetMobileSwitchs(index);
      }
      public Builder SetMobileSwitchs(int index, global::ProtoCmd.Service.MobileSwitch value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mobileSwitchs_[index] = value;
        return this;
      }
      public Builder SetMobileSwitchs(int index, global::ProtoCmd.Service.MobileSwitch.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mobileSwitchs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMobileSwitchs(global::ProtoCmd.Service.MobileSwitch value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mobileSwitchs_.Add(value);
        return this;
      }
      public Builder AddMobileSwitchs(global::ProtoCmd.Service.MobileSwitch.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mobileSwitchs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMobileSwitchs(scg::IEnumerable<global::ProtoCmd.Service.MobileSwitch> values) {
        PrepareBuilder();
        result.mobileSwitchs_.Add(values);
        return this;
      }
      public Builder ClearMobileSwitchs() {
        PrepareBuilder();
        result.mobileSwitchs_.Clear();
        return this;
      }
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static MobileSwitchs_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MobileSwitchOperator_C : pb::GeneratedMessage<MobileSwitchOperator_C, MobileSwitchOperator_C.Builder> {
    private MobileSwitchOperator_C() { }
    private static readonly MobileSwitchOperator_C defaultInstance = new MobileSwitchOperator_C().MakeReadOnly();
    private static readonly string[] _mobileSwitchOperatorCFieldNames = new string[] { "mobile_switch", "operator_type" };
    private static readonly uint[] _mobileSwitchOperatorCFieldTags = new uint[] { 18, 8 };
    public static MobileSwitchOperator_C DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MobileSwitchOperator_C DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MobileSwitchOperator_C ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_MobileSwitchOperator_C__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MobileSwitchOperator_C, MobileSwitchOperator_C.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_MobileSwitchOperator_C__FieldAccessorTable; }
    }
    
    public const int OperatorTypeFieldNumber = 1;
    private bool hasOperatorType;
    private int operatorType_;
    public bool HasOperatorType {
      get { return hasOperatorType; }
    }
    public int OperatorType {
      get { return operatorType_; }
    }
    
    public const int MobileSwitchFieldNumber = 2;
    private bool hasMobileSwitch;
    private global::ProtoCmd.Service.MobileSwitch mobileSwitch_;
    public bool HasMobileSwitch {
      get { return hasMobileSwitch; }
    }
    public global::ProtoCmd.Service.MobileSwitch MobileSwitch {
      get { return mobileSwitch_ ?? global::ProtoCmd.Service.MobileSwitch.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mobileSwitchOperatorCFieldNames;
      if (hasOperatorType) {
        output.WriteInt32(1, field_names[1], OperatorType);
      }
      if (hasMobileSwitch) {
        output.WriteMessage(2, field_names[0], MobileSwitch);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOperatorType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, OperatorType);
      }
      if (hasMobileSwitch) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, MobileSwitch);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MobileSwitchOperator_C ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MobileSwitchOperator_C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MobileSwitchOperator_C MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MobileSwitchOperator_C prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MobileSwitchOperator_C, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MobileSwitchOperator_C cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MobileSwitchOperator_C result;
      
      private MobileSwitchOperator_C PrepareBuilder() {
        if (resultIsReadOnly) {
          MobileSwitchOperator_C original = result;
          result = new MobileSwitchOperator_C();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MobileSwitchOperator_C MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.MobileSwitchOperator_C.Descriptor; }
      }
      
      public override MobileSwitchOperator_C DefaultInstanceForType {
        get { return global::ProtoCmd.Service.MobileSwitchOperator_C.DefaultInstance; }
      }
      
      public override MobileSwitchOperator_C BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MobileSwitchOperator_C) {
          return MergeFrom((MobileSwitchOperator_C) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MobileSwitchOperator_C other) {
        if (other == global::ProtoCmd.Service.MobileSwitchOperator_C.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOperatorType) {
          OperatorType = other.OperatorType;
        }
        if (other.HasMobileSwitch) {
          MergeMobileSwitch(other.MobileSwitch);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mobileSwitchOperatorCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mobileSwitchOperatorCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOperatorType = input.ReadInt32(ref result.operatorType_);
              break;
            }
            case 18: {
              global::ProtoCmd.Service.MobileSwitch.Builder subBuilder = global::ProtoCmd.Service.MobileSwitch.CreateBuilder();
              if (result.hasMobileSwitch) {
                subBuilder.MergeFrom(MobileSwitch);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MobileSwitch = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOperatorType {
        get { return result.hasOperatorType; }
      }
      public int OperatorType {
        get { return result.OperatorType; }
        set { SetOperatorType(value); }
      }
      public Builder SetOperatorType(int value) {
        PrepareBuilder();
        result.hasOperatorType = true;
        result.operatorType_ = value;
        return this;
      }
      public Builder ClearOperatorType() {
        PrepareBuilder();
        result.hasOperatorType = false;
        result.operatorType_ = 0;
        return this;
      }
      
      public bool HasMobileSwitch {
       get { return result.hasMobileSwitch; }
      }
      public global::ProtoCmd.Service.MobileSwitch MobileSwitch {
        get { return result.MobileSwitch; }
        set { SetMobileSwitch(value); }
      }
      public Builder SetMobileSwitch(global::ProtoCmd.Service.MobileSwitch value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMobileSwitch = true;
        result.mobileSwitch_ = value;
        return this;
      }
      public Builder SetMobileSwitch(global::ProtoCmd.Service.MobileSwitch.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMobileSwitch = true;
        result.mobileSwitch_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMobileSwitch(global::ProtoCmd.Service.MobileSwitch value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMobileSwitch &&
            result.mobileSwitch_ != global::ProtoCmd.Service.MobileSwitch.DefaultInstance) {
            result.mobileSwitch_ = global::ProtoCmd.Service.MobileSwitch.CreateBuilder(result.mobileSwitch_).MergeFrom(value).BuildPartial();
        } else {
          result.mobileSwitch_ = value;
        }
        result.hasMobileSwitch = true;
        return this;
      }
      public Builder ClearMobileSwitch() {
        PrepareBuilder();
        result.hasMobileSwitch = false;
        result.mobileSwitch_ = null;
        return this;
      }
    }
    static MobileSwitchOperator_C() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MobileSwitchOperator_S : pb::GeneratedMessage<MobileSwitchOperator_S, MobileSwitchOperator_S.Builder> {
    private MobileSwitchOperator_S() { }
    private static readonly MobileSwitchOperator_S defaultInstance = new MobileSwitchOperator_S().MakeReadOnly();
    private static readonly string[] _mobileSwitchOperatorSFieldNames = new string[] { "mobile_switch", "operator_type", "suc" };
    private static readonly uint[] _mobileSwitchOperatorSFieldTags = new uint[] { 18, 8, 24 };
    public static MobileSwitchOperator_S DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MobileSwitchOperator_S DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MobileSwitchOperator_S ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_MobileSwitchOperator_S__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MobileSwitchOperator_S, MobileSwitchOperator_S.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_MobileSwitchOperator_S__FieldAccessorTable; }
    }
    
    public const int OperatorTypeFieldNumber = 1;
    private bool hasOperatorType;
    private int operatorType_;
    public bool HasOperatorType {
      get { return hasOperatorType; }
    }
    public int OperatorType {
      get { return operatorType_; }
    }
    
    public const int MobileSwitchFieldNumber = 2;
    private bool hasMobileSwitch;
    private global::ProtoCmd.Service.MobileSwitch mobileSwitch_;
    public bool HasMobileSwitch {
      get { return hasMobileSwitch; }
    }
    public global::ProtoCmd.Service.MobileSwitch MobileSwitch {
      get { return mobileSwitch_ ?? global::ProtoCmd.Service.MobileSwitch.DefaultInstance; }
    }
    
    public const int SucFieldNumber = 3;
    private bool hasSuc;
    private bool suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public bool Suc {
      get { return suc_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mobileSwitchOperatorSFieldNames;
      if (hasOperatorType) {
        output.WriteInt32(1, field_names[1], OperatorType);
      }
      if (hasMobileSwitch) {
        output.WriteMessage(2, field_names[0], MobileSwitch);
      }
      if (hasSuc) {
        output.WriteBool(3, field_names[2], Suc);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOperatorType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, OperatorType);
      }
      if (hasMobileSwitch) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, MobileSwitch);
      }
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Suc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MobileSwitchOperator_S ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MobileSwitchOperator_S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MobileSwitchOperator_S MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MobileSwitchOperator_S prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MobileSwitchOperator_S, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MobileSwitchOperator_S cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MobileSwitchOperator_S result;
      
      private MobileSwitchOperator_S PrepareBuilder() {
        if (resultIsReadOnly) {
          MobileSwitchOperator_S original = result;
          result = new MobileSwitchOperator_S();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MobileSwitchOperator_S MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.MobileSwitchOperator_S.Descriptor; }
      }
      
      public override MobileSwitchOperator_S DefaultInstanceForType {
        get { return global::ProtoCmd.Service.MobileSwitchOperator_S.DefaultInstance; }
      }
      
      public override MobileSwitchOperator_S BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MobileSwitchOperator_S) {
          return MergeFrom((MobileSwitchOperator_S) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MobileSwitchOperator_S other) {
        if (other == global::ProtoCmd.Service.MobileSwitchOperator_S.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOperatorType) {
          OperatorType = other.OperatorType;
        }
        if (other.HasMobileSwitch) {
          MergeMobileSwitch(other.MobileSwitch);
        }
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mobileSwitchOperatorSFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mobileSwitchOperatorSFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOperatorType = input.ReadInt32(ref result.operatorType_);
              break;
            }
            case 18: {
              global::ProtoCmd.Service.MobileSwitch.Builder subBuilder = global::ProtoCmd.Service.MobileSwitch.CreateBuilder();
              if (result.hasMobileSwitch) {
                subBuilder.MergeFrom(MobileSwitch);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MobileSwitch = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasSuc = input.ReadBool(ref result.suc_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOperatorType {
        get { return result.hasOperatorType; }
      }
      public int OperatorType {
        get { return result.OperatorType; }
        set { SetOperatorType(value); }
      }
      public Builder SetOperatorType(int value) {
        PrepareBuilder();
        result.hasOperatorType = true;
        result.operatorType_ = value;
        return this;
      }
      public Builder ClearOperatorType() {
        PrepareBuilder();
        result.hasOperatorType = false;
        result.operatorType_ = 0;
        return this;
      }
      
      public bool HasMobileSwitch {
       get { return result.hasMobileSwitch; }
      }
      public global::ProtoCmd.Service.MobileSwitch MobileSwitch {
        get { return result.MobileSwitch; }
        set { SetMobileSwitch(value); }
      }
      public Builder SetMobileSwitch(global::ProtoCmd.Service.MobileSwitch value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMobileSwitch = true;
        result.mobileSwitch_ = value;
        return this;
      }
      public Builder SetMobileSwitch(global::ProtoCmd.Service.MobileSwitch.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMobileSwitch = true;
        result.mobileSwitch_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMobileSwitch(global::ProtoCmd.Service.MobileSwitch value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMobileSwitch &&
            result.mobileSwitch_ != global::ProtoCmd.Service.MobileSwitch.DefaultInstance) {
            result.mobileSwitch_ = global::ProtoCmd.Service.MobileSwitch.CreateBuilder(result.mobileSwitch_).MergeFrom(value).BuildPartial();
        } else {
          result.mobileSwitch_ = value;
        }
        result.hasMobileSwitch = true;
        return this;
      }
      public Builder ClearMobileSwitch() {
        PrepareBuilder();
        result.hasMobileSwitch = false;
        result.mobileSwitch_ = null;
        return this;
      }
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public bool Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(bool value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = false;
        return this;
      }
    }
    static MobileSwitchOperator_S() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetHerocraftTwiceOpenReq : pb::GeneratedMessage<BGSetHerocraftTwiceOpenReq, BGSetHerocraftTwiceOpenReq.Builder> {
    private BGSetHerocraftTwiceOpenReq() { }
    private static readonly BGSetHerocraftTwiceOpenReq defaultInstance = new BGSetHerocraftTwiceOpenReq().MakeReadOnly();
    private static readonly string[] _bGSetHerocraftTwiceOpenReqFieldNames = new string[] { "isOpen" };
    private static readonly uint[] _bGSetHerocraftTwiceOpenReqFieldTags = new uint[] { 8 };
    public static BGSetHerocraftTwiceOpenReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetHerocraftTwiceOpenReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetHerocraftTwiceOpenReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetHerocraftTwiceOpenReq, BGSetHerocraftTwiceOpenReq.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenReq__FieldAccessorTable; }
    }
    
    public const int IsOpenFieldNumber = 1;
    private bool hasIsOpen;
    private int isOpen_;
    public bool HasIsOpen {
      get { return hasIsOpen; }
    }
    public int IsOpen {
      get { return isOpen_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetHerocraftTwiceOpenReqFieldNames;
      if (hasIsOpen) {
        output.WriteInt32(1, field_names[0], IsOpen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsOpen) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, IsOpen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetHerocraftTwiceOpenReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetHerocraftTwiceOpenReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetHerocraftTwiceOpenReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetHerocraftTwiceOpenReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetHerocraftTwiceOpenReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetHerocraftTwiceOpenReq result;
      
      private BGSetHerocraftTwiceOpenReq PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetHerocraftTwiceOpenReq original = result;
          result = new BGSetHerocraftTwiceOpenReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetHerocraftTwiceOpenReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetHerocraftTwiceOpenReq.Descriptor; }
      }
      
      public override BGSetHerocraftTwiceOpenReq DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetHerocraftTwiceOpenReq.DefaultInstance; }
      }
      
      public override BGSetHerocraftTwiceOpenReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetHerocraftTwiceOpenReq) {
          return MergeFrom((BGSetHerocraftTwiceOpenReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetHerocraftTwiceOpenReq other) {
        if (other == global::ProtoCmd.Service.BGSetHerocraftTwiceOpenReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsOpen) {
          IsOpen = other.IsOpen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetHerocraftTwiceOpenReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetHerocraftTwiceOpenReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsOpen = input.ReadInt32(ref result.isOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsOpen {
        get { return result.hasIsOpen; }
      }
      public int IsOpen {
        get { return result.IsOpen; }
        set { SetIsOpen(value); }
      }
      public Builder SetIsOpen(int value) {
        PrepareBuilder();
        result.hasIsOpen = true;
        result.isOpen_ = value;
        return this;
      }
      public Builder ClearIsOpen() {
        PrepareBuilder();
        result.hasIsOpen = false;
        result.isOpen_ = 0;
        return this;
      }
    }
    static BGSetHerocraftTwiceOpenReq() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetHerocraftTwiceOpenRes : pb::GeneratedMessage<BGSetHerocraftTwiceOpenRes, BGSetHerocraftTwiceOpenRes.Builder> {
    private BGSetHerocraftTwiceOpenRes() { }
    private static readonly BGSetHerocraftTwiceOpenRes defaultInstance = new BGSetHerocraftTwiceOpenRes().MakeReadOnly();
    private static readonly string[] _bGSetHerocraftTwiceOpenResFieldNames = new string[] { "currStatus", "suc" };
    private static readonly uint[] _bGSetHerocraftTwiceOpenResFieldTags = new uint[] { 16, 8 };
    public static BGSetHerocraftTwiceOpenRes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetHerocraftTwiceOpenRes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetHerocraftTwiceOpenRes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenRes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetHerocraftTwiceOpenRes, BGSetHerocraftTwiceOpenRes.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetHerocraftTwiceOpenRes__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private int suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public int Suc {
      get { return suc_; }
    }
    
    public const int CurrStatusFieldNumber = 2;
    private bool hasCurrStatus;
    private int currStatus_;
    public bool HasCurrStatus {
      get { return hasCurrStatus; }
    }
    public int CurrStatus {
      get { return currStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetHerocraftTwiceOpenResFieldNames;
      if (hasSuc) {
        output.WriteInt32(1, field_names[1], Suc);
      }
      if (hasCurrStatus) {
        output.WriteInt32(2, field_names[0], CurrStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Suc);
      }
      if (hasCurrStatus) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CurrStatus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetHerocraftTwiceOpenRes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetHerocraftTwiceOpenRes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetHerocraftTwiceOpenRes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetHerocraftTwiceOpenRes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetHerocraftTwiceOpenRes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetHerocraftTwiceOpenRes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetHerocraftTwiceOpenRes result;
      
      private BGSetHerocraftTwiceOpenRes PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetHerocraftTwiceOpenRes original = result;
          result = new BGSetHerocraftTwiceOpenRes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetHerocraftTwiceOpenRes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetHerocraftTwiceOpenRes.Descriptor; }
      }
      
      public override BGSetHerocraftTwiceOpenRes DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetHerocraftTwiceOpenRes.DefaultInstance; }
      }
      
      public override BGSetHerocraftTwiceOpenRes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetHerocraftTwiceOpenRes) {
          return MergeFrom((BGSetHerocraftTwiceOpenRes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetHerocraftTwiceOpenRes other) {
        if (other == global::ProtoCmd.Service.BGSetHerocraftTwiceOpenRes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        if (other.HasCurrStatus) {
          CurrStatus = other.CurrStatus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetHerocraftTwiceOpenResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetHerocraftTwiceOpenResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadInt32(ref result.suc_);
              break;
            }
            case 16: {
              result.hasCurrStatus = input.ReadInt32(ref result.currStatus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public int Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(int value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = 0;
        return this;
      }
      
      public bool HasCurrStatus {
        get { return result.hasCurrStatus; }
      }
      public int CurrStatus {
        get { return result.CurrStatus; }
        set { SetCurrStatus(value); }
      }
      public Builder SetCurrStatus(int value) {
        PrepareBuilder();
        result.hasCurrStatus = true;
        result.currStatus_ = value;
        return this;
      }
      public Builder ClearCurrStatus() {
        PrepareBuilder();
        result.hasCurrStatus = false;
        result.currStatus_ = 0;
        return this;
      }
    }
    static BGSetHerocraftTwiceOpenRes() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetMidautumnFestivalOpenReq : pb::GeneratedMessage<BGSetMidautumnFestivalOpenReq, BGSetMidautumnFestivalOpenReq.Builder> {
    private BGSetMidautumnFestivalOpenReq() { }
    private static readonly BGSetMidautumnFestivalOpenReq defaultInstance = new BGSetMidautumnFestivalOpenReq().MakeReadOnly();
    private static readonly string[] _bGSetMidautumnFestivalOpenReqFieldNames = new string[] { "isOpen" };
    private static readonly uint[] _bGSetMidautumnFestivalOpenReqFieldTags = new uint[] { 8 };
    public static BGSetMidautumnFestivalOpenReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetMidautumnFestivalOpenReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetMidautumnFestivalOpenReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetMidautumnFestivalOpenReq, BGSetMidautumnFestivalOpenReq.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenReq__FieldAccessorTable; }
    }
    
    public const int IsOpenFieldNumber = 1;
    private bool hasIsOpen;
    private int isOpen_;
    public bool HasIsOpen {
      get { return hasIsOpen; }
    }
    public int IsOpen {
      get { return isOpen_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetMidautumnFestivalOpenReqFieldNames;
      if (hasIsOpen) {
        output.WriteInt32(1, field_names[0], IsOpen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIsOpen) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, IsOpen);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetMidautumnFestivalOpenReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetMidautumnFestivalOpenReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetMidautumnFestivalOpenReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetMidautumnFestivalOpenReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetMidautumnFestivalOpenReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetMidautumnFestivalOpenReq result;
      
      private BGSetMidautumnFestivalOpenReq PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetMidautumnFestivalOpenReq original = result;
          result = new BGSetMidautumnFestivalOpenReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetMidautumnFestivalOpenReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetMidautumnFestivalOpenReq.Descriptor; }
      }
      
      public override BGSetMidautumnFestivalOpenReq DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetMidautumnFestivalOpenReq.DefaultInstance; }
      }
      
      public override BGSetMidautumnFestivalOpenReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetMidautumnFestivalOpenReq) {
          return MergeFrom((BGSetMidautumnFestivalOpenReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetMidautumnFestivalOpenReq other) {
        if (other == global::ProtoCmd.Service.BGSetMidautumnFestivalOpenReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsOpen) {
          IsOpen = other.IsOpen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetMidautumnFestivalOpenReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetMidautumnFestivalOpenReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsOpen = input.ReadInt32(ref result.isOpen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsOpen {
        get { return result.hasIsOpen; }
      }
      public int IsOpen {
        get { return result.IsOpen; }
        set { SetIsOpen(value); }
      }
      public Builder SetIsOpen(int value) {
        PrepareBuilder();
        result.hasIsOpen = true;
        result.isOpen_ = value;
        return this;
      }
      public Builder ClearIsOpen() {
        PrepareBuilder();
        result.hasIsOpen = false;
        result.isOpen_ = 0;
        return this;
      }
    }
    static BGSetMidautumnFestivalOpenReq() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BGSetMidautumnFestivalOpenRes : pb::GeneratedMessage<BGSetMidautumnFestivalOpenRes, BGSetMidautumnFestivalOpenRes.Builder> {
    private BGSetMidautumnFestivalOpenRes() { }
    private static readonly BGSetMidautumnFestivalOpenRes defaultInstance = new BGSetMidautumnFestivalOpenRes().MakeReadOnly();
    private static readonly string[] _bGSetMidautumnFestivalOpenResFieldNames = new string[] { "currStatus", "suc" };
    private static readonly uint[] _bGSetMidautumnFestivalOpenResFieldTags = new uint[] { 16, 8 };
    public static BGSetMidautumnFestivalOpenRes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BGSetMidautumnFestivalOpenRes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BGSetMidautumnFestivalOpenRes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenRes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BGSetMidautumnFestivalOpenRes, BGSetMidautumnFestivalOpenRes.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_BGSetMidautumnFestivalOpenRes__FieldAccessorTable; }
    }
    
    public const int SucFieldNumber = 1;
    private bool hasSuc;
    private int suc_;
    public bool HasSuc {
      get { return hasSuc; }
    }
    public int Suc {
      get { return suc_; }
    }
    
    public const int CurrStatusFieldNumber = 2;
    private bool hasCurrStatus;
    private int currStatus_;
    public bool HasCurrStatus {
      get { return hasCurrStatus; }
    }
    public int CurrStatus {
      get { return currStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGSetMidautumnFestivalOpenResFieldNames;
      if (hasSuc) {
        output.WriteInt32(1, field_names[1], Suc);
      }
      if (hasCurrStatus) {
        output.WriteInt32(2, field_names[0], CurrStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuc) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Suc);
      }
      if (hasCurrStatus) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CurrStatus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BGSetMidautumnFestivalOpenRes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BGSetMidautumnFestivalOpenRes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BGSetMidautumnFestivalOpenRes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BGSetMidautumnFestivalOpenRes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BGSetMidautumnFestivalOpenRes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BGSetMidautumnFestivalOpenRes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BGSetMidautumnFestivalOpenRes result;
      
      private BGSetMidautumnFestivalOpenRes PrepareBuilder() {
        if (resultIsReadOnly) {
          BGSetMidautumnFestivalOpenRes original = result;
          result = new BGSetMidautumnFestivalOpenRes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BGSetMidautumnFestivalOpenRes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.BGSetMidautumnFestivalOpenRes.Descriptor; }
      }
      
      public override BGSetMidautumnFestivalOpenRes DefaultInstanceForType {
        get { return global::ProtoCmd.Service.BGSetMidautumnFestivalOpenRes.DefaultInstance; }
      }
      
      public override BGSetMidautumnFestivalOpenRes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BGSetMidautumnFestivalOpenRes) {
          return MergeFrom((BGSetMidautumnFestivalOpenRes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BGSetMidautumnFestivalOpenRes other) {
        if (other == global::ProtoCmd.Service.BGSetMidautumnFestivalOpenRes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuc) {
          Suc = other.Suc;
        }
        if (other.HasCurrStatus) {
          CurrStatus = other.CurrStatus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGSetMidautumnFestivalOpenResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGSetMidautumnFestivalOpenResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuc = input.ReadInt32(ref result.suc_);
              break;
            }
            case 16: {
              result.hasCurrStatus = input.ReadInt32(ref result.currStatus_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSuc {
        get { return result.hasSuc; }
      }
      public int Suc {
        get { return result.Suc; }
        set { SetSuc(value); }
      }
      public Builder SetSuc(int value) {
        PrepareBuilder();
        result.hasSuc = true;
        result.suc_ = value;
        return this;
      }
      public Builder ClearSuc() {
        PrepareBuilder();
        result.hasSuc = false;
        result.suc_ = 0;
        return this;
      }
      
      public bool HasCurrStatus {
        get { return result.hasCurrStatus; }
      }
      public int CurrStatus {
        get { return result.CurrStatus; }
        set { SetCurrStatus(value); }
      }
      public Builder SetCurrStatus(int value) {
        PrepareBuilder();
        result.hasCurrStatus = true;
        result.currStatus_ = value;
        return this;
      }
      public Builder ClearCurrStatus() {
        PrepareBuilder();
        result.hasCurrStatus = false;
        result.currStatus_ = 0;
        return this;
      }
    }
    static BGSetMidautumnFestivalOpenRes() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryRobotStatu : pb::GeneratedMessage<QueryRobotStatu, QueryRobotStatu.Builder> {
    private QueryRobotStatu() { }
    private static readonly QueryRobotStatu defaultInstance = new QueryRobotStatu().MakeReadOnly();
    private static readonly string[] _queryRobotStatuFieldNames = new string[] { "module_type" };
    private static readonly uint[] _queryRobotStatuFieldTags = new uint[] { 8 };
    public static QueryRobotStatu DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryRobotStatu DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryRobotStatu ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_QueryRobotStatu__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryRobotStatu, QueryRobotStatu.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_QueryRobotStatu__FieldAccessorTable; }
    }
    
    public const int ModuleTypeFieldNumber = 1;
    private bool hasModuleType;
    private uint moduleType_;
    public bool HasModuleType {
      get { return hasModuleType; }
    }
    [global::System.CLSCompliant(false)]
    public uint ModuleType {
      get { return moduleType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _queryRobotStatuFieldNames;
      if (hasModuleType) {
        output.WriteUInt32(1, field_names[0], ModuleType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasModuleType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ModuleType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static QueryRobotStatu ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryRobotStatu ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryRobotStatu ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryRobotStatu ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryRobotStatu ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryRobotStatu ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryRobotStatu ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryRobotStatu ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryRobotStatu ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryRobotStatu ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryRobotStatu MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryRobotStatu prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryRobotStatu, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryRobotStatu cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryRobotStatu result;
      
      private QueryRobotStatu PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryRobotStatu original = result;
          result = new QueryRobotStatu();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryRobotStatu MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.QueryRobotStatu.Descriptor; }
      }
      
      public override QueryRobotStatu DefaultInstanceForType {
        get { return global::ProtoCmd.Service.QueryRobotStatu.DefaultInstance; }
      }
      
      public override QueryRobotStatu BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryRobotStatu) {
          return MergeFrom((QueryRobotStatu) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryRobotStatu other) {
        if (other == global::ProtoCmd.Service.QueryRobotStatu.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasModuleType) {
          ModuleType = other.ModuleType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryRobotStatuFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryRobotStatuFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasModuleType = input.ReadUInt32(ref result.moduleType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasModuleType {
        get { return result.hasModuleType; }
      }
      [global::System.CLSCompliant(false)]
      public uint ModuleType {
        get { return result.ModuleType; }
        set { SetModuleType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetModuleType(uint value) {
        PrepareBuilder();
        result.hasModuleType = true;
        result.moduleType_ = value;
        return this;
      }
      public Builder ClearModuleType() {
        PrepareBuilder();
        result.hasModuleType = false;
        result.moduleType_ = 0;
        return this;
      }
    }
    static QueryRobotStatu() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ModifyRobotConfig : pb::GeneratedMessage<ModifyRobotConfig, ModifyRobotConfig.Builder> {
    private ModifyRobotConfig() { }
    private static readonly ModifyRobotConfig defaultInstance = new ModifyRobotConfig().MakeReadOnly();
    private static readonly string[] _modifyRobotConfigFieldNames = new string[] { "game_type", "is_bet", "limit" };
    private static readonly uint[] _modifyRobotConfigFieldTags = new uint[] { 8, 24, 16 };
    public static ModifyRobotConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ModifyRobotConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ModifyRobotConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ModifyRobotConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ModifyRobotConfig, ModifyRobotConfig.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ModifyRobotConfig__FieldAccessorTable; }
    }
    
    public const int GameTypeFieldNumber = 1;
    private bool hasGameType;
    private uint gameType_;
    public bool HasGameType {
      get { return hasGameType; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameType {
      get { return gameType_; }
    }
    
    public const int LimitFieldNumber = 2;
    private pbc::PopsicleList<uint> limit_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> LimitList {
      get { return pbc::Lists.AsReadOnly(limit_); }
    }
    public int LimitCount {
      get { return limit_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetLimit(int index) {
      return limit_[index];
    }
    
    public const int IsBetFieldNumber = 3;
    private bool hasIsBet;
    private uint isBet_;
    public bool HasIsBet {
      get { return hasIsBet; }
    }
    [global::System.CLSCompliant(false)]
    public uint IsBet {
      get { return isBet_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _modifyRobotConfigFieldNames;
      if (hasGameType) {
        output.WriteUInt32(1, field_names[0], GameType);
      }
      if (limit_.Count > 0) {
        output.WriteUInt32Array(2, field_names[2], limit_);
      }
      if (hasIsBet) {
        output.WriteUInt32(3, field_names[1], IsBet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, GameType);
      }
      {
        int dataSize = 0;
        foreach (uint element in LimitList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * limit_.Count;
      }
      if (hasIsBet) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, IsBet);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ModifyRobotConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModifyRobotConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModifyRobotConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ModifyRobotConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ModifyRobotConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModifyRobotConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ModifyRobotConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ModifyRobotConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ModifyRobotConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ModifyRobotConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ModifyRobotConfig MakeReadOnly() {
      limit_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ModifyRobotConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ModifyRobotConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ModifyRobotConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ModifyRobotConfig result;
      
      private ModifyRobotConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          ModifyRobotConfig original = result;
          result = new ModifyRobotConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ModifyRobotConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.ModifyRobotConfig.Descriptor; }
      }
      
      public override ModifyRobotConfig DefaultInstanceForType {
        get { return global::ProtoCmd.Service.ModifyRobotConfig.DefaultInstance; }
      }
      
      public override ModifyRobotConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ModifyRobotConfig) {
          return MergeFrom((ModifyRobotConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ModifyRobotConfig other) {
        if (other == global::ProtoCmd.Service.ModifyRobotConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameType) {
          GameType = other.GameType;
        }
        if (other.limit_.Count != 0) {
          result.limit_.Add(other.limit_);
        }
        if (other.HasIsBet) {
          IsBet = other.IsBet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_modifyRobotConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _modifyRobotConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameType = input.ReadUInt32(ref result.gameType_);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.limit_);
              break;
            }
            case 24: {
              result.hasIsBet = input.ReadUInt32(ref result.isBet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameType {
        get { return result.hasGameType; }
      }
      [global::System.CLSCompliant(false)]
      public uint GameType {
        get { return result.GameType; }
        set { SetGameType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGameType(uint value) {
        PrepareBuilder();
        result.hasGameType = true;
        result.gameType_ = value;
        return this;
      }
      public Builder ClearGameType() {
        PrepareBuilder();
        result.hasGameType = false;
        result.gameType_ = 0;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> LimitList {
        get { return PrepareBuilder().limit_; }
      }
      public int LimitCount {
        get { return result.LimitCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetLimit(int index) {
        return result.GetLimit(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLimit(int index, uint value) {
        PrepareBuilder();
        result.limit_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddLimit(uint value) {
        PrepareBuilder();
        result.limit_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangeLimit(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.limit_.Add(values);
        return this;
      }
      public Builder ClearLimit() {
        PrepareBuilder();
        result.limit_.Clear();
        return this;
      }
      
      public bool HasIsBet {
        get { return result.hasIsBet; }
      }
      [global::System.CLSCompliant(false)]
      public uint IsBet {
        get { return result.IsBet; }
        set { SetIsBet(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIsBet(uint value) {
        PrepareBuilder();
        result.hasIsBet = true;
        result.isBet_ = value;
        return this;
      }
      public Builder ClearIsBet() {
        PrepareBuilder();
        result.hasIsBet = false;
        result.isBet_ = 0;
        return this;
      }
    }
    static ModifyRobotConfig() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginRequest : pb::GeneratedMessage<LoginRequest, LoginRequest.Builder> {
    private LoginRequest() { }
    private static readonly LoginRequest defaultInstance = new LoginRequest().MakeReadOnly();
    private static readonly string[] _loginRequestFieldNames = new string[] { "game_type", "login_cnt", "login_frequency", "strategy" };
    private static readonly uint[] _loginRequestFieldTags = new uint[] { 8, 24, 16, 32 };
    public static LoginRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_LoginRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginRequest, LoginRequest.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_LoginRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Stragety {
        TEXAS_RANDOM_JOIN = 1,
        TEXAS_QUICK_START = 2,
        TEXAS_NORMAL = 3,
      }
      
    }
    #endregion
    
    public const int GameTypeFieldNumber = 1;
    private bool hasGameType;
    private uint gameType_;
    public bool HasGameType {
      get { return hasGameType; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameType {
      get { return gameType_; }
    }
    
    public const int LoginFrequencyFieldNumber = 2;
    private bool hasLoginFrequency;
    private uint loginFrequency_;
    public bool HasLoginFrequency {
      get { return hasLoginFrequency; }
    }
    [global::System.CLSCompliant(false)]
    public uint LoginFrequency {
      get { return loginFrequency_; }
    }
    
    public const int LoginCntFieldNumber = 3;
    private bool hasLoginCnt;
    private int loginCnt_;
    public bool HasLoginCnt {
      get { return hasLoginCnt; }
    }
    public int LoginCnt {
      get { return loginCnt_; }
    }
    
    public const int StrategyFieldNumber = 4;
    private bool hasStrategy;
    private uint strategy_;
    public bool HasStrategy {
      get { return hasStrategy; }
    }
    [global::System.CLSCompliant(false)]
    public uint Strategy {
      get { return strategy_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameType) return false;
        if (!hasLoginFrequency) return false;
        if (!hasLoginCnt) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _loginRequestFieldNames;
      if (hasGameType) {
        output.WriteUInt32(1, field_names[0], GameType);
      }
      if (hasLoginFrequency) {
        output.WriteUInt32(2, field_names[2], LoginFrequency);
      }
      if (hasLoginCnt) {
        output.WriteInt32(3, field_names[1], LoginCnt);
      }
      if (hasStrategy) {
        output.WriteUInt32(4, field_names[3], Strategy);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, GameType);
      }
      if (hasLoginFrequency) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, LoginFrequency);
      }
      if (hasLoginCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, LoginCnt);
      }
      if (hasStrategy) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Strategy);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LoginRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginRequest result;
      
      private LoginRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginRequest original = result;
          result = new LoginRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.LoginRequest.Descriptor; }
      }
      
      public override LoginRequest DefaultInstanceForType {
        get { return global::ProtoCmd.Service.LoginRequest.DefaultInstance; }
      }
      
      public override LoginRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginRequest) {
          return MergeFrom((LoginRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginRequest other) {
        if (other == global::ProtoCmd.Service.LoginRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameType) {
          GameType = other.GameType;
        }
        if (other.HasLoginFrequency) {
          LoginFrequency = other.LoginFrequency;
        }
        if (other.HasLoginCnt) {
          LoginCnt = other.LoginCnt;
        }
        if (other.HasStrategy) {
          Strategy = other.Strategy;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameType = input.ReadUInt32(ref result.gameType_);
              break;
            }
            case 16: {
              result.hasLoginFrequency = input.ReadUInt32(ref result.loginFrequency_);
              break;
            }
            case 24: {
              result.hasLoginCnt = input.ReadInt32(ref result.loginCnt_);
              break;
            }
            case 32: {
              result.hasStrategy = input.ReadUInt32(ref result.strategy_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameType {
        get { return result.hasGameType; }
      }
      [global::System.CLSCompliant(false)]
      public uint GameType {
        get { return result.GameType; }
        set { SetGameType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGameType(uint value) {
        PrepareBuilder();
        result.hasGameType = true;
        result.gameType_ = value;
        return this;
      }
      public Builder ClearGameType() {
        PrepareBuilder();
        result.hasGameType = false;
        result.gameType_ = 0;
        return this;
      }
      
      public bool HasLoginFrequency {
        get { return result.hasLoginFrequency; }
      }
      [global::System.CLSCompliant(false)]
      public uint LoginFrequency {
        get { return result.LoginFrequency; }
        set { SetLoginFrequency(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLoginFrequency(uint value) {
        PrepareBuilder();
        result.hasLoginFrequency = true;
        result.loginFrequency_ = value;
        return this;
      }
      public Builder ClearLoginFrequency() {
        PrepareBuilder();
        result.hasLoginFrequency = false;
        result.loginFrequency_ = 0;
        return this;
      }
      
      public bool HasLoginCnt {
        get { return result.hasLoginCnt; }
      }
      public int LoginCnt {
        get { return result.LoginCnt; }
        set { SetLoginCnt(value); }
      }
      public Builder SetLoginCnt(int value) {
        PrepareBuilder();
        result.hasLoginCnt = true;
        result.loginCnt_ = value;
        return this;
      }
      public Builder ClearLoginCnt() {
        PrepareBuilder();
        result.hasLoginCnt = false;
        result.loginCnt_ = 0;
        return this;
      }
      
      public bool HasStrategy {
        get { return result.hasStrategy; }
      }
      [global::System.CLSCompliant(false)]
      public uint Strategy {
        get { return result.Strategy; }
        set { SetStrategy(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStrategy(uint value) {
        PrepareBuilder();
        result.hasStrategy = true;
        result.strategy_ = value;
        return this;
      }
      public Builder ClearStrategy() {
        PrepareBuilder();
        result.hasStrategy = false;
        result.strategy_ = 0;
        return this;
      }
    }
    static LoginRequest() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameStatu : pb::GeneratedMessage<GameStatu, GameStatu.Builder> {
    private GameStatu() { }
    private static readonly GameStatu defaultInstance = new GameStatu().MakeReadOnly();
    private static readonly string[] _gameStatuFieldNames = new string[] { "game_type", "is_bet", "player_cnt", "player_limit" };
    private static readonly uint[] _gameStatuFieldTags = new uint[] { 8, 32, 16, 24 };
    public static GameStatu DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameStatu DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameStatu ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_GameStatu__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameStatu, GameStatu.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_GameStatu__FieldAccessorTable; }
    }
    
    public const int GameTypeFieldNumber = 1;
    private bool hasGameType;
    private uint gameType_;
    public bool HasGameType {
      get { return hasGameType; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameType {
      get { return gameType_; }
    }
    
    public const int PlayerCntFieldNumber = 2;
    private bool hasPlayerCnt;
    private uint playerCnt_;
    public bool HasPlayerCnt {
      get { return hasPlayerCnt; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayerCnt {
      get { return playerCnt_; }
    }
    
    public const int PlayerLimitFieldNumber = 3;
    private pbc::PopsicleList<uint> playerLimit_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> PlayerLimitList {
      get { return pbc::Lists.AsReadOnly(playerLimit_); }
    }
    public int PlayerLimitCount {
      get { return playerLimit_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetPlayerLimit(int index) {
      return playerLimit_[index];
    }
    
    public const int IsBetFieldNumber = 4;
    private bool hasIsBet;
    private uint isBet_;
    public bool HasIsBet {
      get { return hasIsBet; }
    }
    [global::System.CLSCompliant(false)]
    public uint IsBet {
      get { return isBet_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameType) return false;
        if (!hasPlayerCnt) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameStatuFieldNames;
      if (hasGameType) {
        output.WriteUInt32(1, field_names[0], GameType);
      }
      if (hasPlayerCnt) {
        output.WriteUInt32(2, field_names[2], PlayerCnt);
      }
      if (playerLimit_.Count > 0) {
        output.WriteUInt32Array(3, field_names[3], playerLimit_);
      }
      if (hasIsBet) {
        output.WriteUInt32(4, field_names[1], IsBet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, GameType);
      }
      if (hasPlayerCnt) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, PlayerCnt);
      }
      {
        int dataSize = 0;
        foreach (uint element in PlayerLimitList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * playerLimit_.Count;
      }
      if (hasIsBet) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, IsBet);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameStatu ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameStatu ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameStatu ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameStatu ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameStatu ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameStatu ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameStatu ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameStatu ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameStatu ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameStatu ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameStatu MakeReadOnly() {
      playerLimit_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameStatu prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameStatu, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameStatu cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameStatu result;
      
      private GameStatu PrepareBuilder() {
        if (resultIsReadOnly) {
          GameStatu original = result;
          result = new GameStatu();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameStatu MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.GameStatu.Descriptor; }
      }
      
      public override GameStatu DefaultInstanceForType {
        get { return global::ProtoCmd.Service.GameStatu.DefaultInstance; }
      }
      
      public override GameStatu BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameStatu) {
          return MergeFrom((GameStatu) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameStatu other) {
        if (other == global::ProtoCmd.Service.GameStatu.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameType) {
          GameType = other.GameType;
        }
        if (other.HasPlayerCnt) {
          PlayerCnt = other.PlayerCnt;
        }
        if (other.playerLimit_.Count != 0) {
          result.playerLimit_.Add(other.playerLimit_);
        }
        if (other.HasIsBet) {
          IsBet = other.IsBet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameStatuFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameStatuFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGameType = input.ReadUInt32(ref result.gameType_);
              break;
            }
            case 16: {
              result.hasPlayerCnt = input.ReadUInt32(ref result.playerCnt_);
              break;
            }
            case 26:
            case 24: {
              input.ReadUInt32Array(tag, field_name, result.playerLimit_);
              break;
            }
            case 32: {
              result.hasIsBet = input.ReadUInt32(ref result.isBet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameType {
        get { return result.hasGameType; }
      }
      [global::System.CLSCompliant(false)]
      public uint GameType {
        get { return result.GameType; }
        set { SetGameType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGameType(uint value) {
        PrepareBuilder();
        result.hasGameType = true;
        result.gameType_ = value;
        return this;
      }
      public Builder ClearGameType() {
        PrepareBuilder();
        result.hasGameType = false;
        result.gameType_ = 0;
        return this;
      }
      
      public bool HasPlayerCnt {
        get { return result.hasPlayerCnt; }
      }
      [global::System.CLSCompliant(false)]
      public uint PlayerCnt {
        get { return result.PlayerCnt; }
        set { SetPlayerCnt(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlayerCnt(uint value) {
        PrepareBuilder();
        result.hasPlayerCnt = true;
        result.playerCnt_ = value;
        return this;
      }
      public Builder ClearPlayerCnt() {
        PrepareBuilder();
        result.hasPlayerCnt = false;
        result.playerCnt_ = 0;
        return this;
      }
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> PlayerLimitList {
        get { return PrepareBuilder().playerLimit_; }
      }
      public int PlayerLimitCount {
        get { return result.PlayerLimitCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetPlayerLimit(int index) {
        return result.GetPlayerLimit(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlayerLimit(int index, uint value) {
        PrepareBuilder();
        result.playerLimit_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddPlayerLimit(uint value) {
        PrepareBuilder();
        result.playerLimit_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangePlayerLimit(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.playerLimit_.Add(values);
        return this;
      }
      public Builder ClearPlayerLimit() {
        PrepareBuilder();
        result.playerLimit_.Clear();
        return this;
      }
      
      public bool HasIsBet {
        get { return result.hasIsBet; }
      }
      [global::System.CLSCompliant(false)]
      public uint IsBet {
        get { return result.IsBet; }
        set { SetIsBet(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetIsBet(uint value) {
        PrepareBuilder();
        result.hasIsBet = true;
        result.isBet_ = value;
        return this;
      }
      public Builder ClearIsBet() {
        PrepareBuilder();
        result.hasIsBet = false;
        result.isBet_ = 0;
        return this;
      }
    }
    static GameStatu() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameOverView : pb::GeneratedMessage<GameOverView, GameOverView.Builder> {
    private GameOverView() { }
    private static readonly GameOverView defaultInstance = new GameOverView().MakeReadOnly();
    private static readonly string[] _gameOverViewFieldNames = new string[] { "player_cnt" };
    private static readonly uint[] _gameOverViewFieldTags = new uint[] { 16 };
    public static GameOverView DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameOverView DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameOverView ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_GameOverView__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameOverView, GameOverView.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_GameOverView__FieldAccessorTable; }
    }
    
    public const int PlayerCntFieldNumber = 2;
    private pbc::PopsicleList<uint> playerCnt_ = new pbc::PopsicleList<uint>();
    [global::System.CLSCompliant(false)]
    public scg::IList<uint> PlayerCntList {
      get { return pbc::Lists.AsReadOnly(playerCnt_); }
    }
    public int PlayerCntCount {
      get { return playerCnt_.Count; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetPlayerCnt(int index) {
      return playerCnt_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameOverViewFieldNames;
      if (playerCnt_.Count > 0) {
        output.WriteUInt32Array(2, field_names[0], playerCnt_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (uint element in PlayerCntList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * playerCnt_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameOverView ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameOverView ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameOverView ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameOverView ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameOverView ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameOverView ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameOverView ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameOverView ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameOverView ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameOverView ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameOverView MakeReadOnly() {
      playerCnt_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameOverView prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameOverView, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameOverView cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameOverView result;
      
      private GameOverView PrepareBuilder() {
        if (resultIsReadOnly) {
          GameOverView original = result;
          result = new GameOverView();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameOverView MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.GameOverView.Descriptor; }
      }
      
      public override GameOverView DefaultInstanceForType {
        get { return global::ProtoCmd.Service.GameOverView.DefaultInstance; }
      }
      
      public override GameOverView BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameOverView) {
          return MergeFrom((GameOverView) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameOverView other) {
        if (other == global::ProtoCmd.Service.GameOverView.DefaultInstance) return this;
        PrepareBuilder();
        if (other.playerCnt_.Count != 0) {
          result.playerCnt_.Add(other.playerCnt_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameOverViewFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameOverViewFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18:
            case 16: {
              input.ReadUInt32Array(tag, field_name, result.playerCnt_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      [global::System.CLSCompliant(false)]
      public pbc::IPopsicleList<uint> PlayerCntList {
        get { return PrepareBuilder().playerCnt_; }
      }
      public int PlayerCntCount {
        get { return result.PlayerCntCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetPlayerCnt(int index) {
        return result.GetPlayerCnt(index);
      }
      [global::System.CLSCompliant(false)]
      public Builder SetPlayerCnt(int index, uint value) {
        PrepareBuilder();
        result.playerCnt_[index] = value;
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddPlayerCnt(uint value) {
        PrepareBuilder();
        result.playerCnt_.Add(value);
        return this;
      }
      [global::System.CLSCompliant(false)]
      public Builder AddRangePlayerCnt(scg::IEnumerable<uint> values) {
        PrepareBuilder();
        result.playerCnt_.Add(values);
        return this;
      }
      public Builder ClearPlayerCnt() {
        PrepareBuilder();
        result.playerCnt_.Clear();
        return this;
      }
    }
    static GameOverView() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SystemStatu : pb::GeneratedMessage<SystemStatu, SystemStatu.Builder> {
    private SystemStatu() { }
    private static readonly SystemStatu defaultInstance = new SystemStatu().MakeReadOnly();
    private static readonly string[] _systemStatuFieldNames = new string[] { "conn_cnt", "conn_limit", "cpu_percent", "flow_rate", "mem_total", "mem_used" };
    private static readonly uint[] _systemStatuFieldTags = new uint[] { 40, 48, 8, 32, 24, 16 };
    public static SystemStatu DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SystemStatu DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SystemStatu ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_SystemStatu__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SystemStatu, SystemStatu.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_SystemStatu__FieldAccessorTable; }
    }
    
    public const int CpuPercentFieldNumber = 1;
    private bool hasCpuPercent;
    private uint cpuPercent_;
    public bool HasCpuPercent {
      get { return hasCpuPercent; }
    }
    [global::System.CLSCompliant(false)]
    public uint CpuPercent {
      get { return cpuPercent_; }
    }
    
    public const int MemUsedFieldNumber = 2;
    private bool hasMemUsed;
    private ulong memUsed_;
    public bool HasMemUsed {
      get { return hasMemUsed; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MemUsed {
      get { return memUsed_; }
    }
    
    public const int MemTotalFieldNumber = 3;
    private bool hasMemTotal;
    private ulong memTotal_;
    public bool HasMemTotal {
      get { return hasMemTotal; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MemTotal {
      get { return memTotal_; }
    }
    
    public const int FlowRateFieldNumber = 4;
    private bool hasFlowRate;
    private ulong flowRate_;
    public bool HasFlowRate {
      get { return hasFlowRate; }
    }
    [global::System.CLSCompliant(false)]
    public ulong FlowRate {
      get { return flowRate_; }
    }
    
    public const int ConnCntFieldNumber = 5;
    private bool hasConnCnt;
    private uint connCnt_;
    public bool HasConnCnt {
      get { return hasConnCnt; }
    }
    [global::System.CLSCompliant(false)]
    public uint ConnCnt {
      get { return connCnt_; }
    }
    
    public const int ConnLimitFieldNumber = 6;
    private bool hasConnLimit;
    private uint connLimit_;
    public bool HasConnLimit {
      get { return hasConnLimit; }
    }
    [global::System.CLSCompliant(false)]
    public uint ConnLimit {
      get { return connLimit_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCpuPercent) return false;
        if (!hasMemUsed) return false;
        if (!hasMemTotal) return false;
        if (!hasFlowRate) return false;
        if (!hasConnCnt) return false;
        if (!hasConnLimit) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _systemStatuFieldNames;
      if (hasCpuPercent) {
        output.WriteUInt32(1, field_names[2], CpuPercent);
      }
      if (hasMemUsed) {
        output.WriteUInt64(2, field_names[5], MemUsed);
      }
      if (hasMemTotal) {
        output.WriteUInt64(3, field_names[4], MemTotal);
      }
      if (hasFlowRate) {
        output.WriteUInt64(4, field_names[3], FlowRate);
      }
      if (hasConnCnt) {
        output.WriteUInt32(5, field_names[0], ConnCnt);
      }
      if (hasConnLimit) {
        output.WriteUInt32(6, field_names[1], ConnLimit);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCpuPercent) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CpuPercent);
      }
      if (hasMemUsed) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MemUsed);
      }
      if (hasMemTotal) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MemTotal);
      }
      if (hasFlowRate) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, FlowRate);
      }
      if (hasConnCnt) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ConnCnt);
      }
      if (hasConnLimit) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ConnLimit);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static SystemStatu ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SystemStatu ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SystemStatu ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SystemStatu ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SystemStatu ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SystemStatu ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SystemStatu ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SystemStatu ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SystemStatu ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SystemStatu ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SystemStatu MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SystemStatu prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SystemStatu, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SystemStatu cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SystemStatu result;
      
      private SystemStatu PrepareBuilder() {
        if (resultIsReadOnly) {
          SystemStatu original = result;
          result = new SystemStatu();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SystemStatu MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.SystemStatu.Descriptor; }
      }
      
      public override SystemStatu DefaultInstanceForType {
        get { return global::ProtoCmd.Service.SystemStatu.DefaultInstance; }
      }
      
      public override SystemStatu BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SystemStatu) {
          return MergeFrom((SystemStatu) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SystemStatu other) {
        if (other == global::ProtoCmd.Service.SystemStatu.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCpuPercent) {
          CpuPercent = other.CpuPercent;
        }
        if (other.HasMemUsed) {
          MemUsed = other.MemUsed;
        }
        if (other.HasMemTotal) {
          MemTotal = other.MemTotal;
        }
        if (other.HasFlowRate) {
          FlowRate = other.FlowRate;
        }
        if (other.HasConnCnt) {
          ConnCnt = other.ConnCnt;
        }
        if (other.HasConnLimit) {
          ConnLimit = other.ConnLimit;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_systemStatuFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _systemStatuFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCpuPercent = input.ReadUInt32(ref result.cpuPercent_);
              break;
            }
            case 16: {
              result.hasMemUsed = input.ReadUInt64(ref result.memUsed_);
              break;
            }
            case 24: {
              result.hasMemTotal = input.ReadUInt64(ref result.memTotal_);
              break;
            }
            case 32: {
              result.hasFlowRate = input.ReadUInt64(ref result.flowRate_);
              break;
            }
            case 40: {
              result.hasConnCnt = input.ReadUInt32(ref result.connCnt_);
              break;
            }
            case 48: {
              result.hasConnLimit = input.ReadUInt32(ref result.connLimit_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCpuPercent {
        get { return result.hasCpuPercent; }
      }
      [global::System.CLSCompliant(false)]
      public uint CpuPercent {
        get { return result.CpuPercent; }
        set { SetCpuPercent(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCpuPercent(uint value) {
        PrepareBuilder();
        result.hasCpuPercent = true;
        result.cpuPercent_ = value;
        return this;
      }
      public Builder ClearCpuPercent() {
        PrepareBuilder();
        result.hasCpuPercent = false;
        result.cpuPercent_ = 0;
        return this;
      }
      
      public bool HasMemUsed {
        get { return result.hasMemUsed; }
      }
      [global::System.CLSCompliant(false)]
      public ulong MemUsed {
        get { return result.MemUsed; }
        set { SetMemUsed(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMemUsed(ulong value) {
        PrepareBuilder();
        result.hasMemUsed = true;
        result.memUsed_ = value;
        return this;
      }
      public Builder ClearMemUsed() {
        PrepareBuilder();
        result.hasMemUsed = false;
        result.memUsed_ = 0UL;
        return this;
      }
      
      public bool HasMemTotal {
        get { return result.hasMemTotal; }
      }
      [global::System.CLSCompliant(false)]
      public ulong MemTotal {
        get { return result.MemTotal; }
        set { SetMemTotal(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMemTotal(ulong value) {
        PrepareBuilder();
        result.hasMemTotal = true;
        result.memTotal_ = value;
        return this;
      }
      public Builder ClearMemTotal() {
        PrepareBuilder();
        result.hasMemTotal = false;
        result.memTotal_ = 0UL;
        return this;
      }
      
      public bool HasFlowRate {
        get { return result.hasFlowRate; }
      }
      [global::System.CLSCompliant(false)]
      public ulong FlowRate {
        get { return result.FlowRate; }
        set { SetFlowRate(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFlowRate(ulong value) {
        PrepareBuilder();
        result.hasFlowRate = true;
        result.flowRate_ = value;
        return this;
      }
      public Builder ClearFlowRate() {
        PrepareBuilder();
        result.hasFlowRate = false;
        result.flowRate_ = 0UL;
        return this;
      }
      
      public bool HasConnCnt {
        get { return result.hasConnCnt; }
      }
      [global::System.CLSCompliant(false)]
      public uint ConnCnt {
        get { return result.ConnCnt; }
        set { SetConnCnt(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetConnCnt(uint value) {
        PrepareBuilder();
        result.hasConnCnt = true;
        result.connCnt_ = value;
        return this;
      }
      public Builder ClearConnCnt() {
        PrepareBuilder();
        result.hasConnCnt = false;
        result.connCnt_ = 0;
        return this;
      }
      
      public bool HasConnLimit {
        get { return result.hasConnLimit; }
      }
      [global::System.CLSCompliant(false)]
      public uint ConnLimit {
        get { return result.ConnLimit; }
        set { SetConnLimit(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetConnLimit(uint value) {
        PrepareBuilder();
        result.hasConnLimit = true;
        result.connLimit_ = value;
        return this;
      }
      public Builder ClearConnLimit() {
        PrepareBuilder();
        result.hasConnLimit = false;
        result.connLimit_ = 0;
        return this;
      }
    }
    static SystemStatu() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RobotStatus : pb::GeneratedMessage<RobotStatus, RobotStatus.Builder> {
    private RobotStatus() { }
    private static readonly RobotStatus defaultInstance = new RobotStatus().MakeReadOnly();
    private static readonly string[] _robotStatusFieldNames = new string[] { "game_overview", "game_statu", "module_type", "system_statu" };
    private static readonly uint[] _robotStatusFieldTags = new uint[] { 26, 18, 8, 34 };
    public static RobotStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RobotStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RobotStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_RobotStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RobotStatus, RobotStatus.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_RobotStatus__FieldAccessorTable; }
    }
    
    public const int ModuleTypeFieldNumber = 1;
    private bool hasModuleType;
    private uint moduleType_;
    public bool HasModuleType {
      get { return hasModuleType; }
    }
    [global::System.CLSCompliant(false)]
    public uint ModuleType {
      get { return moduleType_; }
    }
    
    public const int GameStatuFieldNumber = 2;
    private pbc::PopsicleList<global::ProtoCmd.Service.GameStatu> gameStatu_ = new pbc::PopsicleList<global::ProtoCmd.Service.GameStatu>();
    public scg::IList<global::ProtoCmd.Service.GameStatu> GameStatuList {
      get { return gameStatu_; }
    }
    public int GameStatuCount {
      get { return gameStatu_.Count; }
    }
    public global::ProtoCmd.Service.GameStatu GetGameStatu(int index) {
      return gameStatu_[index];
    }
    
    public const int GameOverviewFieldNumber = 3;
    private bool hasGameOverview;
    private global::ProtoCmd.Service.GameOverView gameOverview_;
    public bool HasGameOverview {
      get { return hasGameOverview; }
    }
    public global::ProtoCmd.Service.GameOverView GameOverview {
      get { return gameOverview_ ?? global::ProtoCmd.Service.GameOverView.DefaultInstance; }
    }
    
    public const int SystemStatuFieldNumber = 4;
    private bool hasSystemStatu;
    private global::ProtoCmd.Service.SystemStatu systemStatu_;
    public bool HasSystemStatu {
      get { return hasSystemStatu; }
    }
    public global::ProtoCmd.Service.SystemStatu SystemStatu {
      get { return systemStatu_ ?? global::ProtoCmd.Service.SystemStatu.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::ProtoCmd.Service.GameStatu element in GameStatuList) {
          if (!element.IsInitialized) return false;
        }
        if (HasSystemStatu) {
          if (!SystemStatu.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _robotStatusFieldNames;
      if (hasModuleType) {
        output.WriteUInt32(1, field_names[2], ModuleType);
      }
      if (gameStatu_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], gameStatu_);
      }
      if (hasGameOverview) {
        output.WriteMessage(3, field_names[0], GameOverview);
      }
      if (hasSystemStatu) {
        output.WriteMessage(4, field_names[3], SystemStatu);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasModuleType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ModuleType);
      }
      foreach (global::ProtoCmd.Service.GameStatu element in GameStatuList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasGameOverview) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, GameOverview);
      }
      if (hasSystemStatu) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, SystemStatu);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RobotStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RobotStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RobotStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RobotStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RobotStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RobotStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RobotStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RobotStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RobotStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RobotStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RobotStatus MakeReadOnly() {
      gameStatu_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RobotStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RobotStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RobotStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RobotStatus result;
      
      private RobotStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          RobotStatus original = result;
          result = new RobotStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RobotStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.RobotStatus.Descriptor; }
      }
      
      public override RobotStatus DefaultInstanceForType {
        get { return global::ProtoCmd.Service.RobotStatus.DefaultInstance; }
      }
      
      public override RobotStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RobotStatus) {
          return MergeFrom((RobotStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RobotStatus other) {
        if (other == global::ProtoCmd.Service.RobotStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasModuleType) {
          ModuleType = other.ModuleType;
        }
        if (other.gameStatu_.Count != 0) {
          result.gameStatu_.Add(other.gameStatu_);
        }
        if (other.HasGameOverview) {
          MergeGameOverview(other.GameOverview);
        }
        if (other.HasSystemStatu) {
          MergeSystemStatu(other.SystemStatu);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_robotStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _robotStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasModuleType = input.ReadUInt32(ref result.moduleType_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.gameStatu_, global::ProtoCmd.Service.GameStatu.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              global::ProtoCmd.Service.GameOverView.Builder subBuilder = global::ProtoCmd.Service.GameOverView.CreateBuilder();
              if (result.hasGameOverview) {
                subBuilder.MergeFrom(GameOverview);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameOverview = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::ProtoCmd.Service.SystemStatu.Builder subBuilder = global::ProtoCmd.Service.SystemStatu.CreateBuilder();
              if (result.hasSystemStatu) {
                subBuilder.MergeFrom(SystemStatu);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SystemStatu = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasModuleType {
        get { return result.hasModuleType; }
      }
      [global::System.CLSCompliant(false)]
      public uint ModuleType {
        get { return result.ModuleType; }
        set { SetModuleType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetModuleType(uint value) {
        PrepareBuilder();
        result.hasModuleType = true;
        result.moduleType_ = value;
        return this;
      }
      public Builder ClearModuleType() {
        PrepareBuilder();
        result.hasModuleType = false;
        result.moduleType_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::ProtoCmd.Service.GameStatu> GameStatuList {
        get { return PrepareBuilder().gameStatu_; }
      }
      public int GameStatuCount {
        get { return result.GameStatuCount; }
      }
      public global::ProtoCmd.Service.GameStatu GetGameStatu(int index) {
        return result.GetGameStatu(index);
      }
      public Builder SetGameStatu(int index, global::ProtoCmd.Service.GameStatu value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.gameStatu_[index] = value;
        return this;
      }
      public Builder SetGameStatu(int index, global::ProtoCmd.Service.GameStatu.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.gameStatu_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGameStatu(global::ProtoCmd.Service.GameStatu value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.gameStatu_.Add(value);
        return this;
      }
      public Builder AddGameStatu(global::ProtoCmd.Service.GameStatu.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.gameStatu_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGameStatu(scg::IEnumerable<global::ProtoCmd.Service.GameStatu> values) {
        PrepareBuilder();
        result.gameStatu_.Add(values);
        return this;
      }
      public Builder ClearGameStatu() {
        PrepareBuilder();
        result.gameStatu_.Clear();
        return this;
      }
      
      public bool HasGameOverview {
       get { return result.hasGameOverview; }
      }
      public global::ProtoCmd.Service.GameOverView GameOverview {
        get { return result.GameOverview; }
        set { SetGameOverview(value); }
      }
      public Builder SetGameOverview(global::ProtoCmd.Service.GameOverView value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameOverview = true;
        result.gameOverview_ = value;
        return this;
      }
      public Builder SetGameOverview(global::ProtoCmd.Service.GameOverView.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameOverview = true;
        result.gameOverview_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameOverview(global::ProtoCmd.Service.GameOverView value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameOverview &&
            result.gameOverview_ != global::ProtoCmd.Service.GameOverView.DefaultInstance) {
            result.gameOverview_ = global::ProtoCmd.Service.GameOverView.CreateBuilder(result.gameOverview_).MergeFrom(value).BuildPartial();
        } else {
          result.gameOverview_ = value;
        }
        result.hasGameOverview = true;
        return this;
      }
      public Builder ClearGameOverview() {
        PrepareBuilder();
        result.hasGameOverview = false;
        result.gameOverview_ = null;
        return this;
      }
      
      public bool HasSystemStatu {
       get { return result.hasSystemStatu; }
      }
      public global::ProtoCmd.Service.SystemStatu SystemStatu {
        get { return result.SystemStatu; }
        set { SetSystemStatu(value); }
      }
      public Builder SetSystemStatu(global::ProtoCmd.Service.SystemStatu value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSystemStatu = true;
        result.systemStatu_ = value;
        return this;
      }
      public Builder SetSystemStatu(global::ProtoCmd.Service.SystemStatu.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSystemStatu = true;
        result.systemStatu_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSystemStatu(global::ProtoCmd.Service.SystemStatu value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSystemStatu &&
            result.systemStatu_ != global::ProtoCmd.Service.SystemStatu.DefaultInstance) {
            result.systemStatu_ = global::ProtoCmd.Service.SystemStatu.CreateBuilder(result.systemStatu_).MergeFrom(value).BuildPartial();
        } else {
          result.systemStatu_ = value;
        }
        result.hasSystemStatu = true;
        return this;
      }
      public Builder ClearSystemStatu() {
        PrepareBuilder();
        result.hasSystemStatu = false;
        result.systemStatu_ = null;
        return this;
      }
    }
    static RobotStatus() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ErrorMessage : pb::GeneratedMessage<ErrorMessage, ErrorMessage.Builder> {
    private ErrorMessage() { }
    private static readonly ErrorMessage defaultInstance = new ErrorMessage().MakeReadOnly();
    private static readonly string[] _errorMessageFieldNames = new string[] { "error_message" };
    private static readonly uint[] _errorMessageFieldTags = new uint[] { 10 };
    public static ErrorMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ErrorMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ErrorMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ErrorMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ErrorMessage, ErrorMessage.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_ErrorMessage__FieldAccessorTable; }
    }
    
    public const int ErrorMessage_FieldNumber = 1;
    private bool hasErrorMessage_;
    private string errorMessage_ = "";
    public bool HasErrorMessage_ {
      get { return hasErrorMessage_; }
    }
    public string ErrorMessage_ {
      get { return errorMessage_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasErrorMessage_) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _errorMessageFieldNames;
      if (hasErrorMessage_) {
        output.WriteString(1, field_names[0], ErrorMessage_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasErrorMessage_) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ErrorMessage_);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ErrorMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ErrorMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ErrorMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ErrorMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ErrorMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ErrorMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ErrorMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ErrorMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ErrorMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ErrorMessage result;
      
      private ErrorMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          ErrorMessage original = result;
          result = new ErrorMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ErrorMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.ErrorMessage.Descriptor; }
      }
      
      public override ErrorMessage DefaultInstanceForType {
        get { return global::ProtoCmd.Service.ErrorMessage.DefaultInstance; }
      }
      
      public override ErrorMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ErrorMessage) {
          return MergeFrom((ErrorMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ErrorMessage other) {
        if (other == global::ProtoCmd.Service.ErrorMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasErrorMessage_) {
          ErrorMessage_ = other.ErrorMessage_;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_errorMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _errorMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasErrorMessage_ = input.ReadString(ref result.errorMessage_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasErrorMessage_ {
        get { return result.hasErrorMessage_; }
      }
      public string ErrorMessage_ {
        get { return result.ErrorMessage_; }
        set { SetErrorMessage_(value); }
      }
      public Builder SetErrorMessage_(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorMessage_ = true;
        result.errorMessage_ = value;
        return this;
      }
      public Builder ClearErrorMessage_() {
        PrepareBuilder();
        result.hasErrorMessage_ = false;
        result.errorMessage_ = "";
        return this;
      }
    }
    static ErrorMessage() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserStateReq : pb::GeneratedMessage<UserStateReq, UserStateReq.Builder> {
    private UserStateReq() { }
    private static readonly UserStateReq defaultInstance = new UserStateReq().MakeReadOnly();
    private static readonly string[] _userStateReqFieldNames = new string[] { "user_id" };
    private static readonly uint[] _userStateReqFieldTags = new uint[] { 8 };
    public static UserStateReq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UserStateReq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserStateReq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_UserStateReq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UserStateReq, UserStateReq.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_UserStateReq__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userStateReqFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[0], UserId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UserStateReq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserStateReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserStateReq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserStateReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserStateReq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserStateReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserStateReq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserStateReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserStateReq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserStateReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserStateReq MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserStateReq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UserStateReq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserStateReq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserStateReq result;
      
      private UserStateReq PrepareBuilder() {
        if (resultIsReadOnly) {
          UserStateReq original = result;
          result = new UserStateReq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserStateReq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.UserStateReq.Descriptor; }
      }
      
      public override UserStateReq DefaultInstanceForType {
        get { return global::ProtoCmd.Service.UserStateReq.DefaultInstance; }
      }
      
      public override UserStateReq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserStateReq) {
          return MergeFrom((UserStateReq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserStateReq other) {
        if (other == global::ProtoCmd.Service.UserStateReq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userStateReqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userStateReqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
    }
    static UserStateReq() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserStateRes : pb::GeneratedMessage<UserStateRes, UserStateRes.Builder> {
    private UserStateRes() { }
    private static readonly UserStateRes defaultInstance = new UserStateRes().MakeReadOnly();
    private static readonly string[] _userStateResFieldNames = new string[] { "room_id", "room_type", "state", "user_id" };
    private static readonly uint[] _userStateResFieldTags = new uint[] { 24, 32, 16, 8 };
    public static UserStateRes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UserStateRes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserStateRes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_UserStateRes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UserStateRes, UserStateRes.Builder> InternalFieldAccessors {
      get { return global::ProtoCmd.Service.Service.internal__static_ProtoCmd_Service_UserStateRes__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int RoomIdFieldNumber = 3;
    private bool hasRoomId;
    private int roomId_;
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    public int RoomId {
      get { return roomId_; }
    }
    
    public const int RoomTypeFieldNumber = 4;
    private bool hasRoomType;
    private int roomType_;
    public bool HasRoomType {
      get { return hasRoomType; }
    }
    public int RoomType {
      get { return roomType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userStateResFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[3], UserId);
      }
      if (hasState) {
        output.WriteInt32(2, field_names[2], State);
      }
      if (hasRoomId) {
        output.WriteInt32(3, field_names[0], RoomId);
      }
      if (hasRoomType) {
        output.WriteInt32(4, field_names[1], RoomType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, State);
      }
      if (hasRoomId) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, RoomId);
      }
      if (hasRoomType) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, RoomType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UserStateRes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserStateRes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserStateRes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserStateRes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserStateRes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserStateRes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserStateRes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserStateRes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserStateRes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserStateRes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserStateRes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserStateRes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UserStateRes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserStateRes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserStateRes result;
      
      private UserStateRes PrepareBuilder() {
        if (resultIsReadOnly) {
          UserStateRes original = result;
          result = new UserStateRes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserStateRes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtoCmd.Service.UserStateRes.Descriptor; }
      }
      
      public override UserStateRes DefaultInstanceForType {
        get { return global::ProtoCmd.Service.UserStateRes.DefaultInstance; }
      }
      
      public override UserStateRes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserStateRes) {
          return MergeFrom((UserStateRes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserStateRes other) {
        if (other == global::ProtoCmd.Service.UserStateRes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        if (other.HasRoomType) {
          RoomType = other.RoomType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userStateResFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userStateResFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 16: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 24: {
              result.hasRoomId = input.ReadInt32(ref result.roomId_);
              break;
            }
            case 32: {
              result.hasRoomType = input.ReadInt32(ref result.roomType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      public int RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      public Builder SetRoomId(int value) {
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = 0;
        return this;
      }
      
      public bool HasRoomType {
        get { return result.hasRoomType; }
      }
      public int RoomType {
        get { return result.RoomType; }
        set { SetRoomType(value); }
      }
      public Builder SetRoomType(int value) {
        PrepareBuilder();
        result.hasRoomType = true;
        result.roomType_ = value;
        return this;
      }
      public Builder ClearRoomType() {
        PrepareBuilder();
        result.hasRoomType = false;
        result.roomType_ = 0;
        return this;
      }
    }
    static UserStateRes() {
      object.ReferenceEquals(global::ProtoCmd.Service.Service.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
