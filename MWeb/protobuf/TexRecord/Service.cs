// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace proto.db515 {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ServiceT {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_proto_db515_TexasOperate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::proto.db515.TexasOperate, global::proto.db515.TexasOperate.Builder> internal__static_proto_db515_TexasOperate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_proto_db515_TexasRound__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::proto.db515.TexasRound, global::proto.db515.TexasRound.Builder> internal__static_proto_db515_TexasRound__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_proto_db515_TexasRole__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::proto.db515.TexasRole, global::proto.db515.TexasRole.Builder> internal__static_proto_db515_TexasRole__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_proto_db515_TexasGameRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::proto.db515.TexasGameRecord, global::proto.db515.TexasGameRecord.Builder> internal__static_proto_db515_TexasGameRecord__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_proto_db515_BG_TexasGameRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::proto.db515.BG_TexasGameRecord, global::proto.db515.BG_TexasGameRecord.Builder> internal__static_proto_db515_BG_TexasGameRecord__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ServiceT() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TZXJ2aWNlLnByb3RvEgtwcm90by5kYjUxNSJKCgxUZXhhc09wZXJhdGUS", 
            "FQoNb3BlcmF0ZV9pbmRleBgBIAEoBRIUCgxvcGVyYXRlX2tpbmQYAiABKAUS", 
            "DQoFc2NvcmUYAyABKAMiVAoKVGV4YXNSb3VuZBITCgtyb3VuZF9pbmRleBgB", 
            "IAEoBRIxCg50ZXhhc19vcGVyYXRlcxgCIAMoCzIZLnByb3RvLmRiNTE1LlRl", 
            "eGFzT3BlcmF0ZSKAAQoJVGV4YXNSb2xlEg4KBlVzZXJJRBgBIAEoBRIUCgxo", 
            "YW5kbGVfY2FyZHMYAiADKAkSJwoGcm91bmRzGAMgAygLMhcucHJvdG8uZGI1", 
            "MTUuVGV4YXNSb3VuZBIRCgljYXJkX3R5cGUYBCABKAUSEQoJd2luX3Njb3Jl", 
            "GAUgASgDIk0KD1RleGFzR2FtZVJlY29yZBIlCgVyb2xlcxgBIAMoCzIWLnBy", 
            "b3RvLmRiNTE1LlRleGFzUm9sZRITCgt0YWJsZV9jYXJkcxgCIAMoCSLdAQoS", 
            "QkdfVGV4YXNHYW1lUmVjb3JkEhIKCkNyZWF0ZVRpbWUYASABKAkSDgoGUm9v", 
            "bUlEGAIgASgFEg0KBVJvdW5kGAMgASgEEhEKCUJhc2VTY29yZRgEIAEoCRIP", 
            "CgdTZXJ2aWNlGAUgASgFEhAKCEJhbmtDYXJkGAYgASgJEhAKCFVzZXJEYXRh", 
            "GAcgASgJEg4KBlVzZXJJRBgIIAEoCRIOCgZHaXZlVXAYCSABKAkSLAoGUmVj", 
          "b3JkGAogASgLMhwucHJvdG8uZGI1MTUuVGV4YXNHYW1lUmVjb3Jk"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_proto_db515_TexasOperate__Descriptor = Descriptor.MessageTypes[0];
        internal__static_proto_db515_TexasOperate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::proto.db515.TexasOperate, global::proto.db515.TexasOperate.Builder>(internal__static_proto_db515_TexasOperate__Descriptor,
                new string[] { "OperateIndex", "OperateKind", "Score", });
        internal__static_proto_db515_TexasRound__Descriptor = Descriptor.MessageTypes[1];
        internal__static_proto_db515_TexasRound__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::proto.db515.TexasRound, global::proto.db515.TexasRound.Builder>(internal__static_proto_db515_TexasRound__Descriptor,
                new string[] { "RoundIndex", "TexasOperates", });
        internal__static_proto_db515_TexasRole__Descriptor = Descriptor.MessageTypes[2];
        internal__static_proto_db515_TexasRole__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::proto.db515.TexasRole, global::proto.db515.TexasRole.Builder>(internal__static_proto_db515_TexasRole__Descriptor,
                new string[] { "UserID", "HandleCards", "Rounds", "CardType", "WinScore", });
        internal__static_proto_db515_TexasGameRecord__Descriptor = Descriptor.MessageTypes[3];
        internal__static_proto_db515_TexasGameRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::proto.db515.TexasGameRecord, global::proto.db515.TexasGameRecord.Builder>(internal__static_proto_db515_TexasGameRecord__Descriptor,
                new string[] { "Roles", "TableCards", });
        internal__static_proto_db515_BG_TexasGameRecord__Descriptor = Descriptor.MessageTypes[4];
        internal__static_proto_db515_BG_TexasGameRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::proto.db515.BG_TexasGameRecord, global::proto.db515.BG_TexasGameRecord.Builder>(internal__static_proto_db515_BG_TexasGameRecord__Descriptor,
                new string[] { "CreateTime", "RoomID", "Round", "BaseScore", "Service", "BankCard", "UserData", "UserID", "GiveUp", "Record", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexasOperate : pb::GeneratedMessage<TexasOperate, TexasOperate.Builder> {
    private TexasOperate() { }
    private static readonly TexasOperate defaultInstance = new TexasOperate().MakeReadOnly();
    private static readonly string[] _texasOperateFieldNames = new string[] { "operate_index", "operate_kind", "score" };
    private static readonly uint[] _texasOperateFieldTags = new uint[] { 8, 16, 24 };
    public static TexasOperate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexasOperate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexasOperate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_TexasOperate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexasOperate, TexasOperate.Builder> InternalFieldAccessors {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_TexasOperate__FieldAccessorTable; }
    }
    
    public const int OperateIndexFieldNumber = 1;
    private bool hasOperateIndex;
    private int operateIndex_;
    public bool HasOperateIndex {
      get { return hasOperateIndex; }
    }
    public int OperateIndex {
      get { return operateIndex_; }
    }
    
    public const int OperateKindFieldNumber = 2;
    private bool hasOperateKind;
    private int operateKind_;
    public bool HasOperateKind {
      get { return hasOperateKind; }
    }
    public int OperateKind {
      get { return operateKind_; }
    }
    
    public const int ScoreFieldNumber = 3;
    private bool hasScore;
    private long score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public long Score {
      get { return score_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texasOperateFieldNames;
      if (hasOperateIndex) {
        output.WriteInt32(1, field_names[0], OperateIndex);
      }
      if (hasOperateKind) {
        output.WriteInt32(2, field_names[1], OperateKind);
      }
      if (hasScore) {
        output.WriteInt64(3, field_names[2], Score);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOperateIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, OperateIndex);
      }
      if (hasOperateKind) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, OperateKind);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Score);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexasOperate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasOperate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasOperate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasOperate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasOperate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasOperate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexasOperate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexasOperate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexasOperate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasOperate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexasOperate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexasOperate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexasOperate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexasOperate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexasOperate result;
      
      private TexasOperate PrepareBuilder() {
        if (resultIsReadOnly) {
          TexasOperate original = result;
          result = new TexasOperate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexasOperate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::proto.db515.TexasOperate.Descriptor; }
      }
      
      public override TexasOperate DefaultInstanceForType {
        get { return global::proto.db515.TexasOperate.DefaultInstance; }
      }
      
      public override TexasOperate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexasOperate) {
          return MergeFrom((TexasOperate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexasOperate other) {
        if (other == global::proto.db515.TexasOperate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOperateIndex) {
          OperateIndex = other.OperateIndex;
        }
        if (other.HasOperateKind) {
          OperateKind = other.OperateKind;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texasOperateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texasOperateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOperateIndex = input.ReadInt32(ref result.operateIndex_);
              break;
            }
            case 16: {
              result.hasOperateKind = input.ReadInt32(ref result.operateKind_);
              break;
            }
            case 24: {
              result.hasScore = input.ReadInt64(ref result.score_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOperateIndex {
        get { return result.hasOperateIndex; }
      }
      public int OperateIndex {
        get { return result.OperateIndex; }
        set { SetOperateIndex(value); }
      }
      public Builder SetOperateIndex(int value) {
        PrepareBuilder();
        result.hasOperateIndex = true;
        result.operateIndex_ = value;
        return this;
      }
      public Builder ClearOperateIndex() {
        PrepareBuilder();
        result.hasOperateIndex = false;
        result.operateIndex_ = 0;
        return this;
      }
      
      public bool HasOperateKind {
        get { return result.hasOperateKind; }
      }
      public int OperateKind {
        get { return result.OperateKind; }
        set { SetOperateKind(value); }
      }
      public Builder SetOperateKind(int value) {
        PrepareBuilder();
        result.hasOperateKind = true;
        result.operateKind_ = value;
        return this;
      }
      public Builder ClearOperateKind() {
        PrepareBuilder();
        result.hasOperateKind = false;
        result.operateKind_ = 0;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public long Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(long value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0L;
        return this;
      }
    }
    static TexasOperate() {
      object.ReferenceEquals(global::proto.db515.ServiceT.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexasRound : pb::GeneratedMessage<TexasRound, TexasRound.Builder> {
    private TexasRound() { }
    private static readonly TexasRound defaultInstance = new TexasRound().MakeReadOnly();
    private static readonly string[] _texasRoundFieldNames = new string[] { "round_index", "texas_operates" };
    private static readonly uint[] _texasRoundFieldTags = new uint[] { 8, 18 };
    public static TexasRound DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexasRound DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexasRound ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_TexasRound__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexasRound, TexasRound.Builder> InternalFieldAccessors {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_TexasRound__FieldAccessorTable; }
    }
    
    public const int RoundIndexFieldNumber = 1;
    private bool hasRoundIndex;
    private int roundIndex_;
    public bool HasRoundIndex {
      get { return hasRoundIndex; }
    }
    public int RoundIndex {
      get { return roundIndex_; }
    }
    
    public const int TexasOperatesFieldNumber = 2;
    private pbc::PopsicleList<global::proto.db515.TexasOperate> texasOperates_ = new pbc::PopsicleList<global::proto.db515.TexasOperate>();
    public scg::IList<global::proto.db515.TexasOperate> TexasOperatesList {
      get { return texasOperates_; }
    }
    public int TexasOperatesCount {
      get { return texasOperates_.Count; }
    }
    public global::proto.db515.TexasOperate GetTexasOperates(int index) {
      return texasOperates_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texasRoundFieldNames;
      if (hasRoundIndex) {
        output.WriteInt32(1, field_names[0], RoundIndex);
      }
      if (texasOperates_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], texasOperates_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRoundIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, RoundIndex);
      }
      foreach (global::proto.db515.TexasOperate element in TexasOperatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexasRound ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasRound ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasRound ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasRound ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasRound ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasRound ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexasRound ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexasRound ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexasRound ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasRound ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexasRound MakeReadOnly() {
      texasOperates_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexasRound prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexasRound, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexasRound cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexasRound result;
      
      private TexasRound PrepareBuilder() {
        if (resultIsReadOnly) {
          TexasRound original = result;
          result = new TexasRound();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexasRound MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::proto.db515.TexasRound.Descriptor; }
      }
      
      public override TexasRound DefaultInstanceForType {
        get { return global::proto.db515.TexasRound.DefaultInstance; }
      }
      
      public override TexasRound BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexasRound) {
          return MergeFrom((TexasRound) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexasRound other) {
        if (other == global::proto.db515.TexasRound.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRoundIndex) {
          RoundIndex = other.RoundIndex;
        }
        if (other.texasOperates_.Count != 0) {
          result.texasOperates_.Add(other.texasOperates_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texasRoundFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texasRoundFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRoundIndex = input.ReadInt32(ref result.roundIndex_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.texasOperates_, global::proto.db515.TexasOperate.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRoundIndex {
        get { return result.hasRoundIndex; }
      }
      public int RoundIndex {
        get { return result.RoundIndex; }
        set { SetRoundIndex(value); }
      }
      public Builder SetRoundIndex(int value) {
        PrepareBuilder();
        result.hasRoundIndex = true;
        result.roundIndex_ = value;
        return this;
      }
      public Builder ClearRoundIndex() {
        PrepareBuilder();
        result.hasRoundIndex = false;
        result.roundIndex_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::proto.db515.TexasOperate> TexasOperatesList {
        get { return PrepareBuilder().texasOperates_; }
      }
      public int TexasOperatesCount {
        get { return result.TexasOperatesCount; }
      }
      public global::proto.db515.TexasOperate GetTexasOperates(int index) {
        return result.GetTexasOperates(index);
      }
      public Builder SetTexasOperates(int index, global::proto.db515.TexasOperate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.texasOperates_[index] = value;
        return this;
      }
      public Builder SetTexasOperates(int index, global::proto.db515.TexasOperate.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.texasOperates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTexasOperates(global::proto.db515.TexasOperate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.texasOperates_.Add(value);
        return this;
      }
      public Builder AddTexasOperates(global::proto.db515.TexasOperate.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.texasOperates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTexasOperates(scg::IEnumerable<global::proto.db515.TexasOperate> values) {
        PrepareBuilder();
        result.texasOperates_.Add(values);
        return this;
      }
      public Builder ClearTexasOperates() {
        PrepareBuilder();
        result.texasOperates_.Clear();
        return this;
      }
    }
    static TexasRound() {
      object.ReferenceEquals(global::proto.db515.ServiceT.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexasRole : pb::GeneratedMessage<TexasRole, TexasRole.Builder> {
    private TexasRole() { }
    private static readonly TexasRole defaultInstance = new TexasRole().MakeReadOnly();
    private static readonly string[] _texasRoleFieldNames = new string[] { "UserID", "card_type", "handle_cards", "rounds", "win_score" };
    private static readonly uint[] _texasRoleFieldTags = new uint[] { 8, 32, 18, 26, 40 };
    public static TexasRole DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexasRole DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexasRole ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_TexasRole__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexasRole, TexasRole.Builder> InternalFieldAccessors {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_TexasRole__FieldAccessorTable; }
    }
    
    public const int UserIDFieldNumber = 1;
    private bool hasUserID;
    private int userID_;
    public bool HasUserID {
      get { return hasUserID; }
    }
    public int UserID {
      get { return userID_; }
    }
    
    public const int HandleCardsFieldNumber = 2;
    private pbc::PopsicleList<string> handleCards_ = new pbc::PopsicleList<string>();
    public scg::IList<string> HandleCardsList {
      get { return pbc::Lists.AsReadOnly(handleCards_); }
    }
    public int HandleCardsCount {
      get { return handleCards_.Count; }
    }
    public string GetHandleCards(int index) {
      return handleCards_[index];
    }
    
    public const int RoundsFieldNumber = 3;
    private pbc::PopsicleList<global::proto.db515.TexasRound> rounds_ = new pbc::PopsicleList<global::proto.db515.TexasRound>();
    public scg::IList<global::proto.db515.TexasRound> RoundsList {
      get { return rounds_; }
    }
    public int RoundsCount {
      get { return rounds_.Count; }
    }
    public global::proto.db515.TexasRound GetRounds(int index) {
      return rounds_[index];
    }
    
    public const int CardTypeFieldNumber = 4;
    private bool hasCardType;
    private int cardType_;
    public bool HasCardType {
      get { return hasCardType; }
    }
    public int CardType {
      get { return cardType_; }
    }
    
    public const int WinScoreFieldNumber = 5;
    private bool hasWinScore;
    private long winScore_;
    public bool HasWinScore {
      get { return hasWinScore; }
    }
    public long WinScore {
      get { return winScore_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texasRoleFieldNames;
      if (hasUserID) {
        output.WriteInt32(1, field_names[0], UserID);
      }
      if (handleCards_.Count > 0) {
        output.WriteStringArray(2, field_names[2], handleCards_);
      }
      if (rounds_.Count > 0) {
        output.WriteMessageArray(3, field_names[3], rounds_);
      }
      if (hasCardType) {
        output.WriteInt32(4, field_names[1], CardType);
      }
      if (hasWinScore) {
        output.WriteInt64(5, field_names[4], WinScore);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserID) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, UserID);
      }
      {
        int dataSize = 0;
        foreach (string element in HandleCardsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * handleCards_.Count;
      }
      foreach (global::proto.db515.TexasRound element in RoundsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasCardType) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, CardType);
      }
      if (hasWinScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, WinScore);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexasRole ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasRole ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasRole ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasRole ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasRole ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasRole ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexasRole ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexasRole ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexasRole ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasRole ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexasRole MakeReadOnly() {
      handleCards_.MakeReadOnly();
      rounds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexasRole prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexasRole, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexasRole cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexasRole result;
      
      private TexasRole PrepareBuilder() {
        if (resultIsReadOnly) {
          TexasRole original = result;
          result = new TexasRole();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexasRole MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::proto.db515.TexasRole.Descriptor; }
      }
      
      public override TexasRole DefaultInstanceForType {
        get { return global::proto.db515.TexasRole.DefaultInstance; }
      }
      
      public override TexasRole BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexasRole) {
          return MergeFrom((TexasRole) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexasRole other) {
        if (other == global::proto.db515.TexasRole.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.handleCards_.Count != 0) {
          result.handleCards_.Add(other.handleCards_);
        }
        if (other.rounds_.Count != 0) {
          result.rounds_.Add(other.rounds_);
        }
        if (other.HasCardType) {
          CardType = other.CardType;
        }
        if (other.HasWinScore) {
          WinScore = other.WinScore;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texasRoleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texasRoleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserID = input.ReadInt32(ref result.userID_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.handleCards_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.rounds_, global::proto.db515.TexasRound.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasCardType = input.ReadInt32(ref result.cardType_);
              break;
            }
            case 40: {
              result.hasWinScore = input.ReadInt64(ref result.winScore_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public int UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(int value) {
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> HandleCardsList {
        get { return PrepareBuilder().handleCards_; }
      }
      public int HandleCardsCount {
        get { return result.HandleCardsCount; }
      }
      public string GetHandleCards(int index) {
        return result.GetHandleCards(index);
      }
      public Builder SetHandleCards(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.handleCards_[index] = value;
        return this;
      }
      public Builder AddHandleCards(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.handleCards_.Add(value);
        return this;
      }
      public Builder AddRangeHandleCards(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.handleCards_.Add(values);
        return this;
      }
      public Builder ClearHandleCards() {
        PrepareBuilder();
        result.handleCards_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::proto.db515.TexasRound> RoundsList {
        get { return PrepareBuilder().rounds_; }
      }
      public int RoundsCount {
        get { return result.RoundsCount; }
      }
      public global::proto.db515.TexasRound GetRounds(int index) {
        return result.GetRounds(index);
      }
      public Builder SetRounds(int index, global::proto.db515.TexasRound value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rounds_[index] = value;
        return this;
      }
      public Builder SetRounds(int index, global::proto.db515.TexasRound.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rounds_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRounds(global::proto.db515.TexasRound value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rounds_.Add(value);
        return this;
      }
      public Builder AddRounds(global::proto.db515.TexasRound.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rounds_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRounds(scg::IEnumerable<global::proto.db515.TexasRound> values) {
        PrepareBuilder();
        result.rounds_.Add(values);
        return this;
      }
      public Builder ClearRounds() {
        PrepareBuilder();
        result.rounds_.Clear();
        return this;
      }
      
      public bool HasCardType {
        get { return result.hasCardType; }
      }
      public int CardType {
        get { return result.CardType; }
        set { SetCardType(value); }
      }
      public Builder SetCardType(int value) {
        PrepareBuilder();
        result.hasCardType = true;
        result.cardType_ = value;
        return this;
      }
      public Builder ClearCardType() {
        PrepareBuilder();
        result.hasCardType = false;
        result.cardType_ = 0;
        return this;
      }
      
      public bool HasWinScore {
        get { return result.hasWinScore; }
      }
      public long WinScore {
        get { return result.WinScore; }
        set { SetWinScore(value); }
      }
      public Builder SetWinScore(long value) {
        PrepareBuilder();
        result.hasWinScore = true;
        result.winScore_ = value;
        return this;
      }
      public Builder ClearWinScore() {
        PrepareBuilder();
        result.hasWinScore = false;
        result.winScore_ = 0L;
        return this;
      }
    }
    static TexasRole() {
      object.ReferenceEquals(global::proto.db515.ServiceT.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TexasGameRecord : pb::GeneratedMessage<TexasGameRecord, TexasGameRecord.Builder> {
    private TexasGameRecord() { }
    private static readonly TexasGameRecord defaultInstance = new TexasGameRecord().MakeReadOnly();
    private static readonly string[] _texasGameRecordFieldNames = new string[] { "roles", "table_cards" };
    private static readonly uint[] _texasGameRecordFieldTags = new uint[] { 10, 18 };
    public static TexasGameRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TexasGameRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TexasGameRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_TexasGameRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TexasGameRecord, TexasGameRecord.Builder> InternalFieldAccessors {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_TexasGameRecord__FieldAccessorTable; }
    }
    
    public const int RolesFieldNumber = 1;
    private pbc::PopsicleList<global::proto.db515.TexasRole> roles_ = new pbc::PopsicleList<global::proto.db515.TexasRole>();
    public scg::IList<global::proto.db515.TexasRole> RolesList {
      get { return roles_; }
    }
    public int RolesCount {
      get { return roles_.Count; }
    }
    public global::proto.db515.TexasRole GetRoles(int index) {
      return roles_[index];
    }
    
    public const int TableCardsFieldNumber = 2;
    private pbc::PopsicleList<string> tableCards_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TableCardsList {
      get { return pbc::Lists.AsReadOnly(tableCards_); }
    }
    public int TableCardsCount {
      get { return tableCards_.Count; }
    }
    public string GetTableCards(int index) {
      return tableCards_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _texasGameRecordFieldNames;
      if (roles_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], roles_);
      }
      if (tableCards_.Count > 0) {
        output.WriteStringArray(2, field_names[1], tableCards_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::proto.db515.TexasRole element in RolesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      {
        int dataSize = 0;
        foreach (string element in TableCardsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * tableCards_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TexasGameRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasGameRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasGameRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TexasGameRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TexasGameRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasGameRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TexasGameRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TexasGameRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TexasGameRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TexasGameRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TexasGameRecord MakeReadOnly() {
      roles_.MakeReadOnly();
      tableCards_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TexasGameRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TexasGameRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TexasGameRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TexasGameRecord result;
      
      private TexasGameRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          TexasGameRecord original = result;
          result = new TexasGameRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TexasGameRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::proto.db515.TexasGameRecord.Descriptor; }
      }
      
      public override TexasGameRecord DefaultInstanceForType {
        get { return global::proto.db515.TexasGameRecord.DefaultInstance; }
      }
      
      public override TexasGameRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TexasGameRecord) {
          return MergeFrom((TexasGameRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TexasGameRecord other) {
        if (other == global::proto.db515.TexasGameRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.roles_.Count != 0) {
          result.roles_.Add(other.roles_);
        }
        if (other.tableCards_.Count != 0) {
          result.tableCards_.Add(other.tableCards_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_texasGameRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _texasGameRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.roles_, global::proto.db515.TexasRole.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.tableCards_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::proto.db515.TexasRole> RolesList {
        get { return PrepareBuilder().roles_; }
      }
      public int RolesCount {
        get { return result.RolesCount; }
      }
      public global::proto.db515.TexasRole GetRoles(int index) {
        return result.GetRoles(index);
      }
      public Builder SetRoles(int index, global::proto.db515.TexasRole value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.roles_[index] = value;
        return this;
      }
      public Builder SetRoles(int index, global::proto.db515.TexasRole.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.roles_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRoles(global::proto.db515.TexasRole value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.roles_.Add(value);
        return this;
      }
      public Builder AddRoles(global::proto.db515.TexasRole.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.roles_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRoles(scg::IEnumerable<global::proto.db515.TexasRole> values) {
        PrepareBuilder();
        result.roles_.Add(values);
        return this;
      }
      public Builder ClearRoles() {
        PrepareBuilder();
        result.roles_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> TableCardsList {
        get { return PrepareBuilder().tableCards_; }
      }
      public int TableCardsCount {
        get { return result.TableCardsCount; }
      }
      public string GetTableCards(int index) {
        return result.GetTableCards(index);
      }
      public Builder SetTableCards(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tableCards_[index] = value;
        return this;
      }
      public Builder AddTableCards(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tableCards_.Add(value);
        return this;
      }
      public Builder AddRangeTableCards(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.tableCards_.Add(values);
        return this;
      }
      public Builder ClearTableCards() {
        PrepareBuilder();
        result.tableCards_.Clear();
        return this;
      }
    }
    static TexasGameRecord() {
      object.ReferenceEquals(global::proto.db515.ServiceT.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BG_TexasGameRecord : pb::GeneratedMessage<BG_TexasGameRecord, BG_TexasGameRecord.Builder> {
    private BG_TexasGameRecord() { }
    private static readonly BG_TexasGameRecord defaultInstance = new BG_TexasGameRecord().MakeReadOnly();
    private static readonly string[] _bGTexasGameRecordFieldNames = new string[] { "BankCard", "BaseScore", "CreateTime", "GiveUp", "Record", "RoomID", "Round", "Service", "UserData", "UserID" };
    private static readonly uint[] _bGTexasGameRecordFieldTags = new uint[] { 50, 34, 10, 74, 82, 16, 24, 40, 58, 66 };
    public static BG_TexasGameRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BG_TexasGameRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BG_TexasGameRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_BG_TexasGameRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BG_TexasGameRecord, BG_TexasGameRecord.Builder> InternalFieldAccessors {
      get { return global::proto.db515.ServiceT.internal__static_proto_db515_BG_TexasGameRecord__FieldAccessorTable; }
    }
    
    public const int CreateTimeFieldNumber = 1;
    private bool hasCreateTime;
    private string createTime_ = "";
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public string CreateTime {
      get { return createTime_; }
    }
    
    public const int RoomIDFieldNumber = 2;
    private bool hasRoomID;
    private int roomID_;
    public bool HasRoomID {
      get { return hasRoomID; }
    }
    public int RoomID {
      get { return roomID_; }
    }
    
    public const int RoundFieldNumber = 3;
    private bool hasRound;
    private ulong round_;
    public bool HasRound {
      get { return hasRound; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Round {
      get { return round_; }
    }
    
    public const int BaseScoreFieldNumber = 4;
    private bool hasBaseScore;
    private string baseScore_ = "";
    public bool HasBaseScore {
      get { return hasBaseScore; }
    }
    public string BaseScore {
      get { return baseScore_; }
    }
    
    public const int ServiceFieldNumber = 5;
    private bool hasService;
    private int service_;
    public bool HasService {
      get { return hasService; }
    }
    public int Service {
      get { return service_; }
    }
    
    public const int BankCardFieldNumber = 6;
    private bool hasBankCard;
    private string bankCard_ = "";
    public bool HasBankCard {
      get { return hasBankCard; }
    }
    public string BankCard {
      get { return bankCard_; }
    }
    
    public const int UserDataFieldNumber = 7;
    private bool hasUserData;
    private string userData_ = "";
    public bool HasUserData {
      get { return hasUserData; }
    }
    public string UserData {
      get { return userData_; }
    }
    
    public const int UserIDFieldNumber = 8;
    private bool hasUserID;
    private string userID_ = "";
    public bool HasUserID {
      get { return hasUserID; }
    }
    public string UserID {
      get { return userID_; }
    }
    
    public const int GiveUpFieldNumber = 9;
    private bool hasGiveUp;
    private string giveUp_ = "";
    public bool HasGiveUp {
      get { return hasGiveUp; }
    }
    public string GiveUp {
      get { return giveUp_; }
    }
    
    public const int RecordFieldNumber = 10;
    private bool hasRecord;
    private global::proto.db515.TexasGameRecord record_;
    public bool HasRecord {
      get { return hasRecord; }
    }
    public global::proto.db515.TexasGameRecord Record {
      get { return record_ ?? global::proto.db515.TexasGameRecord.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bGTexasGameRecordFieldNames;
      if (hasCreateTime) {
        output.WriteString(1, field_names[2], CreateTime);
      }
      if (hasRoomID) {
        output.WriteInt32(2, field_names[5], RoomID);
      }
      if (hasRound) {
        output.WriteUInt64(3, field_names[6], Round);
      }
      if (hasBaseScore) {
        output.WriteString(4, field_names[1], BaseScore);
      }
      if (hasService) {
        output.WriteInt32(5, field_names[7], Service);
      }
      if (hasBankCard) {
        output.WriteString(6, field_names[0], BankCard);
      }
      if (hasUserData) {
        output.WriteString(7, field_names[8], UserData);
      }
      if (hasUserID) {
        output.WriteString(8, field_names[9], UserID);
      }
      if (hasGiveUp) {
        output.WriteString(9, field_names[3], GiveUp);
      }
      if (hasRecord) {
        output.WriteMessage(10, field_names[4], Record);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCreateTime) {
        size += pb::CodedOutputStream.ComputeStringSize(1, CreateTime);
      }
      if (hasRoomID) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, RoomID);
      }
      if (hasRound) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, Round);
      }
      if (hasBaseScore) {
        size += pb::CodedOutputStream.ComputeStringSize(4, BaseScore);
      }
      if (hasService) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Service);
      }
      if (hasBankCard) {
        size += pb::CodedOutputStream.ComputeStringSize(6, BankCard);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeStringSize(7, UserData);
      }
      if (hasUserID) {
        size += pb::CodedOutputStream.ComputeStringSize(8, UserID);
      }
      if (hasGiveUp) {
        size += pb::CodedOutputStream.ComputeStringSize(9, GiveUp);
      }
      if (hasRecord) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, Record);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BG_TexasGameRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BG_TexasGameRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BG_TexasGameRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BG_TexasGameRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BG_TexasGameRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BG_TexasGameRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BG_TexasGameRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BG_TexasGameRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BG_TexasGameRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BG_TexasGameRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BG_TexasGameRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BG_TexasGameRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BG_TexasGameRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BG_TexasGameRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BG_TexasGameRecord result;
      
      private BG_TexasGameRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          BG_TexasGameRecord original = result;
          result = new BG_TexasGameRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BG_TexasGameRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::proto.db515.BG_TexasGameRecord.Descriptor; }
      }
      
      public override BG_TexasGameRecord DefaultInstanceForType {
        get { return global::proto.db515.BG_TexasGameRecord.DefaultInstance; }
      }
      
      public override BG_TexasGameRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BG_TexasGameRecord) {
          return MergeFrom((BG_TexasGameRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BG_TexasGameRecord other) {
        if (other == global::proto.db515.BG_TexasGameRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasRoomID) {
          RoomID = other.RoomID;
        }
        if (other.HasRound) {
          Round = other.Round;
        }
        if (other.HasBaseScore) {
          BaseScore = other.BaseScore;
        }
        if (other.HasService) {
          Service = other.Service;
        }
        if (other.HasBankCard) {
          BankCard = other.BankCard;
        }
        if (other.HasUserData) {
          UserData = other.UserData;
        }
        if (other.HasUserID) {
          UserID = other.UserID;
        }
        if (other.HasGiveUp) {
          GiveUp = other.GiveUp;
        }
        if (other.HasRecord) {
          MergeRecord(other.Record);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bGTexasGameRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bGTexasGameRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCreateTime = input.ReadString(ref result.createTime_);
              break;
            }
            case 16: {
              result.hasRoomID = input.ReadInt32(ref result.roomID_);
              break;
            }
            case 24: {
              result.hasRound = input.ReadUInt64(ref result.round_);
              break;
            }
            case 34: {
              result.hasBaseScore = input.ReadString(ref result.baseScore_);
              break;
            }
            case 40: {
              result.hasService = input.ReadInt32(ref result.service_);
              break;
            }
            case 50: {
              result.hasBankCard = input.ReadString(ref result.bankCard_);
              break;
            }
            case 58: {
              result.hasUserData = input.ReadString(ref result.userData_);
              break;
            }
            case 66: {
              result.hasUserID = input.ReadString(ref result.userID_);
              break;
            }
            case 74: {
              result.hasGiveUp = input.ReadString(ref result.giveUp_);
              break;
            }
            case 82: {
              global::proto.db515.TexasGameRecord.Builder subBuilder = global::proto.db515.TexasGameRecord.CreateBuilder();
              if (result.hasRecord) {
                subBuilder.MergeFrom(Record);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Record = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public string CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = "";
        return this;
      }
      
      public bool HasRoomID {
        get { return result.hasRoomID; }
      }
      public int RoomID {
        get { return result.RoomID; }
        set { SetRoomID(value); }
      }
      public Builder SetRoomID(int value) {
        PrepareBuilder();
        result.hasRoomID = true;
        result.roomID_ = value;
        return this;
      }
      public Builder ClearRoomID() {
        PrepareBuilder();
        result.hasRoomID = false;
        result.roomID_ = 0;
        return this;
      }
      
      public bool HasRound {
        get { return result.hasRound; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Round {
        get { return result.Round; }
        set { SetRound(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRound(ulong value) {
        PrepareBuilder();
        result.hasRound = true;
        result.round_ = value;
        return this;
      }
      public Builder ClearRound() {
        PrepareBuilder();
        result.hasRound = false;
        result.round_ = 0UL;
        return this;
      }
      
      public bool HasBaseScore {
        get { return result.hasBaseScore; }
      }
      public string BaseScore {
        get { return result.BaseScore; }
        set { SetBaseScore(value); }
      }
      public Builder SetBaseScore(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseScore = true;
        result.baseScore_ = value;
        return this;
      }
      public Builder ClearBaseScore() {
        PrepareBuilder();
        result.hasBaseScore = false;
        result.baseScore_ = "";
        return this;
      }
      
      public bool HasService {
        get { return result.hasService; }
      }
      public int Service {
        get { return result.Service; }
        set { SetService(value); }
      }
      public Builder SetService(int value) {
        PrepareBuilder();
        result.hasService = true;
        result.service_ = value;
        return this;
      }
      public Builder ClearService() {
        PrepareBuilder();
        result.hasService = false;
        result.service_ = 0;
        return this;
      }
      
      public bool HasBankCard {
        get { return result.hasBankCard; }
      }
      public string BankCard {
        get { return result.BankCard; }
        set { SetBankCard(value); }
      }
      public Builder SetBankCard(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBankCard = true;
        result.bankCard_ = value;
        return this;
      }
      public Builder ClearBankCard() {
        PrepareBuilder();
        result.hasBankCard = false;
        result.bankCard_ = "";
        return this;
      }
      
      public bool HasUserData {
        get { return result.hasUserData; }
      }
      public string UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = "";
        return this;
      }
      
      public bool HasUserID {
        get { return result.hasUserID; }
      }
      public string UserID {
        get { return result.UserID; }
        set { SetUserID(value); }
      }
      public Builder SetUserID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserID = true;
        result.userID_ = value;
        return this;
      }
      public Builder ClearUserID() {
        PrepareBuilder();
        result.hasUserID = false;
        result.userID_ = "";
        return this;
      }
      
      public bool HasGiveUp {
        get { return result.hasGiveUp; }
      }
      public string GiveUp {
        get { return result.GiveUp; }
        set { SetGiveUp(value); }
      }
      public Builder SetGiveUp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGiveUp = true;
        result.giveUp_ = value;
        return this;
      }
      public Builder ClearGiveUp() {
        PrepareBuilder();
        result.hasGiveUp = false;
        result.giveUp_ = "";
        return this;
      }
      
      public bool HasRecord {
       get { return result.hasRecord; }
      }
      public global::proto.db515.TexasGameRecord Record {
        get { return result.Record; }
        set { SetRecord(value); }
      }
      public Builder SetRecord(global::proto.db515.TexasGameRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecord = true;
        result.record_ = value;
        return this;
      }
      public Builder SetRecord(global::proto.db515.TexasGameRecord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRecord = true;
        result.record_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRecord(global::proto.db515.TexasGameRecord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRecord &&
            result.record_ != global::proto.db515.TexasGameRecord.DefaultInstance) {
            result.record_ = global::proto.db515.TexasGameRecord.CreateBuilder(result.record_).MergeFrom(value).BuildPartial();
        } else {
          result.record_ = value;
        }
        result.hasRecord = true;
        return this;
      }
      public Builder ClearRecord() {
        PrepareBuilder();
        result.hasRecord = false;
        result.record_ = null;
        return this;
      }
    }
    static BG_TexasGameRecord() {
      object.ReferenceEquals(global::proto.db515.ServiceT.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
