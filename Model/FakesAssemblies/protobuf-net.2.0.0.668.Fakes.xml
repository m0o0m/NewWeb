<?xml version="1.0"?>
<doc>
    <assembly>
        <name>protobuf-net.2.0.0.668.Fakes</name>
    </assembly>
    <members>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.ProtobufnetDelegates">
            <summary>包含用于 protobuf-net 的存根和填充码的自定义委托</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimBclHelpers">
            <summary>ProtoBuf.BclHelpers 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimBclHelpers.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimBclHelpers.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimBclHelpers.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.GetUninitializedObjectType">
            <summary>设置 BclHelpers.GetUninitializedObject(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.ReadDateTimeProtoReader">
            <summary>设置 BclHelpers.ReadDateTime(ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.ReadDecimalProtoReader">
            <summary>设置 BclHelpers.ReadDecimal(ProtoReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.ReadGuidProtoReader">
            <summary>设置 BclHelpers.ReadGuid(ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.ReadNetObjectObjectProtoReaderInt32TypeBclHelpersNetObjectOptions">
            <summary>设置 BclHelpers.ReadNetObject(Object value, ProtoReader source, Int32 key, Type type, NetObjectOptions options) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.ReadTimeSpanProtoReader">
            <summary>设置 BclHelpers.ReadTimeSpan(ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.ReadTimeSpanTicksProtoReader">
            <summary>设置 BclHelpers.ReadTimeSpanTicks(ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.StaticConstructor">
            <summary>设置 BclHelpers.BclHelpers() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.WriteDateTimeDateTimeProtoWriter">
            <summary>设置 BclHelpers.WriteDateTime(DateTime value, ProtoWriter dest) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.WriteDecimalDecimalProtoWriter">
            <summary>设置 BclHelpers.WriteDecimal(Decimal value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.WriteGuidGuidProtoWriter">
            <summary>设置 BclHelpers.WriteGuid(Guid value, ProtoWriter dest) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.WriteNetObjectObjectProtoWriterInt32BclHelpersNetObjectOptions">
            <summary>设置 BclHelpers.WriteNetObject(Object value, ProtoWriter dest, Int32 key, NetObjectOptions options) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBclHelpers.WriteTimeSpanTimeSpanProtoWriter">
            <summary>设置 BclHelpers.WriteTimeSpan(TimeSpan timeSpan, ProtoWriter dest) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimBufferExtension">
            <summary>ProtoBuf.BufferExtension 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimBufferExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimBufferExtension.#ctor(ProtoBuf.BufferExtension)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimBufferExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimBufferExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimBufferExtension.Bind(ProtoBuf.IExtension)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.Constructor">
            <summary>设置 BufferExtension.BufferExtension() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.ProtoBufIExtensionBeginAppend">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.BeginAppend() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.ProtoBufIExtensionBeginQuery">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.BeginQuery() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.ProtoBufIExtensionEndAppendStreamBoolean">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.EndAppend(Stream stream, Boolean commit) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.ProtoBufIExtensionEndQueryStream">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.EndQuery(Stream stream) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.ProtoBufIExtensionGetLength">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.GetLength() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimBufferExtension.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.AllInstances.ProtoBufIExtensionBeginAppend">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.BeginAppend() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.AllInstances.ProtoBufIExtensionBeginQuery">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.BeginQuery() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.AllInstances.ProtoBufIExtensionEndAppendStreamBoolean">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.EndAppend(Stream stream, Boolean commit) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.AllInstances.ProtoBufIExtensionEndQueryStream">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.EndQuery(Stream stream) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimBufferExtension.AllInstances.ProtoBufIExtensionGetLength">
            <summary>设置 BufferExtension.ProtoBuf.IExtension.GetLength() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimExtensible">
            <summary>ProtoBuf.Extensible 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.#ctor(ProtoBuf.Extensible)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.AppendValueOf1IExtensibleInt32DataFormatM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0})">
            <summary>设置 Extensible.AppendValue(IExtensible instance, Int32 tag, DataFormat format, !!0 value) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.AppendValueOf1IExtensibleInt32M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{ProtoBuf.IExtensible,System.Int32,``0})">
            <summary>设置 Extensible.AppendValue(IExtensible instance, Int32 tag, !!0 value) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.Bind(ProtoBuf.IExtensible)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.GetValueOf1IExtensibleInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ProtoBuf.IExtensible,System.Int32,``0})">
            <summary>设置 Extensible.GetValue(IExtensible instance, Int32 tag) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.GetValueOf1IExtensibleInt32DataFormat``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0})">
            <summary>设置 Extensible.GetValue(IExtensible instance, Int32 tag, DataFormat format) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.GetValuesOf1IExtensibleInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ProtoBuf.IExtensible,System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 Extensible.GetValues(IExtensible instance, Int32 tag) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.GetValuesOf1IExtensibleInt32DataFormat``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 Extensible.GetValues(IExtensible instance, Int32 tag, DataFormat format) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.TryGetValueOf1IExtensibleInt32DataFormatBooleanM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,System.Boolean,``0,System.Boolean})">
            <summary>设置 Extensible.TryGetValue(IExtensible instance, Int32 tag, DataFormat format, Boolean allowDefinedTag, !!0&amp; value) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.TryGetValueOf1IExtensibleInt32DataFormatM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{ProtoBuf.IExtensible,System.Int32,ProtoBuf.DataFormat,``0,System.Boolean})">
            <summary>设置 Extensible.TryGetValue(IExtensible instance, Int32 tag, DataFormat format, !!0&amp; value) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimExtensible.TryGetValueOf1IExtensibleInt32M0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{ProtoBuf.IExtensible,System.Int32,``0,System.Boolean})">
            <summary>设置 Extensible.TryGetValue(IExtensible instance, Int32 tag, !!0&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.AppendValueTypeModelIExtensibleInt32DataFormatObject">
            <summary>设置 Extensible.AppendValue(TypeModel model, IExtensible instance, Int32 tag, DataFormat format, Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.Constructor">
            <summary>设置 Extensible.Extensible() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.GetExtensionObjectBoolean">
            <summary>设置 Extensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.GetExtensionObjectIExtensionRefBoolean">
            <summary>设置 Extensible.GetExtensionObject(IExtension&amp; extensionObject, Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.GetValuesTypeModelTypeIExtensibleInt32DataFormat">
            <summary>设置 Extensible.GetValues(TypeModel model, Type type, IExtensible instance, Int32 tag, DataFormat format) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.ProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 Extensible.ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.TryGetValueTypeModelTypeIExtensibleInt32DataFormatBooleanObjectOut">
            <summary>设置 Extensible.TryGetValue(TypeModel model, Type type, IExtensible instance, Int32 tag, DataFormat format, Boolean allowDefinedTag, Object&amp; value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimExtensible.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.AllInstances.GetExtensionObjectBoolean">
            <summary>设置 Extensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimExtensible.AllInstances.ProtoBufIExtensibleGetExtensionObjectBoolean">
            <summary>设置 Extensible.ProtoBuf.IExtensible.GetExtensionObject(Boolean createIfMissing) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoAfterDeserializationAttribute">
            <summary>ProtoBuf.ProtoAfterDeserializationAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoAfterDeserializationAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoAfterDeserializationAttribute.#ctor(ProtoBuf.ProtoAfterDeserializationAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoAfterDeserializationAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoAfterDeserializationAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoAfterDeserializationAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoAfterDeserializationAttribute.Constructor">
            <summary>设置 ProtoAfterDeserializationAttribute.ProtoAfterDeserializationAttribute() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoAfterDeserializationAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoAfterSerializationAttribute">
            <summary>ProtoBuf.ProtoAfterSerializationAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoAfterSerializationAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoAfterSerializationAttribute.#ctor(ProtoBuf.ProtoAfterSerializationAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoAfterSerializationAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoAfterSerializationAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoAfterSerializationAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoAfterSerializationAttribute.Constructor">
            <summary>设置 ProtoAfterSerializationAttribute.ProtoAfterSerializationAttribute() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoAfterSerializationAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoBeforeDeserializationAttribute">
            <summary>ProtoBuf.ProtoBeforeDeserializationAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoBeforeDeserializationAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoBeforeDeserializationAttribute.#ctor(ProtoBuf.ProtoBeforeDeserializationAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoBeforeDeserializationAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoBeforeDeserializationAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoBeforeDeserializationAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoBeforeDeserializationAttribute.Constructor">
            <summary>设置 ProtoBeforeDeserializationAttribute.ProtoBeforeDeserializationAttribute() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoBeforeDeserializationAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoBeforeSerializationAttribute">
            <summary>ProtoBuf.ProtoBeforeSerializationAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoBeforeSerializationAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoBeforeSerializationAttribute.#ctor(ProtoBuf.ProtoBeforeSerializationAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoBeforeSerializationAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoBeforeSerializationAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoBeforeSerializationAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoBeforeSerializationAttribute.Constructor">
            <summary>设置 ProtoBeforeSerializationAttribute.ProtoBeforeSerializationAttribute() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoBeforeSerializationAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoContractAttribute">
            <summary>ProtoBuf.ProtoContractAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoContractAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoContractAttribute.#ctor(ProtoBuf.ProtoContractAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoContractAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoContractAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AsReferenceDefaultGet">
            <summary>设置 ProtoContractAttribute.get_AsReferenceDefault() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AsReferenceDefaultSetBoolean">
            <summary>设置 ProtoContractAttribute.set_AsReferenceDefault(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.Constructor">
            <summary>设置 ProtoContractAttribute.ProtoContractAttribute() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.DataMemberOffsetGet">
            <summary>设置 ProtoContractAttribute.get_DataMemberOffset() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.DataMemberOffsetSetInt32">
            <summary>设置 ProtoContractAttribute.set_DataMemberOffset(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.EnumPassthruGet">
            <summary>设置 ProtoContractAttribute.get_EnumPassthru() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.EnumPassthruHasValueGet">
            <summary>设置 ProtoContractAttribute.get_EnumPassthruHasValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.EnumPassthruSetBoolean">
            <summary>设置 ProtoContractAttribute.set_EnumPassthru(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.HasFlagByte">
            <summary>设置 ProtoContractAttribute.HasFlag(Byte flag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.IgnoreListHandlingGet">
            <summary>设置 ProtoContractAttribute.get_IgnoreListHandling() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.IgnoreListHandlingSetBoolean">
            <summary>设置 ProtoContractAttribute.set_IgnoreListHandling(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.ImplicitFieldsGet">
            <summary>设置 ProtoContractAttribute.get_ImplicitFields() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.ImplicitFieldsSetImplicitFields">
            <summary>设置 ProtoContractAttribute.set_ImplicitFields(ImplicitFields value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.ImplicitFirstTagGet">
            <summary>设置 ProtoContractAttribute.get_ImplicitFirstTag() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.ImplicitFirstTagSetInt32">
            <summary>设置 ProtoContractAttribute.set_ImplicitFirstTag(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.InferTagFromNameGet">
            <summary>设置 ProtoContractAttribute.get_InferTagFromName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.InferTagFromNameHasValueGet">
            <summary>设置 ProtoContractAttribute.get_InferTagFromNameHasValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.InferTagFromNameSetBoolean">
            <summary>设置 ProtoContractAttribute.set_InferTagFromName(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.NameGet">
            <summary>设置 ProtoContractAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.NameSetString">
            <summary>设置 ProtoContractAttribute.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.SetFlagByteBoolean">
            <summary>设置 ProtoContractAttribute.SetFlag(Byte flag, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.SkipConstructorGet">
            <summary>设置 ProtoContractAttribute.get_SkipConstructor() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.SkipConstructorSetBoolean">
            <summary>设置 ProtoContractAttribute.set_SkipConstructor(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.UseProtoMembersOnlyGet">
            <summary>设置 ProtoContractAttribute.get_UseProtoMembersOnly() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.UseProtoMembersOnlySetBoolean">
            <summary>设置 ProtoContractAttribute.set_UseProtoMembersOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.AsReferenceDefaultGet">
            <summary>设置 ProtoContractAttribute.get_AsReferenceDefault() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.AsReferenceDefaultSetBoolean">
            <summary>设置 ProtoContractAttribute.set_AsReferenceDefault(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.DataMemberOffsetGet">
            <summary>设置 ProtoContractAttribute.get_DataMemberOffset() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.DataMemberOffsetSetInt32">
            <summary>设置 ProtoContractAttribute.set_DataMemberOffset(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.EnumPassthruGet">
            <summary>设置 ProtoContractAttribute.get_EnumPassthru() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.EnumPassthruHasValueGet">
            <summary>设置 ProtoContractAttribute.get_EnumPassthruHasValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.EnumPassthruSetBoolean">
            <summary>设置 ProtoContractAttribute.set_EnumPassthru(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.HasFlagByte">
            <summary>设置 ProtoContractAttribute.HasFlag(Byte flag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.IgnoreListHandlingGet">
            <summary>设置 ProtoContractAttribute.get_IgnoreListHandling() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.IgnoreListHandlingSetBoolean">
            <summary>设置 ProtoContractAttribute.set_IgnoreListHandling(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.ImplicitFieldsGet">
            <summary>设置 ProtoContractAttribute.get_ImplicitFields() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.ImplicitFieldsSetImplicitFields">
            <summary>设置 ProtoContractAttribute.set_ImplicitFields(ImplicitFields value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.ImplicitFirstTagGet">
            <summary>设置 ProtoContractAttribute.get_ImplicitFirstTag() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.ImplicitFirstTagSetInt32">
            <summary>设置 ProtoContractAttribute.set_ImplicitFirstTag(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.InferTagFromNameGet">
            <summary>设置 ProtoContractAttribute.get_InferTagFromName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.InferTagFromNameHasValueGet">
            <summary>设置 ProtoContractAttribute.get_InferTagFromNameHasValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.InferTagFromNameSetBoolean">
            <summary>设置 ProtoContractAttribute.set_InferTagFromName(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.NameGet">
            <summary>设置 ProtoContractAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.NameSetString">
            <summary>设置 ProtoContractAttribute.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.SetFlagByteBoolean">
            <summary>设置 ProtoContractAttribute.SetFlag(Byte flag, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.SkipConstructorGet">
            <summary>设置 ProtoContractAttribute.get_SkipConstructor() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.SkipConstructorSetBoolean">
            <summary>设置 ProtoContractAttribute.set_SkipConstructor(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.UseProtoMembersOnlyGet">
            <summary>设置 ProtoContractAttribute.get_UseProtoMembersOnly() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoContractAttribute.AllInstances.UseProtoMembersOnlySetBoolean">
            <summary>设置 ProtoContractAttribute.set_UseProtoMembersOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoEnumAttribute">
            <summary>ProtoBuf.ProtoEnumAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoEnumAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoEnumAttribute.#ctor(ProtoBuf.ProtoEnumAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoEnumAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoEnumAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.Constructor">
            <summary>设置 ProtoEnumAttribute.ProtoEnumAttribute() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.HasValue">
            <summary>设置 ProtoEnumAttribute.HasValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.NameGet">
            <summary>设置 ProtoEnumAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.NameSetString">
            <summary>设置 ProtoEnumAttribute.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.ValueGet">
            <summary>设置 ProtoEnumAttribute.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.ValueSetInt32">
            <summary>设置 ProtoEnumAttribute.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoEnumAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.AllInstances.HasValue">
            <summary>设置 ProtoEnumAttribute.HasValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.AllInstances.NameGet">
            <summary>设置 ProtoEnumAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.AllInstances.NameSetString">
            <summary>设置 ProtoEnumAttribute.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.AllInstances.ValueGet">
            <summary>设置 ProtoEnumAttribute.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoEnumAttribute.AllInstances.ValueSetInt32">
            <summary>设置 ProtoEnumAttribute.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoException">
            <summary>ProtoBuf.ProtoException 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoException.#ctor(ProtoBuf.ProtoException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoException.Constructor">
            <summary>设置 ProtoException.ProtoException() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ProtoException.ProtoException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoException.ConstructorString">
            <summary>设置 ProtoException.ProtoException(String message) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoException.ConstructorStringException">
            <summary>设置 ProtoException.ProtoException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoIgnoreAttribute">
            <summary>ProtoBuf.ProtoIgnoreAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoIgnoreAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoIgnoreAttribute.#ctor(ProtoBuf.ProtoIgnoreAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoIgnoreAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoIgnoreAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIgnoreAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIgnoreAttribute.Constructor">
            <summary>设置 ProtoIgnoreAttribute.ProtoIgnoreAttribute() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoIgnoreAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoIncludeAttribute">
            <summary>ProtoBuf.ProtoIncludeAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoIncludeAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoIncludeAttribute.#ctor(ProtoBuf.ProtoIncludeAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoIncludeAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoIncludeAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.ConstructorInt32String">
            <summary>设置 ProtoIncludeAttribute.ProtoIncludeAttribute(Int32 tag, String knownTypeName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.ConstructorInt32Type">
            <summary>设置 ProtoIncludeAttribute.ProtoIncludeAttribute(Int32 tag, Type knownType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.DataFormatGet">
            <summary>设置 ProtoIncludeAttribute.get_DataFormat() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.DataFormatSetDataFormat">
            <summary>设置 ProtoIncludeAttribute.set_DataFormat(DataFormat value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.KnownTypeGet">
            <summary>设置 ProtoIncludeAttribute.get_KnownType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.KnownTypeNameGet">
            <summary>设置 ProtoIncludeAttribute.get_KnownTypeName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.TagGet">
            <summary>设置 ProtoIncludeAttribute.get_Tag() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoIncludeAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.AllInstances.DataFormatGet">
            <summary>设置 ProtoIncludeAttribute.get_DataFormat() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.AllInstances.DataFormatSetDataFormat">
            <summary>设置 ProtoIncludeAttribute.set_DataFormat(DataFormat value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.AllInstances.KnownTypeGet">
            <summary>设置 ProtoIncludeAttribute.get_KnownType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.AllInstances.KnownTypeNameGet">
            <summary>设置 ProtoIncludeAttribute.get_KnownTypeName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoIncludeAttribute.AllInstances.TagGet">
            <summary>设置 ProtoIncludeAttribute.get_Tag() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoMemberAttribute">
            <summary>ProtoBuf.ProtoMemberAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoMemberAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoMemberAttribute.#ctor(ProtoBuf.ProtoMemberAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoMemberAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoMemberAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoMemberAttribute.Bind(System.IComparable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoMemberAttribute.Bind(System.IComparable{ProtoBuf.ProtoMemberAttribute})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AsReferenceGet">
            <summary>设置 ProtoMemberAttribute.get_AsReference() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AsReferenceHasValueGet">
            <summary>设置 ProtoMemberAttribute.get_AsReferenceHasValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AsReferenceHasValueSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_AsReferenceHasValue(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AsReferenceSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_AsReference(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.CompareToObject">
            <summary>设置 ProtoMemberAttribute.CompareTo(Object other) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.CompareToProtoMemberAttribute">
            <summary>设置 ProtoMemberAttribute.CompareTo(ProtoMemberAttribute other) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.ConstructorInt32">
            <summary>设置 ProtoMemberAttribute.ProtoMemberAttribute(Int32 tag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.ConstructorInt32Boolean">
            <summary>设置 ProtoMemberAttribute.ProtoMemberAttribute(Int32 tag, Boolean forced) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.DataFormatGet">
            <summary>设置 ProtoMemberAttribute.get_DataFormat() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.DataFormatSetDataFormat">
            <summary>设置 ProtoMemberAttribute.set_DataFormat(DataFormat value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.DynamicTypeGet">
            <summary>设置 ProtoMemberAttribute.get_DynamicType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.DynamicTypeSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_DynamicType(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.IsPackedGet">
            <summary>设置 ProtoMemberAttribute.get_IsPacked() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.IsPackedSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_IsPacked(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.IsRequiredGet">
            <summary>设置 ProtoMemberAttribute.get_IsRequired() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.IsRequiredSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_IsRequired(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.NameGet">
            <summary>设置 ProtoMemberAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.NameSetString">
            <summary>设置 ProtoMemberAttribute.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.OptionsGet">
            <summary>设置 ProtoMemberAttribute.get_Options() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.OptionsSetMemberSerializationOptions">
            <summary>设置 ProtoMemberAttribute.set_Options(MemberSerializationOptions value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.OverwriteListGet">
            <summary>设置 ProtoMemberAttribute.get_OverwriteList() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.OverwriteListSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_OverwriteList(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.RebaseInt32">
            <summary>设置 ProtoMemberAttribute.Rebase(Int32 tag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.TagGet">
            <summary>设置 ProtoMemberAttribute.get_Tag() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.AsReferenceGet">
            <summary>设置 ProtoMemberAttribute.get_AsReference() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.AsReferenceHasValueGet">
            <summary>设置 ProtoMemberAttribute.get_AsReferenceHasValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.AsReferenceHasValueSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_AsReferenceHasValue(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.AsReferenceSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_AsReference(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.CompareToObject">
            <summary>设置 ProtoMemberAttribute.CompareTo(Object other) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.CompareToProtoMemberAttribute">
            <summary>设置 ProtoMemberAttribute.CompareTo(ProtoMemberAttribute other) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.DataFormatGet">
            <summary>设置 ProtoMemberAttribute.get_DataFormat() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.DataFormatSetDataFormat">
            <summary>设置 ProtoMemberAttribute.set_DataFormat(DataFormat value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.DynamicTypeGet">
            <summary>设置 ProtoMemberAttribute.get_DynamicType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.DynamicTypeSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_DynamicType(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.IsPackedGet">
            <summary>设置 ProtoMemberAttribute.get_IsPacked() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.IsPackedSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_IsPacked(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.IsRequiredGet">
            <summary>设置 ProtoMemberAttribute.get_IsRequired() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.IsRequiredSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_IsRequired(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.NameGet">
            <summary>设置 ProtoMemberAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.NameSetString">
            <summary>设置 ProtoMemberAttribute.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.OptionsGet">
            <summary>设置 ProtoMemberAttribute.get_Options() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.OptionsSetMemberSerializationOptions">
            <summary>设置 ProtoMemberAttribute.set_Options(MemberSerializationOptions value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.OverwriteListGet">
            <summary>设置 ProtoMemberAttribute.get_OverwriteList() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.OverwriteListSetBoolean">
            <summary>设置 ProtoMemberAttribute.set_OverwriteList(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.RebaseInt32">
            <summary>设置 ProtoMemberAttribute.Rebase(Int32 tag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoMemberAttribute.AllInstances.TagGet">
            <summary>设置 ProtoMemberAttribute.get_Tag() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute">
            <summary>ProtoBuf.ProtoPartialIgnoreAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.#ctor(ProtoBuf.ProtoPartialIgnoreAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.ConstructorString">
            <summary>设置 ProtoPartialIgnoreAttribute.ProtoPartialIgnoreAttribute(String memberName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.MemberNameGet">
            <summary>设置 ProtoPartialIgnoreAttribute.get_MemberName() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoPartialIgnoreAttribute.AllInstances.MemberNameGet">
            <summary>设置 ProtoPartialIgnoreAttribute.get_MemberName() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute">
            <summary>ProtoBuf.ProtoPartialMemberAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.#ctor(ProtoBuf.ProtoPartialMemberAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.Bind(System.IComparable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.Bind(System.IComparable{ProtoBuf.ProtoMemberAttribute})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.ConstructorInt32String">
            <summary>设置 ProtoPartialMemberAttribute.ProtoPartialMemberAttribute(Int32 tag, String memberName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.MemberNameGet">
            <summary>设置 ProtoPartialMemberAttribute.get_MemberName() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoPartialMemberAttribute.AllInstances.MemberNameGet">
            <summary>设置 ProtoPartialMemberAttribute.get_MemberName() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoReader">
            <summary>ProtoBuf.ProtoReader 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoReader.#ctor(ProtoBuf.ProtoReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoReader.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AddErrorDataExceptionProtoReader">
            <summary>设置 ProtoReader.AddErrorData(Exception exception, ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AppendBytesByteArrayProtoReader">
            <summary>设置 ProtoReader.AppendBytes(Byte[] value, ProtoReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AppendExtensionDataIExtensible">
            <summary>设置 ProtoReader.AppendExtensionData(IExtensible instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AppendExtensionFieldProtoWriter">
            <summary>设置 ProtoReader.AppendExtensionField(ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AssertWireType">
            <summary>设置 ProtoReader.Assert(WireType wireType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.CheckFullyConsumed">
            <summary>设置 ProtoReader.CheckFullyConsumed() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ConstructorStreamTypeModelSerializationContext">
            <summary>设置 ProtoReader.ProtoReader(Stream source, TypeModel model, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ConstructorStreamTypeModelSerializationContextInt32">
            <summary>设置 ProtoReader.ProtoReader(Stream source, TypeModel model, SerializationContext context, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ContextGet">
            <summary>设置 ProtoReader.get_Context() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.CreateExceptionString">
            <summary>设置 ProtoReader.CreateException(String message) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.CreateStreamTypeModelSerializationContextInt32">
            <summary>设置 ProtoReader.Create(Stream source, TypeModel model, SerializationContext context, Int32 len) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.CreateWireTypeException">
            <summary>设置 ProtoReader.CreateWireTypeException() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.DeserializeTypeString">
            <summary>设置 ProtoReader.DeserializeType(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.DirectReadBigEndianInt32Stream">
            <summary>设置 ProtoReader.DirectReadBigEndianInt32(Stream source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.DirectReadBytesStreamByteArrayInt32Int32">
            <summary>设置 ProtoReader.DirectReadBytes(Stream source, Byte[] buffer, Int32 offset, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.DirectReadBytesStreamInt32">
            <summary>设置 ProtoReader.DirectReadBytes(Stream source, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.DirectReadLittleEndianInt32Stream">
            <summary>设置 ProtoReader.DirectReadLittleEndianInt32(Stream source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.DirectReadStringStreamInt32">
            <summary>设置 ProtoReader.DirectReadString(Stream source, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.DirectReadVarintInt32Stream">
            <summary>设置 ProtoReader.DirectReadVarintInt32(Stream source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.Dispose">
            <summary>设置 ProtoReader.Dispose() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.EndSubItemSubItemTokenProtoReader">
            <summary>设置 ProtoReader.EndSubItem(SubItemToken token, ProtoReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.EnsureInt32Boolean">
            <summary>设置 ProtoReader.Ensure(Int32 count, Boolean strict) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.EoFProtoReader">
            <summary>设置 ProtoReader.EoF(ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.FieldNumberGet">
            <summary>设置 ProtoReader.get_FieldNumber() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.GetRecycled">
            <summary>设置 ProtoReader.GetRecycled() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.GetTypeKeyTypeRef">
            <summary>设置 ProtoReader.GetTypeKey(Type&amp; type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.HasSubValueWireTypeProtoReader">
            <summary>设置 ProtoReader.HasSubValue(WireType wireType, ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.HintWireType">
            <summary>设置 ProtoReader.Hint(WireType wireType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.InitProtoReaderStreamTypeModelSerializationContextInt32">
            <summary>设置 ProtoReader.Init(ProtoReader reader, Stream source, TypeModel model, SerializationContext context, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.InternString">
            <summary>设置 ProtoReader.Intern(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.InternStringsGet">
            <summary>设置 ProtoReader.get_InternStrings() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.InternStringsSetBoolean">
            <summary>设置 ProtoReader.set_InternStrings(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.MergeProtoReaderObjectObject">
            <summary>设置 ProtoReader.Merge(ProtoReader parent, Object from, Object to) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ModelGet">
            <summary>设置 ProtoReader.get_Model() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.NoteObjectObjectProtoReader">
            <summary>设置 ProtoReader.NoteObject(Object value, ProtoReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.PositionGet">
            <summary>设置 ProtoReader.get_Position() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadBoolean">
            <summary>设置 ProtoReader.ReadBoolean() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadByte">
            <summary>设置 ProtoReader.ReadByte() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadByteOrThrowStream">
            <summary>设置 ProtoReader.ReadByteOrThrow(Stream source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadDouble">
            <summary>设置 ProtoReader.ReadDouble() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadFieldHeader">
            <summary>设置 ProtoReader.ReadFieldHeader() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadInt16">
            <summary>设置 ProtoReader.ReadInt16() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadInt32">
            <summary>设置 ProtoReader.ReadInt32() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadInt64">
            <summary>设置 ProtoReader.ReadInt64() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadLengthPrefixStreamBooleanPrefixStyleInt32Out">
            <summary>设置 ProtoReader.ReadLengthPrefix(Stream source, Boolean expectHeader, PrefixStyle style, Int32&amp; fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadLengthPrefixStreamBooleanPrefixStyleInt32OutInt32Out">
            <summary>设置 ProtoReader.ReadLengthPrefix(Stream source, Boolean expectHeader, PrefixStyle style, Int32&amp; fieldNumber, Int32&amp; bytesRead) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadObjectObjectInt32ProtoReader">
            <summary>设置 ProtoReader.ReadObject(Object value, Int32 key, ProtoReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadSByte">
            <summary>设置 ProtoReader.ReadSByte() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadSingle">
            <summary>设置 ProtoReader.ReadSingle() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadString">
            <summary>设置 ProtoReader.ReadString() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadType">
            <summary>设置 ProtoReader.ReadType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadTypedObjectObjectInt32ProtoReaderType">
            <summary>设置 ProtoReader.ReadTypedObject(Object value, Int32 key, ProtoReader reader, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadUInt16">
            <summary>设置 ProtoReader.ReadUInt16() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadUInt32">
            <summary>设置 ProtoReader.ReadUInt32() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadUInt32VariantBoolean">
            <summary>设置 ProtoReader.ReadUInt32Variant(Boolean trimNegative) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadUInt64">
            <summary>设置 ProtoReader.ReadUInt64() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ReadUInt64Variant">
            <summary>设置 ProtoReader.ReadUInt64Variant() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.RecycleProtoReader">
            <summary>设置 ProtoReader.Recycle(ProtoReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.SeekStreamInt32ByteArray">
            <summary>设置 ProtoReader.Seek(Stream source, Int32 count, Byte[] buffer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.SetRootObjectObject">
            <summary>设置 ProtoReader.SetRootObject(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.SkipField">
            <summary>设置 ProtoReader.SkipField() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.StartSubItemProtoReader">
            <summary>设置 ProtoReader.StartSubItem(ProtoReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.StaticConstructor">
            <summary>设置 ProtoReader.ProtoReader() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ThrowEnumExceptionTypeInt32">
            <summary>设置 ProtoReader.ThrowEnumException(Type type, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.TrapNextObjectInt32">
            <summary>设置 ProtoReader.TrapNextObject(Int32 newObjectKey) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.TryReadFieldHeaderInt32">
            <summary>设置 ProtoReader.TryReadFieldHeader(Int32 field) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.TryReadUInt32VariantStreamUInt32Out">
            <summary>设置 ProtoReader.TryReadUInt32Variant(Stream source, UInt32&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.TryReadUInt32VariantUInt32Out">
            <summary>设置 ProtoReader.TryReadUInt32Variant(UInt32&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.TryReadUInt32VariantWithoutMovingBooleanUInt32Out">
            <summary>设置 ProtoReader.TryReadUInt32VariantWithoutMoving(Boolean trimNegative, UInt32&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.TryReadUInt64VariantWithoutMovingUInt64Out">
            <summary>设置 ProtoReader.TryReadUInt64VariantWithoutMoving(UInt64&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.WireTypeGet">
            <summary>设置 ProtoReader.get_WireType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ZagUInt32">
            <summary>设置 ProtoReader.Zag(UInt32 ziggedValue) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.ZagUInt64">
            <summary>设置 ProtoReader.Zag(UInt64 ziggedValue) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.AppendExtensionDataIExtensible">
            <summary>设置 ProtoReader.AppendExtensionData(IExtensible instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.AppendExtensionFieldProtoWriter">
            <summary>设置 ProtoReader.AppendExtensionField(ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.AssertWireType">
            <summary>设置 ProtoReader.Assert(WireType wireType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.CheckFullyConsumed">
            <summary>设置 ProtoReader.CheckFullyConsumed() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ContextGet">
            <summary>设置 ProtoReader.get_Context() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.CreateExceptionString">
            <summary>设置 ProtoReader.CreateException(String message) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.CreateWireTypeException">
            <summary>设置 ProtoReader.CreateWireTypeException() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.DeserializeTypeString">
            <summary>设置 ProtoReader.DeserializeType(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.Dispose">
            <summary>设置 ProtoReader.Dispose() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.EnsureInt32Boolean">
            <summary>设置 ProtoReader.Ensure(Int32 count, Boolean strict) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.FieldNumberGet">
            <summary>设置 ProtoReader.get_FieldNumber() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.GetTypeKeyTypeRef">
            <summary>设置 ProtoReader.GetTypeKey(Type&amp; type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.HintWireType">
            <summary>设置 ProtoReader.Hint(WireType wireType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.InternString">
            <summary>设置 ProtoReader.Intern(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.InternStringsGet">
            <summary>设置 ProtoReader.get_InternStrings() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.InternStringsSetBoolean">
            <summary>设置 ProtoReader.set_InternStrings(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ModelGet">
            <summary>设置 ProtoReader.get_Model() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.PositionGet">
            <summary>设置 ProtoReader.get_Position() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadBoolean">
            <summary>设置 ProtoReader.ReadBoolean() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadByte">
            <summary>设置 ProtoReader.ReadByte() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadDouble">
            <summary>设置 ProtoReader.ReadDouble() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadFieldHeader">
            <summary>设置 ProtoReader.ReadFieldHeader() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadInt16">
            <summary>设置 ProtoReader.ReadInt16() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadInt32">
            <summary>设置 ProtoReader.ReadInt32() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadInt64">
            <summary>设置 ProtoReader.ReadInt64() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadSByte">
            <summary>设置 ProtoReader.ReadSByte() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadSingle">
            <summary>设置 ProtoReader.ReadSingle() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadString">
            <summary>设置 ProtoReader.ReadString() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadType">
            <summary>设置 ProtoReader.ReadType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadUInt16">
            <summary>设置 ProtoReader.ReadUInt16() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadUInt32">
            <summary>设置 ProtoReader.ReadUInt32() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadUInt32VariantBoolean">
            <summary>设置 ProtoReader.ReadUInt32Variant(Boolean trimNegative) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadUInt64">
            <summary>设置 ProtoReader.ReadUInt64() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ReadUInt64Variant">
            <summary>设置 ProtoReader.ReadUInt64Variant() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.SetRootObjectObject">
            <summary>设置 ProtoReader.SetRootObject(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.SkipField">
            <summary>设置 ProtoReader.SkipField() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.ThrowEnumExceptionTypeInt32">
            <summary>设置 ProtoReader.ThrowEnumException(Type type, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.TrapNextObjectInt32">
            <summary>设置 ProtoReader.TrapNextObject(Int32 newObjectKey) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.TryReadFieldHeaderInt32">
            <summary>设置 ProtoReader.TryReadFieldHeader(Int32 field) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.TryReadUInt32VariantUInt32Out">
            <summary>设置 ProtoReader.TryReadUInt32Variant(UInt32&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.TryReadUInt32VariantWithoutMovingBooleanUInt32Out">
            <summary>设置 ProtoReader.TryReadUInt32VariantWithoutMoving(Boolean trimNegative, UInt32&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.TryReadUInt64VariantWithoutMovingUInt64Out">
            <summary>设置 ProtoReader.TryReadUInt64VariantWithoutMoving(UInt64&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoReader.AllInstances.WireTypeGet">
            <summary>设置 ProtoReader.get_WireType() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoWriter">
            <summary>ProtoBuf.ProtoWriter 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoWriter.#ctor(ProtoBuf.ProtoWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimProtoWriter.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AppendExtensionDataIExtensibleProtoWriter">
            <summary>设置 ProtoWriter.AppendExtensionData(IExtensible instance, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.CheckDepthFlushlock">
            <summary>设置 ProtoWriter.CheckDepthFlushlock() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.CheckRecursionStackAndPushObject">
            <summary>设置 ProtoWriter.CheckRecursionStackAndPush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.Close">
            <summary>设置 ProtoWriter.Close() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.ConstructorStreamTypeModelSerializationContext">
            <summary>设置 ProtoWriter.ProtoWriter(Stream dest, TypeModel model, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.ContextGet">
            <summary>设置 ProtoWriter.get_Context() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.CopyRawFromStreamStreamProtoWriter">
            <summary>设置 ProtoWriter.CopyRawFromStream(Stream source, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.CreateExceptionProtoWriter">
            <summary>设置 ProtoWriter.CreateException(ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.DemandSpaceInt32ProtoWriter">
            <summary>设置 ProtoWriter.DemandSpace(Int32 required, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.Dispose">
            <summary>设置 ProtoWriter.Dispose() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.EndSubItemSubItemTokenProtoWriter">
            <summary>设置 ProtoWriter.EndSubItem(SubItemToken token, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.EndSubItemSubItemTokenProtoWriterPrefixStyle">
            <summary>设置 ProtoWriter.EndSubItem(SubItemToken token, ProtoWriter writer, PrefixStyle style) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.FlushProtoWriter">
            <summary>设置 ProtoWriter.Flush(ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.GetPositionProtoWriter">
            <summary>设置 ProtoWriter.GetPosition(ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.GetTypeKeyTypeRef">
            <summary>设置 ProtoWriter.GetTypeKey(Type&amp; type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.IncrementedAndResetInt32ProtoWriter">
            <summary>设置 ProtoWriter.IncrementedAndReset(Int32 length, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.ModelGet">
            <summary>设置 ProtoWriter.get_Model() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.PopRecursionStack">
            <summary>设置 ProtoWriter.PopRecursionStack() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.SerializeTypeType">
            <summary>设置 ProtoWriter.SerializeType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.SetPackedFieldInt32ProtoWriter">
            <summary>设置 ProtoWriter.SetPackedField(Int32 fieldNumber, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.SetRootObjectObject">
            <summary>设置 ProtoWriter.SetRootObject(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.StartSubItemObjectProtoWriter">
            <summary>设置 ProtoWriter.StartSubItem(Object instance, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.StartSubItemObjectProtoWriterBoolean">
            <summary>设置 ProtoWriter.StartSubItem(Object instance, ProtoWriter writer, Boolean allowFixed) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.StaticConstructor">
            <summary>设置 ProtoWriter.ProtoWriter() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.SystemIDisposableDispose">
            <summary>设置 ProtoWriter.System.IDisposable.Dispose() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.ThrowEnumExceptionProtoWriterObject">
            <summary>设置 ProtoWriter.ThrowEnumException(ProtoWriter writer, Object enumValue) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WireTypeGet">
            <summary>设置 ProtoWriter.get_WireType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteBooleanBooleanProtoWriter">
            <summary>设置 ProtoWriter.WriteBoolean(Boolean value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteByteByteProtoWriter">
            <summary>设置 ProtoWriter.WriteByte(Byte value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteBytesByteArrayInt32Int32ProtoWriter">
            <summary>设置 ProtoWriter.WriteBytes(Byte[] data, Int32 offset, Int32 length, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteBytesByteArrayProtoWriter">
            <summary>设置 ProtoWriter.WriteBytes(Byte[] data, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteDoubleDoubleProtoWriter">
            <summary>设置 ProtoWriter.WriteDouble(Double value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteFieldHeaderInt32WireTypeProtoWriter">
            <summary>设置 ProtoWriter.WriteFieldHeader(Int32 fieldNumber, WireType wireType, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteHeaderCoreInt32WireTypeProtoWriter">
            <summary>设置 ProtoWriter.WriteHeaderCore(Int32 fieldNumber, WireType wireType, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteInt16Int16ProtoWriter">
            <summary>设置 ProtoWriter.WriteInt16(Int16 value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteInt32Int32ProtoWriter">
            <summary>设置 ProtoWriter.WriteInt32(Int32 value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteInt32ToBufferInt32ByteArrayInt32">
            <summary>设置 ProtoWriter.WriteInt32ToBuffer(Int32 value, Byte[] buffer, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteInt64Int64ProtoWriter">
            <summary>设置 ProtoWriter.WriteInt64(Int64 value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteObjectObjectInt32ProtoWriter">
            <summary>设置 ProtoWriter.WriteObject(Object value, Int32 key, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteObjectObjectInt32ProtoWriterPrefixStyleInt32">
            <summary>设置 ProtoWriter.WriteObject(Object value, Int32 key, ProtoWriter writer, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteRecursionSafeObjectObjectInt32ProtoWriter">
            <summary>设置 ProtoWriter.WriteRecursionSafeObject(Object value, Int32 key, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteSByteSByteProtoWriter">
            <summary>设置 ProtoWriter.WriteSByte(SByte value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteSingleSingleProtoWriter">
            <summary>设置 ProtoWriter.WriteSingle(Single value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteStringStringProtoWriter">
            <summary>设置 ProtoWriter.WriteString(String value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteTypeTypeProtoWriter">
            <summary>设置 ProtoWriter.WriteType(Type value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteUInt16UInt16ProtoWriter">
            <summary>设置 ProtoWriter.WriteUInt16(UInt16 value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteUInt32UInt32ProtoWriter">
            <summary>设置 ProtoWriter.WriteUInt32(UInt32 value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteUInt32VariantUInt32ProtoWriter">
            <summary>设置 ProtoWriter.WriteUInt32Variant(UInt32 value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteUInt64UInt64ProtoWriter">
            <summary>设置 ProtoWriter.WriteUInt64(UInt64 value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.WriteUInt64VariantUInt64ProtoWriter">
            <summary>设置 ProtoWriter.WriteUInt64Variant(UInt64 value, ProtoWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.ZigInt32">
            <summary>设置 ProtoWriter.Zig(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.ZigInt64">
            <summary>设置 ProtoWriter.Zig(Int64 value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimProtoWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.CheckDepthFlushlock">
            <summary>设置 ProtoWriter.CheckDepthFlushlock() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.CheckRecursionStackAndPushObject">
            <summary>设置 ProtoWriter.CheckRecursionStackAndPush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.Close">
            <summary>设置 ProtoWriter.Close() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.ContextGet">
            <summary>设置 ProtoWriter.get_Context() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.Dispose">
            <summary>设置 ProtoWriter.Dispose() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.GetTypeKeyTypeRef">
            <summary>设置 ProtoWriter.GetTypeKey(Type&amp; type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.ModelGet">
            <summary>设置 ProtoWriter.get_Model() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.PopRecursionStack">
            <summary>设置 ProtoWriter.PopRecursionStack() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.SerializeTypeType">
            <summary>设置 ProtoWriter.SerializeType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.SetRootObjectObject">
            <summary>设置 ProtoWriter.SetRootObject(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.SystemIDisposableDispose">
            <summary>设置 ProtoWriter.System.IDisposable.Dispose() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimProtoWriter.AllInstances.WireTypeGet">
            <summary>设置 ProtoWriter.get_WireType() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimSerializationContext">
            <summary>ProtoBuf.SerializationContext 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializationContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializationContext.#ctor(ProtoBuf.SerializationContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializationContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializationContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.Constructor">
            <summary>设置 SerializationContext.SerializationContext() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.ContextGet">
            <summary>设置 SerializationContext.get_Context() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.ContextSetObject">
            <summary>设置 SerializationContext.set_Context(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.DefaultGet">
            <summary>设置 SerializationContext.get_Default() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.Freeze">
            <summary>设置 SerializationContext.Freeze() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.ImplicitOpSerializationContextStreamingContext">
            <summary>设置 SerializationContext.op_Implicit(SerializationContext ctx) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.ImplicitOpStreamingContextSerializationContext">
            <summary>设置 SerializationContext.op_Implicit(StreamingContext ctx) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.StateGet">
            <summary>设置 SerializationContext.get_State() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.StateSetStreamingContextStates">
            <summary>设置 SerializationContext.set_State(StreamingContextStates value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.StaticConstructor">
            <summary>设置 SerializationContext.SerializationContext() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.ThrowIfFrozen">
            <summary>设置 SerializationContext.ThrowIfFrozen() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimSerializationContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.AllInstances.ContextGet">
            <summary>设置 SerializationContext.get_Context() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.AllInstances.ContextSetObject">
            <summary>设置 SerializationContext.set_Context(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.AllInstances.Freeze">
            <summary>设置 SerializationContext.Freeze() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.AllInstances.StateGet">
            <summary>设置 SerializationContext.get_State() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.AllInstances.StateSetStreamingContextStates">
            <summary>设置 SerializationContext.set_State(StreamingContextStates value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializationContext.AllInstances.ThrowIfFrozen">
            <summary>设置 SerializationContext.ThrowIfFrozen() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimSerializer">
            <summary>ProtoBuf.Serializer 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.ChangeTypeOf2M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``1})">
            <summary>设置 Serializer.ChangeType(!!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.CreateFormatterOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Runtime.Serialization.IFormatter})">
            <summary>设置 Serializer.CreateFormatter() 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.DeepCloneOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``0})">
            <summary>设置 Serializer.DeepClone(!!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.DeserializeItemsOf1StreamPrefixStyleInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 Serializer.DeserializeItems(Stream source, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.DeserializeOf1Stream``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.IO.Stream,``0})">
            <summary>设置 Serializer.Deserialize(Stream source) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.DeserializeWithLengthPrefixOf1StreamPrefixStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.IO.Stream,ProtoBuf.PrefixStyle,``0})">
            <summary>设置 Serializer.DeserializeWithLengthPrefix(Stream source, PrefixStyle style) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.DeserializeWithLengthPrefixOf1StreamPrefixStyleInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32,``0})">
            <summary>设置 Serializer.DeserializeWithLengthPrefix(Stream source, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.GetProtoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String})">
            <summary>设置 Serializer.GetProto() 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.MergeOf1SerializationInfoM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Runtime.Serialization.SerializationInfo,``0})">
            <summary>设置 Serializer.Merge(SerializationInfo info, !!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.MergeOf1SerializationInfoStreamingContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,``0})">
            <summary>设置 Serializer.Merge(SerializationInfo info, StreamingContext context, !!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.MergeOf1StreamM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.IO.Stream,``0,``0})">
            <summary>设置 Serializer.Merge(Stream source, !!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.MergeOf1XmlReaderM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Xml.XmlReader,``0})">
            <summary>设置 Serializer.Merge(XmlReader reader, !!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.MergeWithLengthPrefixOf1StreamM0PrefixStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.IO.Stream,``0,ProtoBuf.PrefixStyle,``0})">
            <summary>设置 Serializer.MergeWithLengthPrefix(Stream source, !!0 instance, PrefixStyle style) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.PrepareSerializerOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>设置 Serializer.PrepareSerializer() 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.SerializeOf1SerializationInfoM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Runtime.Serialization.SerializationInfo,``0})">
            <summary>设置 Serializer.Serialize(SerializationInfo info, !!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.SerializeOf1SerializationInfoStreamingContextM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,``0})">
            <summary>设置 Serializer.Serialize(SerializationInfo info, StreamingContext context, !!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.SerializeOf1StreamM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IO.Stream,``0})">
            <summary>设置 Serializer.Serialize(Stream destination, !!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.SerializeOf1XmlWriterM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Xml.XmlWriter,``0})">
            <summary>设置 Serializer.Serialize(XmlWriter writer, !!0 instance) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.SerializeWithLengthPrefixOf1StreamM0PrefixStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IO.Stream,``0,ProtoBuf.PrefixStyle})">
            <summary>设置 Serializer.SerializeWithLengthPrefix(Stream destination, !!0 instance, PrefixStyle style) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.SerializeWithLengthPrefixOf1StreamM0PrefixStyleInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.IO.Stream,``0,ProtoBuf.PrefixStyle,System.Int32})">
            <summary>设置 Serializer.SerializeWithLengthPrefix(Stream destination, !!0 instance, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.FlushPool">
            <summary>设置 Serializer.FlushPool() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.TryReadLengthPrefixByteArrayInt32Int32PrefixStyleInt32Out">
            <summary>设置 Serializer.TryReadLengthPrefix(Byte[] buffer, Int32 index, Int32 count, PrefixStyle style, Int32&amp; length) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.TryReadLengthPrefixStreamPrefixStyleInt32Out">
            <summary>设置 Serializer.TryReadLengthPrefix(Stream source, PrefixStyle style, Int32&amp; length) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimSerializer.ShimGlobalOptions">
            <summary>ProtoBuf.Serializer+GlobalOptions 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.ShimGlobalOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.ShimGlobalOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.ShimGlobalOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimGlobalOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimGlobalOptions.InferTagFromNameGet">
            <summary>设置 GlobalOptions.get_InferTagFromName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimGlobalOptions.InferTagFromNameSetBoolean">
            <summary>设置 GlobalOptions.set_InferTagFromName(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric">
            <summary>ProtoBuf.Serializer+NonGeneric 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.CanSerializeType">
            <summary>设置 NonGeneric.CanSerialize(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.DeepCloneObject">
            <summary>设置 NonGeneric.DeepClone(Object instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.DeserializeTypeStream">
            <summary>设置 NonGeneric.Deserialize(Type type, Stream source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.MergeStreamObject">
            <summary>设置 NonGeneric.Merge(Stream source, Object instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.SerializeStreamObject">
            <summary>设置 NonGeneric.Serialize(Stream dest, Object instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.SerializeWithLengthPrefixStreamObjectPrefixStyleInt32">
            <summary>设置 NonGeneric.SerializeWithLengthPrefix(Stream destination, Object instance, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSerializer.ShimNonGeneric.TryDeserializeWithLengthPrefixStreamPrefixStyleSerializerTypeResolverObjectOut">
            <summary>设置 NonGeneric.TryDeserializeWithLengthPrefix(Stream source, PrefixStyle style, TypeResolver resolver, Object&amp; value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimSubItemToken">
            <summary>ProtoBuf.SubItemToken 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSubItemToken.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSubItemToken.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.ShimSubItemToken.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.ShimSubItemToken.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.ShimSubItemToken.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.StubExtensible">
            <summary>ProtoBuf.Extensible 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubExtensible.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubExtensible.InitializeStub">
            <summary>初始化 type StubExtensible 的新实例</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubExtensible.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubExtensible.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubExtensible.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.StubIExtensible">
            <summary>ProtoBuf.IExtensible 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubIExtensible.#ctor">
            <summary>初始化 type StubIExtensible 的新实例</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubIExtensible.GetExtensionObjectBoolean">
            <summary>设置 IExtensible.GetExtensionObject(Boolean createIfMissing) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubIExtensible.p::ProtoBuf#IExtensible#GetExtensionObject(System.Boolean)">
            <summary>设置 IExtensible.GetExtensionObject(Boolean createIfMissing) 的 存根</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.StubIExtension">
            <summary>ProtoBuf.IExtension 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubIExtension.#ctor">
            <summary>初始化 type StubIExtension 的新实例</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubIExtension.BeginAppend">
            <summary>设置 IExtension.BeginAppend() 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubIExtension.BeginQuery">
            <summary>设置 IExtension.BeginQuery() 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubIExtension.EndAppendStreamBoolean">
            <summary>设置 IExtension.EndAppend(Stream stream, Boolean commit) 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubIExtension.EndQueryStream">
            <summary>设置 IExtension.EndQuery(Stream stream) 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubIExtension.GetLength">
            <summary>设置 IExtension.GetLength() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubIExtension.p::ProtoBuf#IExtension#BeginAppend">
            <summary>设置 IExtension.BeginAppend() 的 存根</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubIExtension.p::ProtoBuf#IExtension#BeginQuery">
            <summary>设置 IExtension.BeginQuery() 的 存根</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubIExtension.p::ProtoBuf#IExtension#EndAppend(System.IO.Stream,System.Boolean)">
            <summary>设置 IExtension.EndAppend(Stream stream, Boolean commit) 的 存根</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubIExtension.p::ProtoBuf#IExtension#EndQuery(System.IO.Stream)">
            <summary>设置 IExtension.EndQuery(Stream stream) 的 存根</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubIExtension.p::ProtoBuf#IExtension#GetLength">
            <summary>设置 IExtension.GetLength() 的 存根</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.StubProtoException">
            <summary>ProtoBuf.ProtoException 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubProtoException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubProtoException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.InitializeStub">
            <summary>初始化 type StubProtoException 的新实例</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.StubProtoIgnoreAttribute">
            <summary>ProtoBuf.ProtoIgnoreAttribute 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoIgnoreAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoIgnoreAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoIgnoreAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoIgnoreAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoIgnoreAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoIgnoreAttribute.InitializeStub">
            <summary>初始化 type StubProtoIgnoreAttribute 的新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoIgnoreAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoIgnoreAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoIgnoreAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoIgnoreAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoIgnoreAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoIgnoreAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoIgnoreAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoIgnoreAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoIgnoreAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:ProtoBuf.Fakes.StubProtoMemberAttribute">
            <summary>ProtoBuf.ProtoMemberAttribute 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoMemberAttribute.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoMemberAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoMemberAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoMemberAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoMemberAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoMemberAttribute.InitializeStub">
            <summary>初始化 type StubProtoMemberAttribute 的新实例</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoMemberAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoMemberAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Fakes.StubProtoMemberAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoMemberAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.Fakes.StubProtoMemberAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoMemberAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoMemberAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoMemberAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ProtoBuf.Fakes.StubProtoMemberAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimCallbackSet">
            <summary>ProtoBuf.Meta.CallbackSet 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimCallbackSet.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimCallbackSet.#ctor(ProtoBuf.Meta.CallbackSet)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimCallbackSet.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimCallbackSet.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AfterDeserializeGet">
            <summary>设置 CallbackSet.get_AfterDeserialize() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AfterDeserializeSetMethodInfo">
            <summary>设置 CallbackSet.set_AfterDeserialize(MethodInfo value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AfterSerializeGet">
            <summary>设置 CallbackSet.get_AfterSerialize() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AfterSerializeSetMethodInfo">
            <summary>设置 CallbackSet.set_AfterSerialize(MethodInfo value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.BeforeDeserializeGet">
            <summary>设置 CallbackSet.get_BeforeDeserialize() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.BeforeDeserializeSetMethodInfo">
            <summary>设置 CallbackSet.set_BeforeDeserialize(MethodInfo value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.BeforeSerializeGet">
            <summary>设置 CallbackSet.get_BeforeSerialize() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.BeforeSerializeSetMethodInfo">
            <summary>设置 CallbackSet.set_BeforeSerialize(MethodInfo value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.CheckCallbackParametersTypeModelMethodInfo">
            <summary>设置 CallbackSet.CheckCallbackParameters(TypeModel model, MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.ConstructorMetaType">
            <summary>设置 CallbackSet.CallbackSet(MetaType metaType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.CreateInvalidCallbackSignatureMethodInfo">
            <summary>设置 CallbackSet.CreateInvalidCallbackSignature(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.NonTrivialGet">
            <summary>设置 CallbackSet.get_NonTrivial() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.SanityCheckCallbackTypeModelMethodInfo">
            <summary>设置 CallbackSet.SanityCheckCallback(TypeModel model, MethodInfo callback) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.AfterDeserializeGet">
            <summary>设置 CallbackSet.get_AfterDeserialize() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.AfterDeserializeSetMethodInfo">
            <summary>设置 CallbackSet.set_AfterDeserialize(MethodInfo value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.AfterSerializeGet">
            <summary>设置 CallbackSet.get_AfterSerialize() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.AfterSerializeSetMethodInfo">
            <summary>设置 CallbackSet.set_AfterSerialize(MethodInfo value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.BeforeDeserializeGet">
            <summary>设置 CallbackSet.get_BeforeDeserialize() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.BeforeDeserializeSetMethodInfo">
            <summary>设置 CallbackSet.set_BeforeDeserialize(MethodInfo value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.BeforeSerializeGet">
            <summary>设置 CallbackSet.get_BeforeSerialize() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.BeforeSerializeSetMethodInfo">
            <summary>设置 CallbackSet.set_BeforeSerialize(MethodInfo value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.NonTrivialGet">
            <summary>设置 CallbackSet.get_NonTrivial() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimCallbackSet.AllInstances.SanityCheckCallbackTypeModelMethodInfo">
            <summary>设置 CallbackSet.SanityCheckCallback(TypeModel model, MethodInfo callback) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs">
            <summary>ProtoBuf.Meta.LockContentedEventArgs 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.#ctor(ProtoBuf.Meta.LockContentedEventArgs)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.ConstructorString">
            <summary>设置 LockContentedEventArgs.LockContentedEventArgs(String ownerStackTrace) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.OwnerStackTraceGet">
            <summary>设置 LockContentedEventArgs.get_OwnerStackTrace() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimLockContentedEventArgs.AllInstances.OwnerStackTraceGet">
            <summary>设置 LockContentedEventArgs.get_OwnerStackTrace() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimMetaType">
            <summary>ProtoBuf.Meta.MetaType 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimMetaType.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimMetaType.#ctor(ProtoBuf.Meta.MetaType)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimMetaType.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimMetaType.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddFieldInt32String">
            <summary>设置 MetaType.AddField(Int32 fieldNumber, String memberName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddFieldInt32StringTypeType">
            <summary>设置 MetaType.AddField(Int32 fieldNumber, String memberName, Type itemType, Type defaultType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddFieldInt32StringTypeTypeObject">
            <summary>设置 MetaType.AddField(Int32 fieldNumber, String memberName, Type itemType, Type defaultType, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddInt32String">
            <summary>设置 MetaType.Add(Int32 fieldNumber, String memberName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddInt32StringObject">
            <summary>设置 MetaType.Add(Int32 fieldNumber, String memberName, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddInt32StringTypeType">
            <summary>设置 MetaType.Add(Int32 fieldNumber, String memberName, Type itemType, Type defaultType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddString">
            <summary>设置 MetaType.Add(String memberName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddStringArray">
            <summary>设置 MetaType.Add(String[] memberNames) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddSubTypeInt32Type">
            <summary>设置 MetaType.AddSubType(Int32 fieldNumber, Type derivedType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddSubTypeInt32TypeDataFormat">
            <summary>设置 MetaType.AddSubType(Int32 fieldNumber, Type derivedType, DataFormat dataFormat) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AddValueMember">
            <summary>设置 MetaType.Add(ValueMember member) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ApplyDefaultBehaviour">
            <summary>设置 MetaType.ApplyDefaultBehaviour() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ApplyDefaultBehaviourBooleanProtoMemberAttribute">
            <summary>设置 MetaType.ApplyDefaultBehaviour(Boolean isEnum, ProtoMemberAttribute normalizedAttribute) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AsReferenceDefaultGet">
            <summary>设置 MetaType.get_AsReferenceDefault() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AsReferenceDefaultSetBoolean">
            <summary>设置 MetaType.set_AsReferenceDefault(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.BaseTypeGet">
            <summary>设置 MetaType.get_BaseType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.CallbacksGet">
            <summary>设置 MetaType.get_Callbacks() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.CoalesceMethodInfoArrayInt32Int32">
            <summary>设置 MetaType.Coalesce(MethodInfo[] arr, Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.CompileInPlace">
            <summary>设置 MetaType.CompileInPlace() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ConstructTypeGet">
            <summary>设置 MetaType.get_ConstructType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ConstructTypeSetType">
            <summary>设置 MetaType.set_ConstructType(Type value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ConstructorRuntimeTypeModelTypeMethodInfo">
            <summary>设置 MetaType.MetaType(RuntimeTypeModel model, Type type, MethodInfo factory) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.EnumPassthruGet">
            <summary>设置 MetaType.get_EnumPassthru() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.EnumPassthruSetBoolean">
            <summary>设置 MetaType.set_EnumPassthru(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.FieldsGet">
            <summary>设置 MetaType.get_Fields() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetAsReferenceDefaultRuntimeTypeModelType">
            <summary>设置 MetaType.GetAsReferenceDefault(RuntimeTypeModel model, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetBaseTypeMetaType">
            <summary>设置 MetaType.GetBaseType(MetaType type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetFields">
            <summary>设置 MetaType.GetFields() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetKeyBooleanBoolean">
            <summary>设置 MetaType.GetKey(Boolean demand, Boolean getBaseKey) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetNextFieldNumber">
            <summary>设置 MetaType.GetNextFieldNumber() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetRootTypeMetaType">
            <summary>设置 MetaType.GetRootType(MetaType source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetSchemaTypeName">
            <summary>设置 MetaType.GetSchemaTypeName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetSubtypes">
            <summary>设置 MetaType.GetSubtypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetSurrogateOrBaseOrSelfBoolean">
            <summary>设置 MetaType.GetSurrogateOrBaseOrSelf(Boolean deep) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.GetSurrogateOrSelf">
            <summary>设置 MetaType.GetSurrogateOrSelf() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.HasCallbacksGet">
            <summary>设置 MetaType.get_HasCallbacks() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.HasFlagByte">
            <summary>设置 MetaType.HasFlag(Byte flag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.HasSubtypesGet">
            <summary>设置 MetaType.get_HasSubtypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IgnoreListHandlingGet">
            <summary>设置 MetaType.get_IgnoreListHandling() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IgnoreListHandlingSetBoolean">
            <summary>设置 MetaType.set_IgnoreListHandling(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.InbuiltTypeType">
            <summary>设置 MetaType.InbuiltType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IncludeSerializerMethodGet">
            <summary>设置 MetaType.get_IncludeSerializerMethod() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IncludeSerializerMethodSetBoolean">
            <summary>设置 MetaType.set_IncludeSerializerMethod(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IsAutoTupleGet">
            <summary>设置 MetaType.get_IsAutoTuple() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IsDefinedInt32">
            <summary>设置 MetaType.IsDefined(Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IsListGet">
            <summary>设置 MetaType.get_IsList() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IsPrepared">
            <summary>设置 MetaType.IsPrepared() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IsValidSubTypeType">
            <summary>设置 MetaType.IsValidSubType(Type subType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.IsValueTypeGet">
            <summary>设置 MetaType.get_IsValueType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ItemGetInt32">
            <summary>设置 MetaType.get_Item(Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ItemGetMemberInfo">
            <summary>设置 MetaType.get_Item(MemberInfo member) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ModelGet">
            <summary>设置 MetaType.get_Model() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.NameGet">
            <summary>设置 MetaType.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.NameSetString">
            <summary>设置 MetaType.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.NewLineStringBuilderInt32">
            <summary>设置 MetaType.NewLine(StringBuilder builder, Int32 indent) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.PendingGet">
            <summary>设置 MetaType.get_Pending() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.PendingSetBoolean">
            <summary>设置 MetaType.set_Pending(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ResolveListTypesTypeModelTypeTypeRefTypeRef">
            <summary>设置 MetaType.ResolveListTypes(TypeModel model, Type type, Type&amp; itemType, Type&amp; defaultType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ResolveMethodStringBoolean">
            <summary>设置 MetaType.ResolveMethod(String name, Boolean instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ResolveTupleConstructorTypeMemberInfoArrayOut">
            <summary>设置 MetaType.ResolveTupleConstructor(Type type, MemberInfo[]&amp; mappedMembers) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.SetBaseTypeMetaType">
            <summary>设置 MetaType.SetBaseType(MetaType baseType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.SetCallbacksMethodInfoMethodInfoMethodInfoMethodInfo">
            <summary>设置 MetaType.SetCallbacks(MethodInfo beforeSerialize, MethodInfo afterSerialize, MethodInfo beforeDeserialize, MethodInfo afterDeserialize) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.SetCallbacksStringStringStringString">
            <summary>设置 MetaType.SetCallbacks(String beforeSerialize, String afterSerialize, String beforeDeserialize, String afterDeserialize) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.SetFactoryMethodInfo">
            <summary>设置 MetaType.SetFactory(MethodInfo factory) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.SetFactoryString">
            <summary>设置 MetaType.SetFactory(String factory) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.SetFlagByteBooleanBoolean">
            <summary>设置 MetaType.SetFlag(Byte flag, Boolean value, Boolean throwIfFrozen) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.SetSurrogateType">
            <summary>设置 MetaType.SetSurrogate(Type surrogateType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.StaticConstructor">
            <summary>设置 MetaType.MetaType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ThrowIfFrozen">
            <summary>设置 MetaType.ThrowIfFrozen() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.ToString">
            <summary>设置 MetaType.ToString() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.TypeGet">
            <summary>设置 MetaType.get_Type() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.UseConstructorGet">
            <summary>设置 MetaType.get_UseConstructor() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.UseConstructorSetBoolean">
            <summary>设置 MetaType.set_UseConstructor(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.WriteSchemaStringBuilderInt32BooleanRef">
            <summary>设置 MetaType.WriteSchema(StringBuilder builder, Int32 indent, Boolean&amp; requiresBclImport) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddFieldInt32String">
            <summary>设置 MetaType.AddField(Int32 fieldNumber, String memberName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddFieldInt32StringTypeType">
            <summary>设置 MetaType.AddField(Int32 fieldNumber, String memberName, Type itemType, Type defaultType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddFieldInt32StringTypeTypeObject">
            <summary>设置 MetaType.AddField(Int32 fieldNumber, String memberName, Type itemType, Type defaultType, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddInt32String">
            <summary>设置 MetaType.Add(Int32 fieldNumber, String memberName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddInt32StringObject">
            <summary>设置 MetaType.Add(Int32 fieldNumber, String memberName, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddInt32StringTypeType">
            <summary>设置 MetaType.Add(Int32 fieldNumber, String memberName, Type itemType, Type defaultType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddString">
            <summary>设置 MetaType.Add(String memberName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddStringArray">
            <summary>设置 MetaType.Add(String[] memberNames) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddSubTypeInt32Type">
            <summary>设置 MetaType.AddSubType(Int32 fieldNumber, Type derivedType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddSubTypeInt32TypeDataFormat">
            <summary>设置 MetaType.AddSubType(Int32 fieldNumber, Type derivedType, DataFormat dataFormat) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AddValueMember">
            <summary>设置 MetaType.Add(ValueMember member) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ApplyDefaultBehaviour">
            <summary>设置 MetaType.ApplyDefaultBehaviour() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ApplyDefaultBehaviourBooleanProtoMemberAttribute">
            <summary>设置 MetaType.ApplyDefaultBehaviour(Boolean isEnum, ProtoMemberAttribute normalizedAttribute) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AsReferenceDefaultGet">
            <summary>设置 MetaType.get_AsReferenceDefault() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.AsReferenceDefaultSetBoolean">
            <summary>设置 MetaType.set_AsReferenceDefault(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.BaseTypeGet">
            <summary>设置 MetaType.get_BaseType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.CallbacksGet">
            <summary>设置 MetaType.get_Callbacks() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.CompileInPlace">
            <summary>设置 MetaType.CompileInPlace() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ConstructTypeGet">
            <summary>设置 MetaType.get_ConstructType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ConstructTypeSetType">
            <summary>设置 MetaType.set_ConstructType(Type value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.EnumPassthruGet">
            <summary>设置 MetaType.get_EnumPassthru() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.EnumPassthruSetBoolean">
            <summary>设置 MetaType.set_EnumPassthru(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.FieldsGet">
            <summary>设置 MetaType.get_Fields() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.GetFields">
            <summary>设置 MetaType.GetFields() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.GetKeyBooleanBoolean">
            <summary>设置 MetaType.GetKey(Boolean demand, Boolean getBaseKey) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.GetNextFieldNumber">
            <summary>设置 MetaType.GetNextFieldNumber() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.GetSchemaTypeName">
            <summary>设置 MetaType.GetSchemaTypeName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.GetSubtypes">
            <summary>设置 MetaType.GetSubtypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.GetSurrogateOrBaseOrSelfBoolean">
            <summary>设置 MetaType.GetSurrogateOrBaseOrSelf(Boolean deep) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.GetSurrogateOrSelf">
            <summary>设置 MetaType.GetSurrogateOrSelf() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.HasCallbacksGet">
            <summary>设置 MetaType.get_HasCallbacks() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.HasFlagByte">
            <summary>设置 MetaType.HasFlag(Byte flag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.HasSubtypesGet">
            <summary>设置 MetaType.get_HasSubtypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IgnoreListHandlingGet">
            <summary>设置 MetaType.get_IgnoreListHandling() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IgnoreListHandlingSetBoolean">
            <summary>设置 MetaType.set_IgnoreListHandling(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IncludeSerializerMethodGet">
            <summary>设置 MetaType.get_IncludeSerializerMethod() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IncludeSerializerMethodSetBoolean">
            <summary>设置 MetaType.set_IncludeSerializerMethod(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IsAutoTupleGet">
            <summary>设置 MetaType.get_IsAutoTuple() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IsDefinedInt32">
            <summary>设置 MetaType.IsDefined(Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IsListGet">
            <summary>设置 MetaType.get_IsList() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IsPrepared">
            <summary>设置 MetaType.IsPrepared() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IsValidSubTypeType">
            <summary>设置 MetaType.IsValidSubType(Type subType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.IsValueTypeGet">
            <summary>设置 MetaType.get_IsValueType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ItemGetInt32">
            <summary>设置 MetaType.get_Item(Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ItemGetMemberInfo">
            <summary>设置 MetaType.get_Item(MemberInfo member) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ModelGet">
            <summary>设置 MetaType.get_Model() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.NameGet">
            <summary>设置 MetaType.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.NameSetString">
            <summary>设置 MetaType.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.PendingGet">
            <summary>设置 MetaType.get_Pending() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.PendingSetBoolean">
            <summary>设置 MetaType.set_Pending(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ResolveMethodStringBoolean">
            <summary>设置 MetaType.ResolveMethod(String name, Boolean instance) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.SetBaseTypeMetaType">
            <summary>设置 MetaType.SetBaseType(MetaType baseType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.SetCallbacksMethodInfoMethodInfoMethodInfoMethodInfo">
            <summary>设置 MetaType.SetCallbacks(MethodInfo beforeSerialize, MethodInfo afterSerialize, MethodInfo beforeDeserialize, MethodInfo afterDeserialize) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.SetCallbacksStringStringStringString">
            <summary>设置 MetaType.SetCallbacks(String beforeSerialize, String afterSerialize, String beforeDeserialize, String afterDeserialize) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.SetFactoryMethodInfo">
            <summary>设置 MetaType.SetFactory(MethodInfo factory) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.SetFactoryString">
            <summary>设置 MetaType.SetFactory(String factory) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.SetFlagByteBooleanBoolean">
            <summary>设置 MetaType.SetFlag(Byte flag, Boolean value, Boolean throwIfFrozen) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.SetSurrogateType">
            <summary>设置 MetaType.SetSurrogate(Type surrogateType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ThrowIfFrozen">
            <summary>设置 MetaType.ThrowIfFrozen() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.ToString01">
            <summary>设置 MetaType.ToString() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.TypeGet">
            <summary>设置 MetaType.get_Type() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.UseConstructorGet">
            <summary>设置 MetaType.get_UseConstructor() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.UseConstructorSetBoolean">
            <summary>设置 MetaType.set_UseConstructor(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimMetaType.AllInstances.WriteSchemaStringBuilderInt32BooleanRef">
            <summary>设置 MetaType.WriteSchema(StringBuilder builder, Int32 indent, Boolean&amp; requiresBclImport) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel">
            <summary>ProtoBuf.Meta.RuntimeTypeModel 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.#ctor(ProtoBuf.Meta.RuntimeTypeModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AddContention">
            <summary>设置 RuntimeTypeModel.AddContention() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AddTypeBoolean">
            <summary>设置 RuntimeTypeModel.Add(Type type, Boolean applyDefaultBehaviour) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllowParseableTypesGet">
            <summary>设置 RuntimeTypeModel.get_AllowParseableTypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllowParseableTypesSetBoolean">
            <summary>设置 RuntimeTypeModel.set_AllowParseableTypes(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AutoAddMissingTypesGet">
            <summary>设置 RuntimeTypeModel.get_AutoAddMissingTypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AutoAddMissingTypesSetBoolean">
            <summary>设置 RuntimeTypeModel.set_AutoAddMissingTypes(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AutoAddProtoContractTypesOnlyGet">
            <summary>设置 RuntimeTypeModel.get_AutoAddProtoContractTypesOnly() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AutoAddProtoContractTypesOnlySetBoolean">
            <summary>设置 RuntimeTypeModel.set_AutoAddProtoContractTypesOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AutoCompileGet">
            <summary>设置 RuntimeTypeModel.get_AutoCompile() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AutoCompileSetBoolean">
            <summary>设置 RuntimeTypeModel.set_AutoCompile(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.BasicTypeFinderImplObjectObject">
            <summary>设置 RuntimeTypeModel.BasicTypeFinderImpl(Object value, Object ctx) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.BuildAllSerializers">
            <summary>设置 RuntimeTypeModel.BuildAllSerializers() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.Compile">
            <summary>设置 RuntimeTypeModel.Compile() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.CompileInPlace">
            <summary>设置 RuntimeTypeModel.CompileInPlace() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.CompileRuntimeTypeModelCompilerOptions">
            <summary>设置 RuntimeTypeModel.Compile(CompilerOptions options) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.CompileStringString">
            <summary>设置 RuntimeTypeModel.Compile(String name, String path) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ConstructorBoolean">
            <summary>设置 RuntimeTypeModel.RuntimeTypeModel(Boolean isDefault) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.CreateType">
            <summary>设置 RuntimeTypeModel.Create(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.DefaultGet">
            <summary>设置 RuntimeTypeModel.get_Default() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.DeserializeInt32ObjectProtoReader">
            <summary>设置 RuntimeTypeModel.Deserialize(Int32 key, Object value, ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.FindOrAddAutoTypeBooleanBooleanBoolean">
            <summary>设置 RuntimeTypeModel.FindOrAddAuto(Type type, Boolean demand, Boolean addWithContractOnly, Boolean addEvenIfAutoDisabled) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.FindWithoutAddType">
            <summary>设置 RuntimeTypeModel.FindWithoutAdd(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.Freeze">
            <summary>设置 RuntimeTypeModel.Freeze() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.GetContention">
            <summary>设置 RuntimeTypeModel.GetContention() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.GetKeyImplType">
            <summary>设置 RuntimeTypeModel.GetKeyImpl(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.GetKeyTypeBooleanBoolean">
            <summary>设置 RuntimeTypeModel.GetKey(Type type, Boolean demand, Boolean getBaseKey) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.GetOptionByte">
            <summary>设置 RuntimeTypeModel.GetOption(Byte option) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.GetSchemaType">
            <summary>设置 RuntimeTypeModel.GetSchema(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.GetSchemaTypeNameTypeDataFormatBooleanBooleanBooleanRef">
            <summary>设置 RuntimeTypeModel.GetSchemaTypeName(Type effectiveType, DataFormat dataFormat, Boolean asReference, Boolean dynamicType, Boolean&amp; requiresBclImport) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.GetTypes">
            <summary>设置 RuntimeTypeModel.GetTypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.InferTagFromNameDefaultGet">
            <summary>设置 RuntimeTypeModel.get_InferTagFromNameDefault() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.InferTagFromNameDefaultSetBoolean">
            <summary>设置 RuntimeTypeModel.set_InferTagFromNameDefault(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.IsPreparedType">
            <summary>设置 RuntimeTypeModel.IsPrepared(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ItemGetType">
            <summary>设置 RuntimeTypeModel.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.LockContendedAddLockContentedEventHandler">
            <summary>设置 RuntimeTypeModel.add_LockContended(LockContentedEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.LockContendedRemoveLockContentedEventHandler">
            <summary>设置 RuntimeTypeModel.remove_LockContended(LockContentedEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.MetaTypeFinderImplObjectObject">
            <summary>设置 RuntimeTypeModel.MetaTypeFinderImpl(Object value, Object ctx) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.MetadataTimeoutMillisecondsGet">
            <summary>设置 RuntimeTypeModel.get_MetadataTimeoutMilliseconds() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.MetadataTimeoutMillisecondsSetInt32">
            <summary>设置 RuntimeTypeModel.set_MetadataTimeoutMilliseconds(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.OverrideTypeBuilderString">
            <summary>设置 RuntimeTypeModel.Override(TypeBuilder type, String name) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.RecogniseCommonTypesType">
            <summary>设置 RuntimeTypeModel.RecogniseCommonTypes(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ReleaseLockInt32">
            <summary>设置 RuntimeTypeModel.ReleaseLock(Int32 opaqueToken) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ResolveListTypesTypeTypeRefTypeRef">
            <summary>设置 RuntimeTypeModel.ResolveListTypes(Type type, Type&amp; itemType, Type&amp; defaultType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.SerializeInt32ObjectProtoWriter">
            <summary>设置 RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.SetDefaultFactoryMethodInfo">
            <summary>设置 RuntimeTypeModel.SetDefaultFactory(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.SetOptionByteBoolean">
            <summary>设置 RuntimeTypeModel.SetOption(Byte option, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.StaticConstructor">
            <summary>设置 RuntimeTypeModel.RuntimeTypeModel() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.TakeLockInt32Ref">
            <summary>设置 RuntimeTypeModel.TakeLock(Int32&amp; opaqueToken) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ThrowIfFrozen">
            <summary>设置 RuntimeTypeModel.ThrowIfFrozen() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.UseImplicitZeroDefaultsGet">
            <summary>设置 RuntimeTypeModel.get_UseImplicitZeroDefaults() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.UseImplicitZeroDefaultsSetBoolean">
            <summary>设置 RuntimeTypeModel.set_UseImplicitZeroDefaults(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.VerifyFactoryMethodInfoType">
            <summary>设置 RuntimeTypeModel.VerifyFactory(MethodInfo factory, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.WaitOnLockMetaType">
            <summary>设置 RuntimeTypeModel.WaitOnLock(MetaType type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.WriteAssemblyAttributesRuntimeTypeModelCompilerOptionsStringAssemblyBuilder">
            <summary>设置 RuntimeTypeModel.WriteAssemblyAttributes(CompilerOptions options, String assemblyName, AssemblyBuilder asm) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.WriteBasicTypeModelRuntimeTypeModelCompilerOptionsStringModuleBuilder">
            <summary>设置 RuntimeTypeModel.WriteBasicTypeModel(CompilerOptions options, String typeName, ModuleBuilder module) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AddContention">
            <summary>设置 RuntimeTypeModel.AddContention() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AddTypeBoolean">
            <summary>设置 RuntimeTypeModel.Add(Type type, Boolean applyDefaultBehaviour) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AllowParseableTypesGet">
            <summary>设置 RuntimeTypeModel.get_AllowParseableTypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AllowParseableTypesSetBoolean">
            <summary>设置 RuntimeTypeModel.set_AllowParseableTypes(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AutoAddMissingTypesGet">
            <summary>设置 RuntimeTypeModel.get_AutoAddMissingTypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AutoAddMissingTypesSetBoolean">
            <summary>设置 RuntimeTypeModel.set_AutoAddMissingTypes(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AutoAddProtoContractTypesOnlyGet">
            <summary>设置 RuntimeTypeModel.get_AutoAddProtoContractTypesOnly() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AutoAddProtoContractTypesOnlySetBoolean">
            <summary>设置 RuntimeTypeModel.set_AutoAddProtoContractTypesOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AutoCompileGet">
            <summary>设置 RuntimeTypeModel.get_AutoCompile() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.AutoCompileSetBoolean">
            <summary>设置 RuntimeTypeModel.set_AutoCompile(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.BuildAllSerializers">
            <summary>设置 RuntimeTypeModel.BuildAllSerializers() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.Compile">
            <summary>设置 RuntimeTypeModel.Compile() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.CompileInPlace">
            <summary>设置 RuntimeTypeModel.CompileInPlace() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.CompileRuntimeTypeModelCompilerOptions">
            <summary>设置 RuntimeTypeModel.Compile(CompilerOptions options) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.CompileStringString">
            <summary>设置 RuntimeTypeModel.Compile(String name, String path) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.CreateType">
            <summary>设置 RuntimeTypeModel.Create(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.DeserializeInt32ObjectProtoReader">
            <summary>设置 RuntimeTypeModel.Deserialize(Int32 key, Object value, ProtoReader source) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.FindOrAddAutoTypeBooleanBooleanBoolean">
            <summary>设置 RuntimeTypeModel.FindOrAddAuto(Type type, Boolean demand, Boolean addWithContractOnly, Boolean addEvenIfAutoDisabled) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.FindWithoutAddType">
            <summary>设置 RuntimeTypeModel.FindWithoutAdd(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.Freeze">
            <summary>设置 RuntimeTypeModel.Freeze() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.GetContention">
            <summary>设置 RuntimeTypeModel.GetContention() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.GetKeyImplType">
            <summary>设置 RuntimeTypeModel.GetKeyImpl(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.GetKeyTypeBooleanBoolean">
            <summary>设置 RuntimeTypeModel.GetKey(Type type, Boolean demand, Boolean getBaseKey) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.GetOptionByte">
            <summary>设置 RuntimeTypeModel.GetOption(Byte option) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.GetSchemaType">
            <summary>设置 RuntimeTypeModel.GetSchema(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.GetSchemaTypeNameTypeDataFormatBooleanBooleanBooleanRef">
            <summary>设置 RuntimeTypeModel.GetSchemaTypeName(Type effectiveType, DataFormat dataFormat, Boolean asReference, Boolean dynamicType, Boolean&amp; requiresBclImport) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.GetTypes">
            <summary>设置 RuntimeTypeModel.GetTypes() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.InferTagFromNameDefaultGet">
            <summary>设置 RuntimeTypeModel.get_InferTagFromNameDefault() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.InferTagFromNameDefaultSetBoolean">
            <summary>设置 RuntimeTypeModel.set_InferTagFromNameDefault(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.IsPreparedType">
            <summary>设置 RuntimeTypeModel.IsPrepared(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.ItemGetType">
            <summary>设置 RuntimeTypeModel.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.LockContendedAddLockContentedEventHandler">
            <summary>设置 RuntimeTypeModel.add_LockContended(LockContentedEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.LockContendedRemoveLockContentedEventHandler">
            <summary>设置 RuntimeTypeModel.remove_LockContended(LockContentedEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.MetadataTimeoutMillisecondsGet">
            <summary>设置 RuntimeTypeModel.get_MetadataTimeoutMilliseconds() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.MetadataTimeoutMillisecondsSetInt32">
            <summary>设置 RuntimeTypeModel.set_MetadataTimeoutMilliseconds(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.RecogniseCommonTypesType">
            <summary>设置 RuntimeTypeModel.RecogniseCommonTypes(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.ReleaseLockInt32">
            <summary>设置 RuntimeTypeModel.ReleaseLock(Int32 opaqueToken) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.ResolveListTypesTypeTypeRefTypeRef">
            <summary>设置 RuntimeTypeModel.ResolveListTypes(Type type, Type&amp; itemType, Type&amp; defaultType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.SerializeInt32ObjectProtoWriter">
            <summary>设置 RuntimeTypeModel.Serialize(Int32 key, Object value, ProtoWriter dest) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.SetDefaultFactoryMethodInfo">
            <summary>设置 RuntimeTypeModel.SetDefaultFactory(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.SetOptionByteBoolean">
            <summary>设置 RuntimeTypeModel.SetOption(Byte option, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.TakeLockInt32Ref">
            <summary>设置 RuntimeTypeModel.TakeLock(Int32&amp; opaqueToken) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.ThrowIfFrozen">
            <summary>设置 RuntimeTypeModel.ThrowIfFrozen() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.UseImplicitZeroDefaultsGet">
            <summary>设置 RuntimeTypeModel.get_UseImplicitZeroDefaults() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.UseImplicitZeroDefaultsSetBoolean">
            <summary>设置 RuntimeTypeModel.set_UseImplicitZeroDefaults(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.VerifyFactoryMethodInfoType">
            <summary>设置 RuntimeTypeModel.VerifyFactory(MethodInfo factory, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.WaitOnLockMetaType">
            <summary>设置 RuntimeTypeModel.WaitOnLock(MetaType type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.WriteAssemblyAttributesRuntimeTypeModelCompilerOptionsStringAssemblyBuilder">
            <summary>设置 RuntimeTypeModel.WriteAssemblyAttributes(CompilerOptions options, String assemblyName, AssemblyBuilder asm) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.AllInstances.WriteBasicTypeModelRuntimeTypeModelCompilerOptionsStringModuleBuilder">
            <summary>设置 RuntimeTypeModel.WriteBasicTypeModel(CompilerOptions options, String typeName, ModuleBuilder module) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions">
            <summary>ProtoBuf.Meta.RuntimeTypeModel+CompilerOptions 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.#ctor(ProtoBuf.Meta.RuntimeTypeModel.CompilerOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AccessibilityGet">
            <summary>设置 CompilerOptions.get_Accessibility() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AccessibilitySetRuntimeTypeModelAccessibility">
            <summary>设置 CompilerOptions.set_Accessibility(Accessibility value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.Constructor">
            <summary>设置 CompilerOptions.CompilerOptions() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.ImageRuntimeVersionGet">
            <summary>设置 CompilerOptions.get_ImageRuntimeVersion() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.ImageRuntimeVersionSetString">
            <summary>设置 CompilerOptions.set_ImageRuntimeVersion(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.MetaDataVersionGet">
            <summary>设置 CompilerOptions.get_MetaDataVersion() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.MetaDataVersionSetInt32">
            <summary>设置 CompilerOptions.set_MetaDataVersion(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.OutputPathGet">
            <summary>设置 CompilerOptions.get_OutputPath() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.OutputPathSetString">
            <summary>设置 CompilerOptions.set_OutputPath(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.SetFrameworkOptionsMetaType">
            <summary>设置 CompilerOptions.SetFrameworkOptions(MetaType from) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.TargetFrameworkDisplayNameGet">
            <summary>设置 CompilerOptions.get_TargetFrameworkDisplayName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.TargetFrameworkDisplayNameSetString">
            <summary>设置 CompilerOptions.set_TargetFrameworkDisplayName(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.TargetFrameworkNameGet">
            <summary>设置 CompilerOptions.get_TargetFrameworkName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.TargetFrameworkNameSetString">
            <summary>设置 CompilerOptions.set_TargetFrameworkName(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.TypeNameGet">
            <summary>设置 CompilerOptions.get_TypeName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.TypeNameSetString">
            <summary>设置 CompilerOptions.set_TypeName(String value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.AccessibilityGet">
            <summary>设置 CompilerOptions.get_Accessibility() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.AccessibilitySetRuntimeTypeModelAccessibility">
            <summary>设置 CompilerOptions.set_Accessibility(Accessibility value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.ImageRuntimeVersionGet">
            <summary>设置 CompilerOptions.get_ImageRuntimeVersion() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.ImageRuntimeVersionSetString">
            <summary>设置 CompilerOptions.set_ImageRuntimeVersion(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.MetaDataVersionGet">
            <summary>设置 CompilerOptions.get_MetaDataVersion() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.MetaDataVersionSetInt32">
            <summary>设置 CompilerOptions.set_MetaDataVersion(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.OutputPathGet">
            <summary>设置 CompilerOptions.get_OutputPath() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.OutputPathSetString">
            <summary>设置 CompilerOptions.set_OutputPath(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.SetFrameworkOptionsMetaType">
            <summary>设置 CompilerOptions.SetFrameworkOptions(MetaType from) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.TargetFrameworkDisplayNameGet">
            <summary>设置 CompilerOptions.get_TargetFrameworkDisplayName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.TargetFrameworkDisplayNameSetString">
            <summary>设置 CompilerOptions.set_TargetFrameworkDisplayName(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.TargetFrameworkNameGet">
            <summary>设置 CompilerOptions.get_TargetFrameworkName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.TargetFrameworkNameSetString">
            <summary>设置 CompilerOptions.set_TargetFrameworkName(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.TypeNameGet">
            <summary>设置 CompilerOptions.get_TypeName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimRuntimeTypeModel.ShimCompilerOptions.AllInstances.TypeNameSetString">
            <summary>设置 CompilerOptions.set_TypeName(String value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimSubType">
            <summary>ProtoBuf.Meta.SubType 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimSubType.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimSubType.#ctor(ProtoBuf.Meta.SubType)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimSubType.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimSubType.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimSubType.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimSubType.ConstructorInt32MetaTypeDataFormat">
            <summary>设置 SubType.SubType(Int32 fieldNumber, MetaType derivedType, DataFormat format) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimSubType.DerivedTypeGet">
            <summary>设置 SubType.get_DerivedType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimSubType.FieldNumberGet">
            <summary>设置 SubType.get_FieldNumber() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimSubType.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimSubType.AllInstances.DerivedTypeGet">
            <summary>设置 SubType.get_DerivedType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimSubType.AllInstances.FieldNumberGet">
            <summary>设置 SubType.get_FieldNumber() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs">
            <summary>ProtoBuf.Meta.TypeFormatEventArgs 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.#ctor(ProtoBuf.Meta.TypeFormatEventArgs)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.ConstructorString">
            <summary>设置 TypeFormatEventArgs.TypeFormatEventArgs(String formattedName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.ConstructorType">
            <summary>设置 TypeFormatEventArgs.TypeFormatEventArgs(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.FormattedNameGet">
            <summary>设置 TypeFormatEventArgs.get_FormattedName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.FormattedNameSetString">
            <summary>设置 TypeFormatEventArgs.set_FormattedName(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.TypeGet">
            <summary>设置 TypeFormatEventArgs.get_Type() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.TypeSetType">
            <summary>设置 TypeFormatEventArgs.set_Type(Type value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.AllInstances.FormattedNameGet">
            <summary>设置 TypeFormatEventArgs.get_FormattedName() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.AllInstances.FormattedNameSetString">
            <summary>设置 TypeFormatEventArgs.set_FormattedName(String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.AllInstances.TypeGet">
            <summary>设置 TypeFormatEventArgs.get_Type() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeFormatEventArgs.AllInstances.TypeSetType">
            <summary>设置 TypeFormatEventArgs.set_Type(Type value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimTypeModel">
            <summary>ProtoBuf.Meta.TypeModel 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeModel.#ctor(ProtoBuf.Meta.TypeModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeItemsOf1StreamPrefixStyleInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 TypeModel.DeserializeItems(Stream source, PrefixStyle style, Int32 expectedField) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeItemsOf1StreamPrefixStyleInt32SerializationContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.SerializationContext,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 TypeModel.DeserializeItems(Stream source, PrefixStyle style, Int32 expectedField, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.CanSerializeBasicTypeType">
            <summary>设置 TypeModel.CanSerializeBasicType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.CanSerializeContractTypeType">
            <summary>设置 TypeModel.CanSerializeContractType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.CanSerializeType">
            <summary>设置 TypeModel.CanSerialize(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.CanSerializeTypeBooleanBooleanBoolean">
            <summary>设置 TypeModel.CanSerialize(Type type, Boolean allowBasic, Boolean allowContract, Boolean allowLists) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.CheckDictionaryAccessorsTypeModelTypeType">
            <summary>设置 TypeModel.CheckDictionaryAccessors(TypeModel model, Type pair, Type value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.Constructor">
            <summary>设置 TypeModel.TypeModel() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.Create">
            <summary>设置 TypeModel.Create() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.CreateFormatterType">
            <summary>设置 TypeModel.CreateFormatter(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.CreateListInstanceTypeType">
            <summary>设置 TypeModel.CreateListInstance(Type listType, Type itemType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.CreateNestedListsNotSupported">
            <summary>设置 TypeModel.CreateNestedListsNotSupported() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeepCloneObject">
            <summary>设置 TypeModel.DeepClone(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeCoreProtoReaderTypeObjectBoolean">
            <summary>设置 TypeModel.DeserializeCore(ProtoReader reader, Type type, Object value, Boolean noAutoCreate) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeItemsStreamTypePrefixStyleInt32SerializerTypeResolver">
            <summary>设置 TypeModel.DeserializeItems(Stream source, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeItemsStreamTypePrefixStyleInt32SerializerTypeResolverSerializationContext">
            <summary>设置 TypeModel.DeserializeItems(Stream source, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeProtoReaderObjectType">
            <summary>设置 TypeModel.Deserialize(ProtoReader source, Object value, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeStreamObjectType">
            <summary>设置 TypeModel.Deserialize(Stream source, Object value, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeStreamObjectTypeInt32">
            <summary>设置 TypeModel.Deserialize(Stream source, Object value, Type type, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeStreamObjectTypeInt32SerializationContext">
            <summary>设置 TypeModel.Deserialize(Stream source, Object value, Type type, Int32 length, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeStreamObjectTypeSerializationContext">
            <summary>设置 TypeModel.Deserialize(Stream source, Object value, Type type, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeTypeTypeModelString">
            <summary>设置 TypeModel.DeserializeType(TypeModel model, String value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeWithLengthPrefixStreamObjectTypePrefixStyleInt32">
            <summary>设置 TypeModel.DeserializeWithLengthPrefix(Stream source, Object value, Type type, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeWithLengthPrefixStreamObjectTypePrefixStyleInt32SerializerTypeResolver">
            <summary>设置 TypeModel.DeserializeWithLengthPrefix(Stream source, Object value, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DeserializeWithLengthPrefixStreamObjectTypePrefixStyleInt32SerializerTypeResolverInt32Out">
            <summary>设置 TypeModel.DeserializeWithLengthPrefix(Stream source, Object value, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver, Int32&amp; bytesRead) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DynamicTypeFormattingAddTypeFormatEventHandler">
            <summary>设置 TypeModel.add_DynamicTypeFormatting(TypeFormatEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.DynamicTypeFormattingRemoveTypeFormatEventHandler">
            <summary>设置 TypeModel.remove_DynamicTypeFormatting(TypeFormatEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.GetKeyTypeRef">
            <summary>设置 TypeModel.GetKey(Type&amp; type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.GetListItemTypeTypeModelType">
            <summary>设置 TypeModel.GetListItemType(TypeModel model, Type listType) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.GetSchemaType">
            <summary>设置 TypeModel.GetSchema(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.GetTypeStringAssembly">
            <summary>设置 TypeModel.GetType(String fullName, Assembly context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.IsDefinedType">
            <summary>设置 TypeModel.IsDefined(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.MapTypeType">
            <summary>设置 TypeModel.MapType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.MapTypeTypeBoolean">
            <summary>设置 TypeModel.MapType(Type type, Boolean demand) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.PrepareDeserializeObjectTypeRef">
            <summary>设置 TypeModel.PrepareDeserialize(Object value, Type&amp; type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.ResolveKnownTypeStringTypeModelAssembly">
            <summary>设置 TypeModel.ResolveKnownType(String name, TypeModel model, Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.ResolveListAddTypeModelTypeTypeBooleanOut">
            <summary>设置 TypeModel.ResolveListAdd(TypeModel model, Type listType, Type itemType, Boolean&amp; isList) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.ResolveProxiesType">
            <summary>设置 TypeModel.ResolveProxies(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.SerializeCoreProtoWriterObject">
            <summary>设置 TypeModel.SerializeCore(ProtoWriter writer, Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.SerializeProtoWriterObject">
            <summary>设置 TypeModel.Serialize(ProtoWriter dest, Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.SerializeStreamObject">
            <summary>设置 TypeModel.Serialize(Stream dest, Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.SerializeStreamObjectSerializationContext">
            <summary>设置 TypeModel.Serialize(Stream dest, Object value, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.SerializeTypeTypeModelType">
            <summary>设置 TypeModel.SerializeType(TypeModel model, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.SerializeWithLengthPrefixStreamObjectTypePrefixStyleInt32">
            <summary>设置 TypeModel.SerializeWithLengthPrefix(Stream dest, Object value, Type type, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.SerializeWithLengthPrefixStreamObjectTypePrefixStyleInt32SerializationContext">
            <summary>设置 TypeModel.SerializeWithLengthPrefix(Stream dest, Object value, Type type, PrefixStyle style, Int32 fieldNumber, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.StaticConstructor">
            <summary>设置 TypeModel.TypeModel() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.ThrowCannotCreateInstanceType">
            <summary>设置 TypeModel.ThrowCannotCreateInstance(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.ThrowUnexpectedSubtypeTypeType">
            <summary>设置 TypeModel.ThrowUnexpectedSubtype(Type expected, Type actual) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.ThrowUnexpectedTypeType">
            <summary>设置 TypeModel.ThrowUnexpectedType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.TryDeserializeListTypeModelProtoReaderDataFormatInt32TypeTypeObjectRef">
            <summary>设置 TypeModel.TryDeserializeList(TypeModel model, ProtoReader reader, DataFormat format, Int32 tag, Type listType, Type itemType, Object&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.TrySerializeAuxiliaryTypeProtoWriterTypeDataFormatInt32ObjectBoolean">
            <summary>设置 TypeModel.TrySerializeAuxiliaryType(ProtoWriter writer, Type type, DataFormat format, Int32 tag, Object value, Boolean isInsideList) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeItemsOf1StreamPrefixStyleInt32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ProtoBuf.Meta.TypeModel,System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 TypeModel.DeserializeItems(Stream source, PrefixStyle style, Int32 expectedField) 的 填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeItemsOf1StreamPrefixStyleInt32SerializationContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{ProtoBuf.Meta.TypeModel,System.IO.Stream,ProtoBuf.PrefixStyle,System.Int32,ProtoBuf.SerializationContext,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 TypeModel.DeserializeItems(Stream source, PrefixStyle style, Int32 expectedField, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.CanSerializeBasicTypeType">
            <summary>设置 TypeModel.CanSerializeBasicType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.CanSerializeContractTypeType">
            <summary>设置 TypeModel.CanSerializeContractType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.CanSerializeType">
            <summary>设置 TypeModel.CanSerialize(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.CanSerializeTypeBooleanBooleanBoolean">
            <summary>设置 TypeModel.CanSerialize(Type type, Boolean allowBasic, Boolean allowContract, Boolean allowLists) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.CreateFormatterType">
            <summary>设置 TypeModel.CreateFormatter(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeepCloneObject">
            <summary>设置 TypeModel.DeepClone(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeCoreProtoReaderTypeObjectBoolean">
            <summary>设置 TypeModel.DeserializeCore(ProtoReader reader, Type type, Object value, Boolean noAutoCreate) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeItemsStreamTypePrefixStyleInt32SerializerTypeResolver">
            <summary>设置 TypeModel.DeserializeItems(Stream source, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeItemsStreamTypePrefixStyleInt32SerializerTypeResolverSerializationContext">
            <summary>设置 TypeModel.DeserializeItems(Stream source, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeProtoReaderObjectType">
            <summary>设置 TypeModel.Deserialize(ProtoReader source, Object value, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeStreamObjectType">
            <summary>设置 TypeModel.Deserialize(Stream source, Object value, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeStreamObjectTypeInt32">
            <summary>设置 TypeModel.Deserialize(Stream source, Object value, Type type, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeStreamObjectTypeInt32SerializationContext">
            <summary>设置 TypeModel.Deserialize(Stream source, Object value, Type type, Int32 length, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeStreamObjectTypeSerializationContext">
            <summary>设置 TypeModel.Deserialize(Stream source, Object value, Type type, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeWithLengthPrefixStreamObjectTypePrefixStyleInt32">
            <summary>设置 TypeModel.DeserializeWithLengthPrefix(Stream source, Object value, Type type, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeWithLengthPrefixStreamObjectTypePrefixStyleInt32SerializerTypeResolver">
            <summary>设置 TypeModel.DeserializeWithLengthPrefix(Stream source, Object value, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeWithLengthPrefixStreamObjectTypePrefixStyleInt32SerializerTypeResolverInt32Out">
            <summary>设置 TypeModel.DeserializeWithLengthPrefix(Stream source, Object value, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver, Int32&amp; bytesRead) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DeserializeWithLengthPrefixStreamObjectTypePrefixStyleInt32SerializerTypeResolverInt32OutBooleanOutSerializationContext">
            <summary>设置 TypeModel.DeserializeWithLengthPrefix(Stream source, Object value, Type type, PrefixStyle style, Int32 expectedField, TypeResolver resolver, Int32&amp; bytesRead, Boolean&amp; haveObject, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DynamicTypeFormattingAddTypeFormatEventHandler">
            <summary>设置 TypeModel.add_DynamicTypeFormatting(TypeFormatEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.DynamicTypeFormattingRemoveTypeFormatEventHandler">
            <summary>设置 TypeModel.remove_DynamicTypeFormatting(TypeFormatEventHandler value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.GetKeyTypeRef">
            <summary>设置 TypeModel.GetKey(Type&amp; type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.GetSchemaType">
            <summary>设置 TypeModel.GetSchema(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.GetTypeStringAssembly">
            <summary>设置 TypeModel.GetType(String fullName, Assembly context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.IsDefinedType">
            <summary>设置 TypeModel.IsDefined(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.MapTypeType">
            <summary>设置 TypeModel.MapType(Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.MapTypeTypeBoolean">
            <summary>设置 TypeModel.MapType(Type type, Boolean demand) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.PrepareDeserializeObjectTypeRef">
            <summary>设置 TypeModel.PrepareDeserialize(Object value, Type&amp; type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.SerializeCoreProtoWriterObject">
            <summary>设置 TypeModel.SerializeCore(ProtoWriter writer, Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.SerializeProtoWriterObject">
            <summary>设置 TypeModel.Serialize(ProtoWriter dest, Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.SerializeStreamObject">
            <summary>设置 TypeModel.Serialize(Stream dest, Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.SerializeStreamObjectSerializationContext">
            <summary>设置 TypeModel.Serialize(Stream dest, Object value, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.SerializeWithLengthPrefixStreamObjectTypePrefixStyleInt32">
            <summary>设置 TypeModel.SerializeWithLengthPrefix(Stream dest, Object value, Type type, PrefixStyle style, Int32 fieldNumber) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.SerializeWithLengthPrefixStreamObjectTypePrefixStyleInt32SerializationContext">
            <summary>设置 TypeModel.SerializeWithLengthPrefix(Stream dest, Object value, Type type, PrefixStyle style, Int32 fieldNumber, SerializationContext context) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.TryDeserializeAuxiliaryTypeProtoReaderDataFormatInt32TypeObjectRefBooleanBooleanBooleanBoolean">
            <summary>设置 TypeModel.TryDeserializeAuxiliaryType(ProtoReader reader, DataFormat format, Int32 tag, Type type, Object&amp; value, Boolean skipOtherFields, Boolean asListItem, Boolean autoCreate, Boolean insideList) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.TryDeserializeListTypeModelProtoReaderDataFormatInt32TypeTypeObjectRef">
            <summary>设置 TypeModel.TryDeserializeList(TypeModel model, ProtoReader reader, DataFormat format, Int32 tag, Type listType, Type itemType, Object&amp; value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimTypeModel.AllInstances.TrySerializeAuxiliaryTypeProtoWriterTypeDataFormatInt32ObjectBoolean">
            <summary>设置 TypeModel.TrySerializeAuxiliaryType(ProtoWriter writer, Type type, DataFormat format, Int32 tag, Object value, Boolean isInsideList) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimValueMember">
            <summary>ProtoBuf.Meta.ValueMember 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimValueMember.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimValueMember.#ctor(ProtoBuf.Meta.ValueMember)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimValueMember.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.ShimValueMember.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AsReferenceGet">
            <summary>设置 ValueMember.get_AsReference() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AsReferenceSetBoolean">
            <summary>设置 ValueMember.set_AsReference(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.ConstructorRuntimeTypeModelInt32TypeTypeTypeDataFormat">
            <summary>设置 ValueMember.ValueMember(RuntimeTypeModel model, Int32 fieldNumber, Type memberType, Type itemType, Type defaultType, DataFormat dataFormat) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.ConstructorRuntimeTypeModelTypeInt32MemberInfoTypeTypeTypeDataFormatObject">
            <summary>设置 ValueMember.ValueMember(RuntimeTypeModel model, Type parentType, Int32 fieldNumber, MemberInfo member, Type memberType, Type itemType, Type defaultType, DataFormat dataFormat, Object defaultValue) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.DataFormatGet">
            <summary>设置 ValueMember.get_DataFormat() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.DataFormatSetDataFormat">
            <summary>设置 ValueMember.set_DataFormat(DataFormat value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.DefaultTypeGet">
            <summary>设置 ValueMember.get_DefaultType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.DefaultValueGet">
            <summary>设置 ValueMember.get_DefaultValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.DefaultValueSetObject">
            <summary>设置 ValueMember.set_DefaultValue(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.DynamicTypeGet">
            <summary>设置 ValueMember.get_DynamicType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.DynamicTypeSetBoolean">
            <summary>设置 ValueMember.set_DynamicType(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.FieldNumberGet">
            <summary>设置 ValueMember.get_FieldNumber() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.GetDateTimeWireTypeDataFormat">
            <summary>设置 ValueMember.GetDateTimeWireType(DataFormat format) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.GetIntWireTypeDataFormatInt32">
            <summary>设置 ValueMember.GetIntWireType(DataFormat format, Int32 width) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.GetRawEnumValue">
            <summary>设置 ValueMember.GetRawEnumValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.GetSchemaTypeNameBooleanBooleanRef">
            <summary>设置 ValueMember.GetSchemaTypeName(Boolean applyNetObjectProxy, Boolean&amp; requiresBclImport) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.HasFlagByte">
            <summary>设置 ValueMember.HasFlag(Byte flag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.IsPackedGet">
            <summary>设置 ValueMember.get_IsPacked() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.IsPackedSetBoolean">
            <summary>设置 ValueMember.set_IsPacked(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.IsRequiredGet">
            <summary>设置 ValueMember.get_IsRequired() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.IsRequiredSetBoolean">
            <summary>设置 ValueMember.set_IsRequired(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.IsStrictGet">
            <summary>设置 ValueMember.get_IsStrict() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.IsStrictSetBoolean">
            <summary>设置 ValueMember.set_IsStrict(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.ItemTypeGet">
            <summary>设置 ValueMember.get_ItemType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.MemberGet">
            <summary>设置 ValueMember.get_Member() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.MemberTypeGet">
            <summary>设置 ValueMember.get_MemberType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.NameGet">
            <summary>设置 ValueMember.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.OverwriteListGet">
            <summary>设置 ValueMember.get_OverwriteList() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.OverwriteListSetBoolean">
            <summary>设置 ValueMember.set_OverwriteList(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.ParentTypeGet">
            <summary>设置 ValueMember.get_ParentType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.ParseDefaultValueTypeObject">
            <summary>设置 ValueMember.ParseDefaultValue(Type type, Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.SetFlagByteBooleanBoolean">
            <summary>设置 ValueMember.SetFlag(Byte flag, Boolean value, Boolean throwIfFrozen) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.SetNameString">
            <summary>设置 ValueMember.SetName(String name) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.SetSpecifiedMethodInfoMethodInfo">
            <summary>设置 ValueMember.SetSpecified(MethodInfo getSpecified, MethodInfo setSpecified) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.SupportNullGet">
            <summary>设置 ValueMember.get_SupportNull() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.SupportNullSetBoolean">
            <summary>设置 ValueMember.set_SupportNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.ThrowIfFrozen">
            <summary>设置 ValueMember.ThrowIfFrozen() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.AsReferenceGet">
            <summary>设置 ValueMember.get_AsReference() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.AsReferenceSetBoolean">
            <summary>设置 ValueMember.set_AsReference(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.DataFormatGet">
            <summary>设置 ValueMember.get_DataFormat() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.DataFormatSetDataFormat">
            <summary>设置 ValueMember.set_DataFormat(DataFormat value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.DefaultTypeGet">
            <summary>设置 ValueMember.get_DefaultType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.DefaultValueGet">
            <summary>设置 ValueMember.get_DefaultValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.DefaultValueSetObject">
            <summary>设置 ValueMember.set_DefaultValue(Object value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.DynamicTypeGet">
            <summary>设置 ValueMember.get_DynamicType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.DynamicTypeSetBoolean">
            <summary>设置 ValueMember.set_DynamicType(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.FieldNumberGet">
            <summary>设置 ValueMember.get_FieldNumber() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.GetRawEnumValue">
            <summary>设置 ValueMember.GetRawEnumValue() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.GetSchemaTypeNameBooleanBooleanRef">
            <summary>设置 ValueMember.GetSchemaTypeName(Boolean applyNetObjectProxy, Boolean&amp; requiresBclImport) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.HasFlagByte">
            <summary>设置 ValueMember.HasFlag(Byte flag) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.IsPackedGet">
            <summary>设置 ValueMember.get_IsPacked() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.IsPackedSetBoolean">
            <summary>设置 ValueMember.set_IsPacked(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.IsRequiredGet">
            <summary>设置 ValueMember.get_IsRequired() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.IsRequiredSetBoolean">
            <summary>设置 ValueMember.set_IsRequired(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.IsStrictGet">
            <summary>设置 ValueMember.get_IsStrict() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.IsStrictSetBoolean">
            <summary>设置 ValueMember.set_IsStrict(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.ItemTypeGet">
            <summary>设置 ValueMember.get_ItemType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.MemberGet">
            <summary>设置 ValueMember.get_Member() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.MemberTypeGet">
            <summary>设置 ValueMember.get_MemberType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.NameGet">
            <summary>设置 ValueMember.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.OverwriteListGet">
            <summary>设置 ValueMember.get_OverwriteList() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.OverwriteListSetBoolean">
            <summary>设置 ValueMember.set_OverwriteList(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.ParentTypeGet">
            <summary>设置 ValueMember.get_ParentType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.SetFlagByteBooleanBoolean">
            <summary>设置 ValueMember.SetFlag(Byte flag, Boolean value, Boolean throwIfFrozen) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.SetNameString">
            <summary>设置 ValueMember.SetName(String name) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.SetSpecifiedMethodInfoMethodInfo">
            <summary>设置 ValueMember.SetSpecified(MethodInfo getSpecified, MethodInfo setSpecified) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.SupportNullGet">
            <summary>设置 ValueMember.get_SupportNull() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.SupportNullSetBoolean">
            <summary>设置 ValueMember.set_SupportNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.ShimValueMember.AllInstances.ThrowIfFrozen">
            <summary>设置 ValueMember.ThrowIfFrozen() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.StubTypeModel">
            <summary>ProtoBuf.Meta.TypeModel 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubTypeModel.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubTypeModel.Deserialize(System.Int32,System.Object,ProtoBuf.ProtoReader)">
            <summary>设置 TypeModel.Deserialize(Int32 key, Object value, ProtoReader source) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Meta.Fakes.StubTypeModel.DeserializeInt32ObjectProtoReader">
            <summary>设置 TypeModel.Deserialize(Int32 key, Object value, ProtoReader source) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubTypeModel.GetKeyImpl(System.Type)">
            <summary>设置 TypeModel.GetKeyImpl(Type type) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Meta.Fakes.StubTypeModel.GetKeyImplType">
            <summary>设置 TypeModel.GetKeyImpl(Type type) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubTypeModel.GetSchema(System.Type)">
            <summary>设置 TypeModel.GetSchema(Type type) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Meta.Fakes.StubTypeModel.GetSchemaType">
            <summary>设置 TypeModel.GetSchema(Type type) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubTypeModel.InitializeStub">
            <summary>初始化 type StubTypeModel 的新实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubTypeModel.MapType(System.Type,System.Boolean)">
            <summary>设置 TypeModel.MapType(Type type, Boolean demand) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Meta.Fakes.StubTypeModel.MapTypeTypeBoolean">
            <summary>设置 TypeModel.MapType(Type type, Boolean demand) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubTypeModel.Serialize(System.Int32,System.Object,ProtoBuf.ProtoWriter)">
            <summary>设置 TypeModel.Serialize(Int32 key, Object value, ProtoWriter dest) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.Meta.Fakes.StubTypeModel.SerializeInt32ObjectProtoWriter">
            <summary>设置 TypeModel.Serialize(Int32 key, Object value, ProtoWriter dest) 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.StubTypeModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.StubTypeModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.StubTypeModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ProtoBuf.Meta.Fakes.StubValueMember">
            <summary>ProtoBuf.Meta.ValueMember 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubValueMember.#ctor(ProtoBuf.Meta.RuntimeTypeModel,System.Type,System.Int32,System.Reflection.MemberInfo,System.Type,System.Type,System.Type,ProtoBuf.DataFormat,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.Meta.Fakes.StubValueMember.InitializeStub">
            <summary>初始化 type StubValueMember 的新实例</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.StubValueMember.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.StubValueMember.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ProtoBuf.Meta.Fakes.StubValueMember.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute">
            <summary>ProtoBuf.ServiceModel.ProtoBehaviorAttribute 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.#ctor(ProtoBuf.ServiceModel.ProtoBehaviorAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.Bind(System.ServiceModel.Description.IOperationBehavior)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.Constructor">
            <summary>设置 ProtoBehaviorAttribute.ProtoBehaviorAttribute() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.SystemServiceModelDescriptionIOperationBehaviorAddBindingParametersOperationDescriptionBindingParameterCollection">
            <summary>设置 ProtoBehaviorAttribute.System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.SystemServiceModelDescriptionIOperationBehaviorApplyClientBehaviorOperationDescriptionClientOperation">
            <summary>设置 ProtoBehaviorAttribute.System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.SystemServiceModelDescriptionIOperationBehaviorApplyDispatchBehaviorOperationDescriptionDispatchOperation">
            <summary>设置 ProtoBehaviorAttribute.System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.SystemServiceModelDescriptionIOperationBehaviorValidateOperationDescription">
            <summary>设置 ProtoBehaviorAttribute.System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription operationDescription) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.AllInstances.SystemServiceModelDescriptionIOperationBehaviorAddBindingParametersOperationDescriptionBindingParameterCollection">
            <summary>设置 ProtoBehaviorAttribute.System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.AllInstances.SystemServiceModelDescriptionIOperationBehaviorApplyClientBehaviorOperationDescriptionClientOperation">
            <summary>设置 ProtoBehaviorAttribute.System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.AllInstances.SystemServiceModelDescriptionIOperationBehaviorApplyDispatchBehaviorOperationDescriptionDispatchOperation">
            <summary>设置 ProtoBehaviorAttribute.System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorAttribute.AllInstances.SystemServiceModelDescriptionIOperationBehaviorValidateOperationDescription">
            <summary>设置 ProtoBehaviorAttribute.System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription operationDescription) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension">
            <summary>ProtoBuf.ServiceModel.ProtoBehaviorExtension 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.#ctor(ProtoBuf.ServiceModel.ProtoBehaviorExtension)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.BehaviorTypeGet">
            <summary>设置 ProtoBehaviorExtension.get_BehaviorType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.Constructor">
            <summary>设置 ProtoBehaviorExtension.ProtoBehaviorExtension() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.CreateBehavior">
            <summary>设置 ProtoBehaviorExtension.CreateBehavior() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.AllInstances.BehaviorTypeGet">
            <summary>设置 ProtoBehaviorExtension.get_BehaviorType() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoBehaviorExtension.AllInstances.CreateBehavior">
            <summary>设置 ProtoBehaviorExtension.CreateBehavior() 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior">
            <summary>ProtoBuf.ServiceModel.ProtoEndpointBehavior 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.#ctor(ProtoBuf.ServiceModel.ProtoEndpointBehavior)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.Bind(System.ServiceModel.Description.IEndpointBehavior)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.Constructor">
            <summary>设置 ProtoEndpointBehavior.ProtoEndpointBehavior() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.ReplaceDataContractSerializerOperationBehaviorOperationDescription">
            <summary>设置 ProtoEndpointBehavior.ReplaceDataContractSerializerOperationBehavior(OperationDescription description) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.ReplaceDataContractSerializerOperationBehaviorServiceEndpoint">
            <summary>设置 ProtoEndpointBehavior.ReplaceDataContractSerializerOperationBehavior(ServiceEndpoint serviceEndpoint) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.SystemServiceModelDescriptionIEndpointBehaviorAddBindingParametersServiceEndpointBindingParameterCollection">
            <summary>设置 ProtoEndpointBehavior.System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.SystemServiceModelDescriptionIEndpointBehaviorApplyClientBehaviorServiceEndpointClientRuntime">
            <summary>设置 ProtoEndpointBehavior.System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.SystemServiceModelDescriptionIEndpointBehaviorApplyDispatchBehaviorServiceEndpointEndpointDispatcher">
            <summary>设置 ProtoEndpointBehavior.System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.SystemServiceModelDescriptionIEndpointBehaviorValidateServiceEndpoint">
            <summary>设置 ProtoEndpointBehavior.System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.AllInstances.SystemServiceModelDescriptionIEndpointBehaviorAddBindingParametersServiceEndpointBindingParameterCollection">
            <summary>设置 ProtoEndpointBehavior.System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.AllInstances.SystemServiceModelDescriptionIEndpointBehaviorApplyClientBehaviorServiceEndpointClientRuntime">
            <summary>设置 ProtoEndpointBehavior.System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.AllInstances.SystemServiceModelDescriptionIEndpointBehaviorApplyDispatchBehaviorServiceEndpointEndpointDispatcher">
            <summary>设置 ProtoEndpointBehavior.System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoEndpointBehavior.AllInstances.SystemServiceModelDescriptionIEndpointBehaviorValidateServiceEndpoint">
            <summary>设置 ProtoEndpointBehavior.System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior">
            <summary>ProtoBuf.ServiceModel.ProtoOperationBehavior 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.#ctor(ProtoBuf.ServiceModel.ProtoOperationBehavior)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.Bind(System.ServiceModel.Description.IOperationBehavior)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.Bind(System.ServiceModel.Description.IWsdlExportExtension)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.ConstructorOperationDescription">
            <summary>设置 ProtoOperationBehavior.ProtoOperationBehavior(OperationDescription operation) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.CreateSerializerTypeXmlDictionaryStringXmlDictionaryStringIListOfType">
            <summary>设置 ProtoOperationBehavior.CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList`1&lt;Type&gt; knownTypes) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.ModelGet">
            <summary>设置 ProtoOperationBehavior.get_Model() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.ModelSetTypeModel">
            <summary>设置 ProtoOperationBehavior.set_Model(TypeModel value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.AllInstances.CreateSerializerTypeXmlDictionaryStringXmlDictionaryStringIListOfType">
            <summary>设置 ProtoOperationBehavior.CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList`1&lt;Type&gt; knownTypes) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.AllInstances.ModelGet">
            <summary>设置 ProtoOperationBehavior.get_Model() 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimProtoOperationBehavior.AllInstances.ModelSetTypeModel">
            <summary>设置 ProtoOperationBehavior.set_Model(TypeModel value) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer">
            <summary>ProtoBuf.ServiceModel.XmlProtoSerializer 的填充码类型</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.#ctor(ProtoBuf.ServiceModel.XmlProtoSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.ConstructorTypeModelInt32TypeBoolean">
            <summary>设置 XmlProtoSerializer.XmlProtoSerializer(TypeModel model, Int32 key, Type type, Boolean isList) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.ConstructorTypeModelType">
            <summary>设置 XmlProtoSerializer.XmlProtoSerializer(TypeModel model, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.GetKeyTypeModelTypeRefBooleanOut">
            <summary>设置 XmlProtoSerializer.GetKey(TypeModel model, Type&amp; type, Boolean&amp; isList) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.IsStartObjectXmlDictionaryReader">
            <summary>设置 XmlProtoSerializer.IsStartObject(XmlDictionaryReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.ReadObjectXmlDictionaryReaderBoolean">
            <summary>设置 XmlProtoSerializer.ReadObject(XmlDictionaryReader reader, Boolean verifyObjectName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.TryCreateTypeModelType">
            <summary>设置 XmlProtoSerializer.TryCreate(TypeModel model, Type type) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.WriteEndObjectXmlDictionaryWriter">
            <summary>设置 XmlProtoSerializer.WriteEndObject(XmlDictionaryWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.WriteObjectContentXmlDictionaryWriterObject">
            <summary>设置 XmlProtoSerializer.WriteObjectContent(XmlDictionaryWriter writer, Object graph) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.WriteStartObjectXmlDictionaryWriterObject">
            <summary>设置 XmlProtoSerializer.WriteStartObject(XmlDictionaryWriter writer, Object graph) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.AllInstances.IsStartObjectXmlDictionaryReader">
            <summary>设置 XmlProtoSerializer.IsStartObject(XmlDictionaryReader reader) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.AllInstances.ReadObjectXmlDictionaryReaderBoolean">
            <summary>设置 XmlProtoSerializer.ReadObject(XmlDictionaryReader reader, Boolean verifyObjectName) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.AllInstances.WriteEndObjectXmlDictionaryWriter">
            <summary>设置 XmlProtoSerializer.WriteEndObject(XmlDictionaryWriter writer) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.AllInstances.WriteObjectContentXmlDictionaryWriterObject">
            <summary>设置 XmlProtoSerializer.WriteObjectContent(XmlDictionaryWriter writer, Object graph) 的 填充码</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.ShimXmlProtoSerializer.AllInstances.WriteStartObjectXmlDictionaryWriterObject">
            <summary>设置 XmlProtoSerializer.WriteStartObject(XmlDictionaryWriter writer, Object graph) 的 填充码</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension">
            <summary>ProtoBuf.ServiceModel.ProtoBehaviorExtension 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.BehaviorTypeGet">
            <summary>设置 ProtoBehaviorExtension.get_BehaviorType() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
            <summary>设置 ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement from) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.CopyFromServiceModelExtensionElement">
            <summary>设置 ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement from) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.CreateBehavior">
            <summary>设置 ProtoBehaviorExtension.CreateBehavior() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.CreateBehavior01">
            <summary>设置 ProtoBehaviorExtension.CreateBehavior() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>设置 ConfigurationElement.DeserializeElement(XmlReader reader, Boolean serializeCollectionKey) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.DeserializeElementXmlReaderBoolean">
            <summary>设置 ConfigurationElement.DeserializeElement(XmlReader reader, Boolean serializeCollectionKey) 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.ElementPropertyGet">
            <summary>设置 ConfigurationElement.get_ElementProperty() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.Equals(System.Object)">
            <summary>设置 ConfigurationElement.Equals(Object compareTo) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.EqualsObject">
            <summary>设置 ConfigurationElement.Equals(Object compareTo) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.GetHashCode">
            <summary>设置 ConfigurationElement.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.GetHashCode01">
            <summary>设置 ConfigurationElement.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.GetTransformedAssemblyString(System.String)">
            <summary>设置 ConfigurationElement.GetTransformedAssemblyString(String assemblyName) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.GetTransformedAssemblyStringString">
            <summary>设置 ConfigurationElement.GetTransformedAssemblyString(String assemblyName) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.GetTransformedTypeString(System.String)">
            <summary>设置 ConfigurationElement.GetTransformedTypeString(String typeName) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.GetTransformedTypeStringString">
            <summary>设置 ConfigurationElement.GetTransformedTypeString(String typeName) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.Init">
            <summary>设置 ConfigurationElement.Init() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.Init01">
            <summary>设置 ConfigurationElement.Init() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.InitializeDefault">
            <summary>设置 ConfigurationElement.InitializeDefault() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.InitializeDefault01">
            <summary>设置 ConfigurationElement.InitializeDefault() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.InitializeStub">
            <summary>初始化 type StubProtoBehaviorExtension 的新实例</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.IsModified">
            <summary>设置 ServiceModelExtensionElement.IsModified() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.IsModified01">
            <summary>设置 ServiceModelExtensionElement.IsModified() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.IsReadOnly">
            <summary>设置 ConfigurationElement.IsReadOnly() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.IsReadOnly01">
            <summary>设置 ConfigurationElement.IsReadOnly() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.ListErrors(System.Collections.IList)">
            <summary>设置 ConfigurationElement.ListErrors(IList errorList) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.ListErrorsIList">
            <summary>设置 ConfigurationElement.ListErrors(IList errorList) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>设置 ConfigurationElement.OnDeserializeUnrecognizedAttribute(String name, String value) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.OnDeserializeUnrecognizedAttributeStringString">
            <summary>设置 ConfigurationElement.OnDeserializeUnrecognizedAttribute(String name, String value) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>设置 ConfigurationElement.OnDeserializeUnrecognizedElement(String elementName, XmlReader reader) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.OnDeserializeUnrecognizedElementStringXmlReader">
            <summary>设置 ConfigurationElement.OnDeserializeUnrecognizedElement(String elementName, XmlReader reader) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.OnRequiredPropertyNotFound(System.String)">
            <summary>设置 ConfigurationElement.OnRequiredPropertyNotFound(String name) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.OnRequiredPropertyNotFoundString">
            <summary>设置 ConfigurationElement.OnRequiredPropertyNotFound(String name) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.PostDeserialize">
            <summary>设置 ConfigurationElement.PostDeserialize() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.PostDeserialize01">
            <summary>设置 ConfigurationElement.PostDeserialize() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.PreSerialize(System.Xml.XmlWriter)">
            <summary>设置 ConfigurationElement.PreSerialize(XmlWriter writer) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.PreSerializeXmlWriter">
            <summary>设置 ConfigurationElement.PreSerialize(XmlWriter writer) 的 stub</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.PropertiesGet">
            <summary>设置 ConfigurationElement.get_Properties() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.Reset(System.Configuration.ConfigurationElement)">
            <summary>设置 ServiceModelExtensionElement.Reset(ConfigurationElement parentElement) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.ResetConfigurationElement">
            <summary>设置 ServiceModelExtensionElement.Reset(ConfigurationElement parentElement) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.ResetModified">
            <summary>设置 ConfigurationElement.ResetModified() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.ResetModified01">
            <summary>设置 ConfigurationElement.ResetModified() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
            <summary>设置 ServiceModelExtensionElement.SerializeElement(XmlWriter writer, Boolean serializeCollectionKey) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.SerializeElementXmlWriterBoolean">
            <summary>设置 ServiceModelExtensionElement.SerializeElement(XmlWriter writer, Boolean serializeCollectionKey) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>设置 ConfigurationElement.SerializeToXmlElement(XmlWriter writer, String elementName) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.SerializeToXmlElementXmlWriterString">
            <summary>设置 ConfigurationElement.SerializeToXmlElement(XmlWriter writer, String elementName) 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.SetReadOnly">
            <summary>设置 ConfigurationElement.SetReadOnly() 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.SetReadOnly01">
            <summary>设置 ConfigurationElement.SetReadOnly() 的 stub</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>设置 ConfigurationElement.Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode) 的 存根</summary>
        </member>
        <member name="F:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.UnmergeConfigurationElementConfigurationElementConfigurationSaveMode">
            <summary>设置 ConfigurationElement.Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode) 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.BehaviorType">
            <summary>设置 ProtoBehaviorExtension.get_BehaviorType() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.ElementProperty">
            <summary>设置 ConfigurationElement.get_ElementProperty() 的 stub</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoBehaviorExtension.Properties">
            <summary>设置 ConfigurationElement.get_Properties() 的 stub</summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Fakes.StubProtoEndpointBehavior">
            <summary>ProtoBuf.ServiceModel.ProtoEndpointBehavior 的存根类型</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoEndpointBehavior.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Fakes.StubProtoEndpointBehavior.InitializeStub">
            <summary>初始化 type StubProtoEndpointBehavior 的新实例</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoEndpointBehavior.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoEndpointBehavior.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ProtoBuf.ServiceModel.Fakes.StubProtoEndpointBehavior.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
