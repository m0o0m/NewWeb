<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http.OData</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.ODataHttpRequestMessageExtensions">
      <summary>为 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.CreateODataErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,Microsoft.Data.OData.ODataError)">
      <summary>帮助器方法，用于执行内容协商，并创建一个 <see cref="T:System.Net.Http.HttpResponseMessage" />（表示将 <paramref name="oDataError" /> 包装为内容的 <see cref="T:System.Net.Http.ObjectContent`1" /> 的实例存在的错误）。如果找不到格式化程序，则此方法将返回状态为“406 NotAcceptable”的响应。此方法要求 <paramref name="request" /> 已与 <see cref="T:System.Web.Http.HttpConfiguration" /> 的实例相关联。</summary>
      <returns>一个用于包装 <paramref name="oDataError" /> 的错误响应，状态代码为 <paramref name="statusCode" />。</returns>
      <param name="request">感兴趣的请求。</param>
      <param name="statusCode">所创建的响应的状态代码。</param>
      <param name="oDataError">要包装的 OData 错误。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetEdmModel(System.Net.Http.HttpRequestMessage)">
      <summary>获取与请求关联的 EDM 模型。</summary>
      <returns>与此请求关联的 EDM 模型，如果没有该模型，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetInlineCount(System.Net.Http.HttpRequestMessage)">
      <summary>获取 OData 响应的内联计数。如果没有计数应发回客户端，则返回 null。</summary>
      <returns>要发回客户端的内联计数，如果没有计数应发回客户端，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetNextPageLink(System.Net.Http.HttpRequestMessage)">
      <summary>获取 OData 响应的下一页链接。</summary>
      <returns>要发回客户端的下一页链接，如果没有下一页链接应发回客户端，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetODataPath(System.Net.Http.HttpRequestMessage)">
      <summary>获取请求的 OData 路径。</summary>
      <returns>请求的 OData 路径，如果没有该路径，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetODataPathHandler(System.Net.Http.HttpRequestMessage)">
      <summary>获取用于生成链接的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。如果值当前为 null，则创建默认的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</summary>
      <returns>用于生成链接的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetODataRouteName(System.Net.Http.HttpRequestMessage)">
      <summary>获取用于生成 OData 链接的路由名称。</summary>
      <returns>用于生成 OData 链接的路由名称，如果没有该名称，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetODataRoutingConventions(System.Net.Http.HttpRequestMessage)">
      <summary>获取用于控制器和操作选择的 OData 路由约定。</summary>
      <returns>用于控制器和操作选择的 OData 路由约定，如果没有该路由约定，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetRoutingConventionsDataStore(System.Net.Http.HttpRequestMessage)">
      <summary>获取由 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 用来存储任何自定义路由数据的数据存储。首次调用时，创建新的 IDictionary&lt;string, object&gt;。</summary>
      <returns>由 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 用来存储任何自定义路由数据的数据存储。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.GetSelectExpandClause(System.Net.Http.HttpRequestMessage)">
      <summary>获取请求的已分析 OData <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause" />。在写入此请求的响应时，<see cref="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter" /> 将使用此信息（如果有）。</summary>
      <returns>请求的已分析 OData <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause" />，如果没有该项，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetEdmModel(System.Net.Http.HttpRequestMessage,Microsoft.Data.Edm.IEdmModel)">
      <summary>设置与请求关联的 EDM 模型。</summary>
      <param name="request">请求。</param>
      <param name="model">要与请求关联的 EDM 模型。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetInlineCount(System.Net.Http.HttpRequestMessage,System.Int64)">
      <summary>设置 OData 响应的内联计数。</summary>
      <param name="request">请求。</param>
      <param name="inlineCount">要发回到客户端的内联计数。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetNextPageLink(System.Net.Http.HttpRequestMessage,System.Uri)">
      <summary>设置 OData 响应的下一页链接。</summary>
      <param name="request">请求。</param>
      <param name="nextPageLink">要发回到客户端的下一页链接。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetODataPath(System.Net.Http.HttpRequestMessage,System.Web.Http.OData.Routing.ODataPath)">
      <summary>设置请求的 OData 路径。</summary>
      <param name="request">请求。</param>
      <param name="odataPath">请求的 OData 路径。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetODataPathHandler(System.Net.Http.HttpRequestMessage,System.Web.Http.OData.Routing.IODataPathHandler)">
      <summary>设置用于生成链接的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</summary>
      <param name="request">请求。</param>
      <param name="pathHandler">用于生成链接的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetODataRouteName(System.Net.Http.HttpRequestMessage,System.String)">
      <summary>设置用于生成 OData 链接的路由名称。</summary>
      <param name="request">请求。</param>
      <param name="routeName">用于生成 OData 链接的路由名称。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetODataRoutingConventions(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention})">
      <summary>设置用于控制器和操作选择的 OData 路由约定。</summary>
      <param name="request">请求。</param>
      <param name="routingConventions">用于控制器和操作选择的 OData 路由约定。</param>
    </member>
    <member name="M:System.Net.Http.ODataHttpRequestMessageExtensions.SetSelectExpandClause(System.Net.Http.HttpRequestMessage,Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause)">
      <summary>设置请求的已分析 OData <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause" />。在写入此请求的响应时，<see cref="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter" /> 将使用此信息（如果有）。</summary>
      <param name="request">请求。</param>
      <param name="selectExpandClause">请求的已分析 OData <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause" />。</param>
    </member>
    <member name="T:System.Web.Http.ODataHttpConfigurationExtensions">
      <summary>为 <see cref="T:System.Web.Http.HttpConfiguration" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.ODataHttpConfigurationExtensions.EnableQuerySupport(System.Web.Http.HttpConfiguration)">
      <summary>针对返回类型为 <see cref="T:System.Linq.IQueryable" /> 或 <see cref="T:System.Linq.IQueryable`1" /> 的操作启用查询支持。若要避免处理意外查询或恶意查询，请使用 <see cref="T:System.Web.Http.OData.EnableQueryAttribute" /> 上的验证设置以验证传入查询。有关更多信息，请访问 http://go.microsoft.com/fwlink/?LinkId=279712。</summary>
      <param name="configuration">服务器配置。</param>
    </member>
    <member name="M:System.Web.Http.ODataHttpConfigurationExtensions.EnableQuerySupport(System.Web.Http.HttpConfiguration,System.Web.Http.Filters.IActionFilter)">
      <summary>针对返回类型为 <see cref="T:System.Linq.IQueryable" /> 或 <see cref="T:System.Linq.IQueryable`1" /> 的操作启用查询支持。若要避免处理意外查询或恶意查询，请使用 <see cref="T:System.Web.Http.OData.EnableQueryAttribute" /> 上的验证设置以验证传入查询。有关更多信息，请访问 http://go.microsoft.com/fwlink/?LinkId=279712。</summary>
      <param name="configuration">服务器配置。</param>
      <param name="queryFilter">执行查询的操作筛选器。</param>
    </member>
    <member name="T:System.Web.Http.ODataHttpErrorExtensions">
      <summary>为 <see cref="T:System.Web.Http.HttpError" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.ODataHttpErrorExtensions.ToODataError(System.Web.Http.HttpError)">
      <summary>将 <paramref name="httpError" /> 转换为 <see cref="T:Microsoft.Data.OData.ODataError" />。</summary>
      <returns>转换后的 <see cref="T:Microsoft.Data.OData.ODataError" /></returns>
      <param name="httpError">要转换的 <see cref="T:System.Web.Http.HttpError" /> 实例。</param>
    </member>
    <member name="T:System.Web.Http.ODataHttpRouteCollectionExtensions">
      <summary>为 <see cref="T:System.Web.Http.HttpRouteCollection" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.ODataHttpRouteCollectionExtensions.MapODataRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel)">
      <summary>映射指定的 OData 路由。</summary>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="routeName">要映射的路由的名称。</param>
      <param name="routePrefix">要添加到 OData 路由的路径模板的前缀。</param>
      <param name="model">用于分析 OData 路径的 EDM 模型。</param>
    </member>
    <member name="M:System.Web.Http.ODataHttpRouteCollectionExtensions.MapODataRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Batch.ODataBatchHandler)">
      <summary>映射指定的 OData 路由。如果已提供 <paramref name="batchHandler" />，它将创建“$batch”终结点以处理批请求。</summary>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="routeName">要映射的路由的名称。</param>
      <param name="routePrefix">要添加到 OData 路由的路径模板的前缀。</param>
      <param name="model">用于分析 OData 路径的 EDM 模型。</param>
      <param name="batchHandler">
        <see cref="T:System.Web.Http.OData.Batch.ODataBatchHandler" />。</param>
    </member>
    <member name="M:System.Web.Http.ODataHttpRouteCollectionExtensions.MapODataRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.IODataPathHandler,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention})">
      <summary>映射指定的 OData 路由。</summary>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="routeName">要映射的路由的名称。</param>
      <param name="routePrefix">要添加到 OData 路由的路径模板的前缀。</param>
      <param name="model">用于分析 OData 路径的 EDM 模型。</param>
      <param name="pathHandler">用于分析 OData 路径的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</param>
      <param name="routingConventions">要用于控制器和操作选择的 OData 路由约定。</param>
    </member>
    <member name="M:System.Web.Http.ODataHttpRouteCollectionExtensions.MapODataRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.IODataPathHandler,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention},System.Web.Http.OData.Batch.ODataBatchHandler)">
      <summary>映射指定的 OData 路由。如果已提供 <paramref name="batchHandler" />，它将创建“$batch”终结点以处理批请求。</summary>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="routeName">要映射的路由的名称。</param>
      <param name="routePrefix">要添加到 OData 路由的路径模板的前缀。</param>
      <param name="model">用于分析 OData 路径的 EDM 模型。</param>
      <param name="pathHandler">用于分析 OData 路径的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</param>
      <param name="routingConventions">要用于控制器和操作选择的 OData 路由约定。</param>
      <param name="batchHandler">
        <see cref="T:System.Web.Http.OData.Batch.ODataBatchHandler" />。</param>
    </member>
    <member name="T:System.Web.Http.ODataMediaTypeFormatterCollectionExtensions">
      <summary>为 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.ODataMediaTypeFormatterCollectionExtensions.AddRange(System.Net.Http.Formatting.MediaTypeFormatterCollection,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>向 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 的末尾添加指定集合中的元素。</summary>
      <param name="collection">要将项添加到的集合。</param>
      <param name="items">应添加到 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 末尾的项。项集合本身不能为 <see cref="null" />，但可以包含作为 <see cref="null" /> 的元素。</param>
    </member>
    <member name="M:System.Web.Http.ODataMediaTypeFormatterCollectionExtensions.InsertRange(System.Net.Http.Formatting.MediaTypeFormatterCollection,System.Int32,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>将集合中的元素插入指定索引处的 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 中。</summary>
      <param name="index">从零开始的索引，应在此索引处插入新元素。</param>
      <param name="items">应插入到 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> 的项。项集合本身不能为 <see cref="null" />，但可以包含作为 <see cref="null" /> 的元素。</param>
    </member>
    <member name="T:System.Web.Http.ODataUrlHelperExtensions">
      <summary>为 <see cref="T:System.Web.Http.Routing.UrlHelper" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.ODataUrlHelperExtensions.ODataLink(System.Web.Http.Routing.UrlHelper,System.Collections.Generic.IList{System.Web.Http.OData.Routing.ODataPathSegment})">
      <summary>使用请求的 OData 路由名称、路径处理程序以及给定的段生成 OData 链接。</summary>
      <returns>生成的 OData 链接。</returns>
      <param name="urlHelper">URL 帮助器。</param>
      <param name="segments">OData 路径段。</param>
    </member>
    <member name="M:System.Web.Http.ODataUrlHelperExtensions.ODataLink(System.Web.Http.Routing.UrlHelper,System.String,System.Web.Http.OData.Routing.IODataPathHandler,System.Collections.Generic.IList{System.Web.Http.OData.Routing.ODataPathSegment})">
      <summary>使用给定的 OData 路由名称、路径处理程序和段生成 OData 链接。</summary>
      <returns>生成的 OData 链接。</returns>
      <param name="urlHelper">URL 帮助器。</param>
      <param name="routeName">OData 路由的名称。</param>
      <param name="pathHandler">用于生成链接的路径处理程序。</param>
      <param name="segments">OData 路径段。</param>
    </member>
    <member name="M:System.Web.Http.ODataUrlHelperExtensions.ODataLink(System.Web.Http.Routing.UrlHelper,System.Web.Http.OData.Routing.ODataPathSegment[])">
      <summary>使用请求的 OData 路由名称、路径处理程序以及给定的段生成 OData 链接。</summary>
      <returns>生成的 OData 链接。</returns>
      <param name="urlHelper">URL 帮助器。</param>
      <param name="segments">OData 路径段。</param>
    </member>
    <member name="T:System.Web.Http.QueryableAttribute">
      <summary>使控制器操作可以支持 OData 查询参数。</summary>
    </member>
    <member name="M:System.Web.Http.QueryableAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.QueryableAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Web.Http.OData.AsyncEntitySetController`2">
      <summary>为公开 OData 实体集的控制器提供一个方便的起点。这是 <see cref="T:System.Web.Http.OData.EntitySetController`2" /> 的异步版本。</summary>
      <typeparam name="TEntity">与所公开实体集的实体类型关联的类型。</typeparam>
      <typeparam name="TKey">与所公开实体集实体类型的实体键关联的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.#ctor"></member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.CreateEntityAsync(`0)">
      <summary>应重写此方法，以在实体集中创建新实体。</summary>
      <returns>在完成时包含已创建实体的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="entity">要添加到实体集的实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.CreateLink(`1,System.String,System.Uri)">
      <summary>应重写此方法，以处理尝试在两个实体之间创建链接的 POST 和 PUT 请求。</summary>
      <returns>在已成功创建链接时完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">具有导航属性的实体的键。</param>
      <param name="navigationProperty">导航属性的名称。</param>
      <param name="link">要链接的实体的 URI。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Delete(`1)">
      <summary>应重写此方法，以处理用于从实体集中删除现有实体的 DELETE 请求。</summary>
      <returns>在已成功删除实体时完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">要删除的实体的实体键。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.DeleteLink(`1,System.String,System.String)">
      <summary>应重写此方法，以处理尝试破坏两个实体之间的关系的 DELETE 请求。</summary>
      <returns>在已成功删除链接时完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">具有导航属性的实体的键。</param>
      <param name="relatedKey">相关实体的键。</param>
      <param name="navigationProperty">导航属性的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.DeleteLink(`1,System.String,System.Uri)">
      <summary>应重写此方法，以处理尝试破坏两个实体之间的关系的 DELETE 请求。</summary>
      <returns>在已成功删除链接时完成的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">具有导航属性的实体的键。</param>
      <param name="navigationProperty">导航属性的名称。</param>
      <param name="link">要从导航属性中删除的实体的 URI。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Get">
      <summary>应重写此方法，以处理尝试从实体集中检索实体的 GET 请求。此方法应通过应用请求的查询选项以异步方式计算匹配实体。</summary>
      <returns>在完成时包含实体集中的匹配实体的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Get(`1)">
      <summary>处理尝试从实体集中根据键检索单个实体的 GET 请求。</summary>
      <returns>在完成时包含要发回到客户端的响应消息的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">要检索的实体的实体键。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.GetEntityByKeyAsync(`1)">
      <summary>应重写此方法，以从实体集中根据键检索实体。</summary>
      <returns>在完成时包含检索到的实体的 <see cref="T:System.Threading.Tasks.Task" />；如果在实体集中找不到具有指定实体键的实体，则为 null。</returns>
      <param name="key">要检索的实体的实体键。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.GetKey(`0)">
      <summary>应重写此方法，以获取指定实体的实体键。</summary>
      <returns>实体键值</returns>
      <param name="entity">实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.HandleUnmappedRequest(System.Web.Http.OData.Routing.ODataPath)">
      <summary>应重写此方法，以处理所有未映射的 OData 请求。</summary>
      <returns>在完成时包含要发回到客户端的响应消息的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="odataPath">请求的 OData 路径。</param>
    </member>
    <member name="P:System.Web.Http.OData.AsyncEntitySetController`2.ODataPath">
      <summary>获取当前请求的 OData 路径。</summary>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Patch(`1,System.Web.Http.OData.Delta{`0})">
      <summary>处理 PATCH 和 MERGE 请求，以部分更新实体集中的单个实体。</summary>
      <returns>在完成时包含要发回到客户端的响应消息的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">要更新的实体的实体键。</param>
      <param name="patch">表示部分更新的修补程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.PatchEntityAsync(`1,System.Web.Http.OData.Delta{`0})">
      <summary>应重写此方法，以将部分更新应用到实体集中的现有实体。</summary>
      <returns>在完成时包含已更新实体的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">要更新的实体的实体键。</param>
      <param name="patch">表示部分更新的修补程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Post(`0)">
      <summary>处理用于在实体集中创建新实体的 POST 请求。</summary>
      <returns>在完成时包含要发回到客户端的响应消息的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="entity">要插入到实体集中的实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.Put(`1,`0)">
      <summary>处理尝试替换实体集中的单个实体的 PUT 请求。</summary>
      <returns>在完成时包含要发回到客户端的响应消息的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">要替换的实体的实体键。</param>
      <param name="update">更新的实体。</param>
    </member>
    <member name="P:System.Web.Http.OData.AsyncEntitySetController`2.QueryOptions">
      <summary>获取当前请求的 OData 查询选项。</summary>
    </member>
    <member name="M:System.Web.Http.OData.AsyncEntitySetController`2.UpdateEntityAsync(`1,`0)">
      <summary>应重写此方法，以更新实体集中的现有实体。</summary>
      <returns>在完成时包含已更新实体的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="key">要更新的实体的实体键。</param>
      <param name="update">更新的实体。</param>
    </member>
    <member name="T:System.Web.Http.OData.ClrTypeAnnotation">
      <summary>表示从 <see cref="T:Microsoft.Data.Edm.IEdmType" /> 到 CLR 类型的映射。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ClrTypeAnnotation.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.ClrTypeAnnotation" /> 类的新实例。</summary>
      <param name="clrType">EDM 类型的后备 CLR 类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.ClrTypeAnnotation.ClrType">
      <summary>EDM 类型的后备 CLR 类型。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Delta">
      <summary>一个类，用于跟踪实体的更改（即增量）。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Delta.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Delta" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Delta.Clear">
      <summary>清除增量并重置基础实体。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Delta.GetChangedPropertyNames">
      <summary>返回已通过此增量修改为属性名称枚举的属性</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta.GetUnchangedPropertyNames">
      <summary>返回尚未通过此增量修改为属性名称枚举的属性</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>重写 DynamicObject TryGetMember 方法，以便只能获取 Entity 的属性。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta.TryGetPropertyType(System.String,System.Type@)">
      <summary>尝试从基础实体获取名为 <paramref name="name" /> 的属性的 <see cref="T:System.Type" />。</summary>
      <returns>如果找到了该属性，则返回 true；否则返回 false。</returns>
      <param name="name">属性的名称</param>
      <param name="type">属性的类型</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta.TryGetPropertyValue(System.String,System.Object@)">
      <summary>尝试从基础实体获取名为 <paramref name="name" /> 的属性的值。</summary>
      <returns>如果找到了该属性，则为 true</returns>
      <param name="name">属性的名称</param>
      <param name="value">属性的值</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>重写 DynamicObject TrySetMember 方法，以便只能设置 Entity 的属性。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta.TrySetPropertyValue(System.String,System.Object)">
      <summary>尝试将名为 <paramref name="name" /> 的属性设置为指定的 <paramref name="value" />。</summary>
      <returns>如果成功，则为 true</returns>
      <param name="name">属性的名称</param>
      <param name="value">属性的新值</param>
    </member>
    <member name="T:System.Web.Http.OData.Delta`1">
      <summary>一个类，用于跟踪特定 <paramref name="TEntityType" /> 的更改（即增量）。</summary>
      <typeparam name="TEntityType">TEntityType 是此增量要跟踪其更改的实体的基类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Delta`1" /> 的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Delta`1" /> 的新实例。</summary>
      <param name="entityType">其更改将受到跟踪的派生实体类型。<paramref name="entityType" /> 应可分配到 <paramref name="TEntityType" /> 的实例。</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.String})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Delta`1" /> 的新实例。</summary>
      <param name="entityType">其更改将受到跟踪的派生实体类型。<paramref name="entityType" /> 应可分配到 <paramref name="TEntityType" /> 的实例。</param>
      <param name="updatableProperties">可以更新或重置的属性组。</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.Clear">
      <summary>清除增量并重置基础实体。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.CopyChangedValues(`0)">
      <summary>将更改的属性值从基础实体（可通过 <see cref="M:System.Web.Http.OData.Delta`1.GetEntity" /> 访问）复制到 <paramref name="original" /> 实体。</summary>
      <param name="original">要更新的实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.CopyUnchangedValues(`0)">
      <summary>将未更改的属性值从基础实体（可通过 <see cref="M:System.Web.Http.OData.Delta`1.GetEntity" /> 访问）复制到 <paramref name="original" /> 实体。</summary>
      <param name="original">要更新的实体。</param>
    </member>
    <member name="P:System.Web.Http.OData.Delta`1.EntityType">
      <summary>获取跟踪其更改的实体的实际类型。</summary>
      <returns>跟踪其更改的实体的实际类型。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Delta`1.ExpectedClrType">
      <returns>返回 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.GetChangedPropertyNames">
      <summary>返回已通过此增量修改为属性名称枚举的属性。</summary>
      <returns>属性名称。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.GetDynamicMemberNames">
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.GetEntity">
      <summary>返回 <see cref="P:System.Web.Http.OData.Delta`1.EntityType" /> 实例，用于保留此增量正在跟踪的所有更改（以及原始值）。</summary>
      <returns>
        <see cref="P:System.Web.Http.OData.Delta`1.EntityType" /> 实例。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.GetUnchangedPropertyNames">
      <summary>返回尚未通过此增量修改为属性名称枚举的属性。</summary>
      <returns>尚未通过此增量修改为属性名称枚举的属性。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.Patch(`0)">
      <summary>使用此增量跟踪的更改覆盖 <paramref name="original" /> 实体。</summary>
      <param name="original">要更新的实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.Put(`0)">
      <summary>使用此增量中存储的值覆盖 <paramref name="original" /> 实体。</summary>
      <param name="original">要更新的实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.TryGetPropertyType(System.String,System.Type@)">
      <summary>尝试从基础实体获取名为 <paramref name="name" /> 的属性的 <see cref="T:System.Type" />。</summary>
      <returns>如果找到了该属性，则为 true；否则为 false。</returns>
      <param name="name">属性的名称。</param>
      <param name="type">属性的类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.TryGetPropertyValue(System.String,System.Object@)">
      <summary>尝试从基础实体获取名为 <paramref name="name" /> 的属性的值。</summary>
      <returns>如果找到了该属性，则为 true。</returns>
      <param name="name">属性的名称。</param>
      <param name="value">属性的值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Delta`1.TrySetPropertyValue(System.String,System.Object)">
      <summary>尝试将名为 <paramref name="name" /> 的属性设置为指定的 <paramref name="value" />。</summary>
      <returns>如果成功，则为 true；否则为 false。</returns>
      <param name="name">属性的名称。</param>
      <param name="value">属性的新值。</param>
    </member>
    <member name="T:System.Web.Http.OData.EdmComplexObject">
      <summary>表示没有后备 CLR <see cref="T:System.Type" /> 的 <see cref="T:System.Web.Http.OData.IEdmComplexObject" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmComplexObject.#ctor(Microsoft.Data.Edm.IEdmComplexType)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmComplexObject.#ctor(Microsoft.Data.Edm.IEdmComplexType,System.Boolean)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmComplexType" />。</param>
      <param name="isNullable">如果此对象可为 null，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmComplexObject.#ctor(Microsoft.Data.Edm.IEdmComplexTypeReference)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmComplexTypeReference" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.EdmComplexObjectCollection">
      <summary>表示作为 <see cref="T:System.Web.Http.OData.IEdmComplexObject" /> 的集合的 <see cref="T:System.Web.Http.OData.IEdmObject" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmComplexObjectCollection.#ctor(Microsoft.Data.Edm.IEdmCollectionTypeReference)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmComplexObjectCollection" /> 类的新实例。</summary>
      <param name="edmType">集合的 edm 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmComplexObjectCollection.#ctor(Microsoft.Data.Edm.IEdmCollectionTypeReference,System.Collections.Generic.IList{System.Web.Http.OData.IEdmComplexObject})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmComplexObjectCollection" /> 类的新实例。</summary>
      <param name="edmType">集合的 edm 类型。</param>
      <param name="list">由新的集合包装的列表。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmComplexObjectCollection.GetEdmType"></member>
    <member name="T:System.Web.Http.OData.EdmEntityObject">
      <summary>表示没有后备 CLR <see cref="T:System.Type" /> 的 <see cref="T:System.Web.Http.OData.IEdmEntityObject" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmEntityObject.#ctor(Microsoft.Data.Edm.IEdmEntityType)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmEntityObject.#ctor(Microsoft.Data.Edm.IEdmEntityType,System.Boolean)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />。</param>
      <param name="isNullable">如果此对象可为 null，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmEntityObject.#ctor(Microsoft.Data.Edm.IEdmEntityTypeReference)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmEntityTypeReference" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.EdmEntityObjectCollection">
      <summary>表示作为 <see cref="T:System.Web.Http.OData.IEdmEntityObject" /> 的集合的 <see cref="T:System.Web.Http.OData.IEdmObject" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmEntityObjectCollection.#ctor(Microsoft.Data.Edm.IEdmCollectionTypeReference)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmEntityObjectCollection" /> 类的新实例。</summary>
      <param name="edmType">集合的 edm 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmEntityObjectCollection.#ctor(Microsoft.Data.Edm.IEdmCollectionTypeReference,System.Collections.Generic.IList{System.Web.Http.OData.IEdmEntityObject})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmEntityObjectCollection" /> 类的新实例。</summary>
      <param name="edmType">集合的 edm 类型。</param>
      <param name="list">由新的集合包装的列表。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmEntityObjectCollection.GetEdmType"></member>
    <member name="T:System.Web.Http.OData.EdmModelExtensions">
      <summary>为 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 接口提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmModelExtensions.GetActionLinkBuilder(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmFunctionImport)">
      <summary>获取为给定操作生成操作链接时要使用的 <see cref="T:System.Web.Http.OData.Builder.ActionLinkBuilder" />。</summary>
      <returns>返回给定操作的 <see cref="T:System.Web.Http.OData.Builder.ActionLinkBuilder" />（如果已设置）；否则，返回根据 OData URL 约定生成操作链接的新 <see cref="T:System.Web.Http.OData.Builder.ActionLinkBuilder" />。</returns>
      <param name="model">包含操作的 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</param>
      <param name="action">需要链接生成器的操作。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmModelExtensions.GetEntitySetLinkBuilder(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取为给定实体集生成自助链接和导航链接时要使用的 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" />。</summary>
      <returns>返回 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" />（如果已针对给定的实体集进行设置）；否则，返回用于生成遵循 OData URL 约定的 URL 的新 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" />。</returns>
      <param name="model">包含实体集的 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</param>
      <param name="entitySet">实体集。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmModelExtensions.SetActionLinkBuilder(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmFunctionImport,System.Web.Http.OData.Builder.ActionLinkBuilder)">
      <summary>设置用于为给定操作生成 OData 操作链接的 <see cref="T:System.Web.Http.OData.Builder.ActionLinkBuilder" />。</summary>
      <param name="model">包含实体集的 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</param>
      <param name="action">要为其生成操作链接的操作。</param>
      <param name="actionLinkBuilder">要设置的 <see cref="T:System.Web.Http.OData.Builder.ActionLinkBuilder" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmModelExtensions.SetEntitySetLinkBuilder(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntitySet,System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation)">
      <summary>设置为给定实体集生成自助链接和导航链接时要使用的 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" />。</summary>
      <param name="model">包含实体集的 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</param>
      <param name="entitySet">实体集。</param>
      <param name="entitySetLinkBuilder">要设置的 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.EdmStructuredObject">
      <summary>表示没有后备 CLR <see cref="T:System.Type" /> 的 <see cref="T:System.Web.Http.OData.IEdmStructuredObject" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.#ctor(Microsoft.Data.Edm.IEdmStructuredType)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.#ctor(Microsoft.Data.Edm.IEdmStructuredType,System.Boolean)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmStructuredTypeReference" />。</param>
      <param name="isNullable">如果此对象可为 null，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.#ctor(Microsoft.Data.Edm.IEdmStructuredTypeReference)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EdmStructuredObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 <see cref="T:Microsoft.Data.Edm.IEdmStructuredTypeReference" />。</param>
    </member>
    <member name="P:System.Web.Http.OData.EdmStructuredObject.ActualEdmType">
      <summary>获取或设置此对象的实体或复杂类型的实际 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.Clear"></member>
    <member name="P:System.Web.Http.OData.EdmStructuredObject.ExpectedEdmType">
      <summary>获取或设置此对象的实体或复杂类型的预期 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.GetChangedPropertyNames"></member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.GetEdmType"></member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.GetUnchangedPropertyNames"></member>
    <member name="P:System.Web.Http.OData.EdmStructuredObject.IsNullable">
      <summary>获取或设置 EDM 对象是否可为 null。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.TryGetPropertyType(System.String,System.Type@)"></member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.TryGetPropertyValue(System.String,System.Object@)"></member>
    <member name="M:System.Web.Http.OData.EdmStructuredObject.TrySetPropertyValue(System.String,System.Object)"></member>
    <member name="T:System.Web.Http.OData.EnableQueryAttribute">
      <summary>此类定义一个特性，可将该特性应用到某个操作，以启用使用 OData 查询语法的查询。若要避免处理意外查询或恶意查询，请使用 <see cref="T:System.Web.Http.OData.EnableQueryAttribute" /> 上的验证设置以验证传入查询。有关更多信息，请访问 http://go.microsoft.com/fwlink/?LinkId=279712。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EnableQueryAttribute.#ctor">
      <summary>使控制器操作可以支持 OData 查询参数。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.AllowedArithmeticOperators">
      <summary>获取或设置一个值，该值表示允许的算术运算符（包括“add”、“sub”、“mul”、“div”、“mod”）的列表。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.AllowedFunctions">
      <summary>获取或设置一个值，该值表示允许在 $filter 查询中使用的函数的列表。允许的函数包括以下各项：[list type="definition"] [item] [term]字符串相关[/term] [description]substringof、endswith、startswith、length、indexof、substring、tolower、toupper、trim、concat，例如~/Customers?$filter=length(CompanyName) eq 19[/description] [/item] [item] [term]日期时间相关[/term] [description]year、years、month、months、day、days、hour、hours、minute、minutes、second、seconds，例如~/Employees?$filter=year(BirthDate) eq 1971[/description] [/item] [item] [term]数学相关[/term] [description]round、floor、ceiling[/description] [/item] [item] [term]类型相关[/term] [description]isof、cast[/description] [/item] [item] [term]集合相关[/term] [description]any、all[/description] [/item] [/list]</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.AllowedLogicalOperators">
      <summary>获取或设置一个值，该值表示允许的逻辑运算符（例如“eq”、“ne”、“gt”、“ge”、“lt”、“le”、“and”、“or”、“not”）的列表。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.AllowedOrderByProperties">
      <summary>获取或设置一个字符串，该字符串包含属性名称的逗号分隔列表。只能按此列表中定义的那些属性对可查询结果进行排序。请注意，此字符串在默认情况下为 null，这意味着结果可按任何属性排序。例如，将此值设置为 null 或空字符串，表示允许按任意属性对可查询结果进行排序。将此值设置为“Name”表示，只允许按 Name 属性对可查询结果进行排序。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.AllowedQueryOptions">
      <summary>获取或设置允许在查询中使用的查询参数。默认值为所有查询选项，包括 $filter、$skip、$top、$orderby、$expand、$select、$inlineCount、$format 和 $skiptoken。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EnableQueryAttribute.ApplyQuery(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQueryOptions)">
      <summary>基于来自 uri 的传入查询和查询设置将查询应用到给定的 IQueryable。默认情况下，实现支持 $top、$skip、$orderby 和 $filter。重写此方法可以对查询执行其他查询撰写。</summary>
      <param name="queryable">来自响应消息的原始可查询实例。</param>
      <param name="queryOptions">基于传入请求构造的 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 实例。</param>
    </member>
    <member name="M:System.Web.Http.OData.EnableQueryAttribute.ApplyQuery(System.Object,System.Web.Http.OData.Query.ODataQueryOptions)">
      <summary>基于来自 uri 的传入查询和查询设置将查询应用到给定的实体。</summary>
      <returns>应用 $select 和 $expand 查询后生成的新实体。</returns>
      <param name="entity">来自响应消息的原始实体。</param>
      <param name="queryOptions">基于传入请求构造的 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 实例。</param>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.EnableConstantParameterization">
      <summary>获取或设置一个值，该值指示是否应对常量进行参数化。常量参数化可提升 Entity Framework 的性能。</summary>
      <returns>默认值为 true。</returns>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.EnsureStableOrdering">
      <summary>获取或设置一个值，该值指示查询撰写是否应在必要时更改原始查询，以确保稳定的排序顺序。</summary>
      <returns>true 值表示应在必要时修改原始查询，以保证稳定的排序顺序。false 值表示可以将排序顺序视为稳定，而无需修改查询。确保稳定排序顺序的查询提供程序应将此值设置为 false。默认值为 true。</returns>
    </member>
    <member name="M:System.Web.Http.OData.EnableQueryAttribute.GetModel(System.Type,System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>获取给定类型和请求的 EDM 模型。重写此方法可以自定义用于查询的 EDM 模型。</summary>
      <returns>给定类型和请求的 EDM 模型。</returns>
      <param name="elementClrType">要检索其模型的 CLR 类型。</param>
      <param name="request">要检索其模型的请求消息。</param>
      <param name="actionDescriptor">正在查询的操作的操作描述符。</param>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.HandleNullPropagation">
      <summary>获取或设置一个值，该值指示在查询撰写期间应如何处理 null 传播。</summary>
      <returns>默认值为 <see cref="F:System.Web.Http.OData.Query.HandleNullPropagationOption.Default" />。</returns>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.MaxAnyAllExpressionDepth">
      <summary>获取或设置嵌套在查询内部的 Any 或 All 元素的最大深度。此限制有助于防止拒绝服务攻击。默认值为 1。</summary>
      <returns>嵌套在查询内部的 Any 或 All 元素的最大深度。</returns>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.MaxExpansionDepth">
      <summary>获取或设置 $expand 查询选项的最大展开深度。要禁用最大展开深度检查，请将此属性设置为 0。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.MaxNodeCount">
      <summary>获取或设置 $filter 语法树中的最大节点数。默认值为 100。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.MaxOrderByNodeCount">
      <summary>获取或设置可按 $orderby 显示的最大表达式数。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.MaxSkip">
      <summary>获取或设置客户端可以请求的最大 $skip 值。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.MaxTop">
      <summary>获取或设置客户端可以请求的最大 $top 值。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EnableQueryAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>在执行操作后执行查询撰写。它首先会尝试从返回的响应消息中检索 IQueryable。然后，基于 <see cref="T:System.Web.Http.OData.EnableQueryAttribute" /> 上的验证设置，从 URI 验证查询。最后，将适当地应用查询，并在响应消息中重置查询。</summary>
      <param name="actionExecutedContext">与此操作相关的上下文，包括响应消息、请求消息和 HttpConfiguration 等。</param>
    </member>
    <member name="P:System.Web.Http.OData.EnableQueryAttribute.PageSize">
      <summary>获取或设置要发回到客户端的最大查询结果数。</summary>
      <returns>要发回到客户端的最大查询结果数。</returns>
    </member>
    <member name="M:System.Web.Http.OData.EnableQueryAttribute.ValidateQuery(System.Net.Http.HttpRequestMessage,System.Web.Http.OData.Query.ODataQueryOptions)">
      <summary>验证传入请求中的 OData 查询。默认情况下，如果查询中包含不支持的查询参数，实现将会引发异常。重写此方法可以对查询进行其他验证。</summary>
      <param name="request">传入的请求。</param>
      <param name="queryOptions">基于传入请求构造的 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 实例。</param>
    </member>
    <member name="T:System.Web.Http.OData.EntityInstanceContext">
      <summary>
        <see cref="T:System.Web.Http.OData.EntityInstanceContext`1" /> 的实例将被传递到自助链接（<see cref="M:EntitySetConfiguration.HasIdLink" />、<see cref="M:EntitySetConfiguration.HasEditLink" />、<see cref="M:EntitySetConfiguration.HasReadLink" />）和导航链接（<see cref="M:EntitySetConfiguration.HasNavigationPropertyLink" />、<see cref="M:EntitySetConfiguration.HasNavigationPropertiesLink" />）生成器，并可供链接生成器用来生成链接。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EntityInstanceContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EntityInstanceContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EntityInstanceContext.#ctor(System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext,Microsoft.Data.Edm.IEdmEntityTypeReference,System.Object)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EntityInstanceContext" /> 类的新实例。</summary>
      <param name="serializerContext">后备 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext" />。</param>
      <param name="entityType">此实例上下文的 EDM 实体类型。</param>
      <param name="entityInstance">表示此上下文的实例的对象。</param>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EdmModel">
      <summary>获取或设置此实例所属的 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EdmObject">
      <summary>获取或设置支持此实例的 <see cref="T:System.Web.Http.OData.IEdmEntityObject" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EntityInstance">
      <summary>获取或设置此实体实例的值。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EntitySet">
      <summary>获取或设置此实例所属的 <see cref="T:Microsoft.Data.Edm.IEdmEntitySet" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.EntityType">
      <summary>获取或设置此实体实例的 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.Request">
      <summary>获取或设置导致生成此实例的 HTTP 请求。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.SerializerContext">
      <summary>获取或设置 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.SkipExpensiveAvailabilityChecks">
      <summary>获取或设置一个值，该值指示是否应执行 ActionAvailabilityChecks。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext.Url">
      <summary>获取或设置可用于在序列化此实体实例时生成链接的 <see cref="T:System.Web.Http.Routing.UrlHelper" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.EntityInstanceContext`1">
      <summary>
        <see cref="T:System.Web.Http.OData.EntityInstanceContext`1" /> 的实例将被传递到自助链接（<see cref="M:EntitySetConfiguration.HasIdLink" />、<see cref="M:EntitySetConfiguration.HasEditLink" />、<see cref="M:EntitySetConfiguration.HasReadLink" />）和导航链接（<see cref="M:EntitySetConfiguration.HasNavigationPropertyLink" />、<see cref="M:EntitySetConfiguration.HasNavigationPropertiesLink" />）生成器，并可供链接生成器用来生成链接。</summary>
      <typeparam name="TEntityType">实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.EntityInstanceContext`1.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.EntityInstanceContext`1" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Web.Http.OData.EntityInstanceContext`1.EntityInstance">
      <summary>获取或设置实体实例。</summary>
    </member>
    <member name="T:System.Web.Http.OData.EntitySetController`2">
      <summary>为公开 OData 实体集的控制器提供一个方便的起点。这是 <see cref="T:System.Web.Http.OData.AsyncEntitySetController`2" /> 的同步版本。</summary>
      <typeparam name="TEntity">与所公开实体集的实体类型关联的类型。</typeparam>
      <typeparam name="TKey">与所公开实体集实体类型的实体键关联的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.#ctor"></member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.CreateEntity(`0)">
      <summary>应重写此方法，以在实体集中创建新实体。</summary>
      <returns>创建的实体。</returns>
      <param name="entity">要添加到实体集的实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.CreateLink(`1,System.String,System.Uri)">
      <summary>应重写此方法，以处理尝试在两个实体之间创建链接的 POST 和 PUT 请求。</summary>
      <param name="key">具有导航属性的实体的键。</param>
      <param name="navigationProperty">导航属性的名称。</param>
      <param name="link">要链接的实体的 URI。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Delete(`1)">
      <summary>应重写此方法，以处理用于从实体集中删除现有实体的 DELETE 请求。</summary>
      <param name="key">要删除的实体的实体键。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.DeleteLink(`1,System.String,System.String)">
      <summary>应重写此方法，以处理尝试破坏两个实体之间的关系的 DELETE 请求。</summary>
      <param name="key">具有导航属性的实体的键。</param>
      <param name="relatedKey">相关实体的键。</param>
      <param name="navigationProperty">导航属性的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.DeleteLink(`1,System.String,System.Uri)">
      <summary>应重写此方法，以处理尝试破坏两个实体之间的关系的 DELETE 请求。</summary>
      <param name="key">具有导航属性的实体的键。</param>
      <param name="navigationProperty">导航属性的名称。</param>
      <param name="link">要从导航属性中删除的实体的 URI。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Get">
      <summary>应重写此方法，以处理尝试从实体集中检索实体的 GET 请求。</summary>
      <returns>实体集中的匹配实体。</returns>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Get(`1)">
      <summary>处理尝试从实体集中根据键检索单个实体的 GET 请求。</summary>
      <returns>要发回到客户端的响应消息。</returns>
      <param name="key">要检索的实体的实体键。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.GetEntityByKey(`1)">
      <summary>应重写此方法，以从实体集中根据键检索实体。</summary>
      <returns>检索到的实体；如果在实体集中找不到具有指定实体键的实体，则为 null。</returns>
      <param name="key">要检索的实体的实体键。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.GetKey(`0)">
      <summary>应重写此方法，以获取指定实体的实体键。</summary>
      <returns>实体键值</returns>
      <param name="entity">实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.HandleUnmappedRequest(System.Web.Http.OData.Routing.ODataPath)">
      <summary>应重写此方法，以处理所有未映射的 OData 请求。</summary>
      <returns>要发回到客户端的响应消息。</returns>
      <param name="odataPath">请求的 OData 路径。</param>
    </member>
    <member name="P:System.Web.Http.OData.EntitySetController`2.ODataPath">
      <summary>获取当前请求的 OData 路径。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Patch(`1,System.Web.Http.OData.Delta{`0})">
      <summary>处理 PATCH 和 MERGE 请求，以部分更新实体集中的单个实体。</summary>
      <returns>要发回到客户端的响应消息。</returns>
      <param name="key">要更新的实体的实体键。</param>
      <param name="patch">表示部分更新的修补程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.PatchEntity(`1,System.Web.Http.OData.Delta{`0})">
      <summary>应重写此方法，以将部分更新应用到实体集中的现有实体。</summary>
      <returns>更新的实体。</returns>
      <param name="key">要更新的实体的实体键。</param>
      <param name="patch">表示部分更新的修补程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Post(`0)">
      <summary>处理用于在实体集中创建新实体的 POST 请求。</summary>
      <returns>要发回到客户端的响应消息。</returns>
      <param name="entity">要插入到实体集中的实体。</param>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.Put(`1,`0)">
      <summary>处理尝试替换实体集中的单个实体的 PUT 请求。</summary>
      <returns>要发回到客户端的响应消息。</returns>
      <param name="key">要替换的实体的实体键。</param>
      <param name="update">更新的实体。</param>
    </member>
    <member name="P:System.Web.Http.OData.EntitySetController`2.QueryOptions">
      <summary>获取当前请求的 OData 查询选项。</summary>
    </member>
    <member name="M:System.Web.Http.OData.EntitySetController`2.UpdateEntity(`1,`0)">
      <summary>应重写此方法，以更新实体集中的现有实体。</summary>
      <returns>更新的实体。</returns>
      <param name="key">要更新的实体的实体键。</param>
      <param name="update">更新的实体。</param>
    </member>
    <member name="T:System.Web.Http.OData.FeedContext">
      <summary>包含有关当前序列化的源的上下文信息。</summary>
    </member>
    <member name="M:System.Web.Http.OData.FeedContext.#ctor"></member>
    <member name="P:System.Web.Http.OData.FeedContext.EntitySet">
      <summary>获取此实例所属的 <see cref="T:Microsoft.Data.Edm.IEdmEntitySet" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.FeedContext.FeedInstance">
      <summary>获取此源实例的值。</summary>
    </member>
    <member name="P:System.Web.Http.OData.FeedContext.Request">
      <summary>获取或设置导致生成此实例的 HTTP 请求。</summary>
    </member>
    <member name="P:System.Web.Http.OData.FeedContext.RequestContext">
      <summary>获取或设置请求上下文。</summary>
    </member>
    <member name="P:System.Web.Http.OData.FeedContext.Url">
      <summary>获取或设置要用于在序列化此源实例时生成链接的 <see cref="T:System.Web.Http.Routing.UrlHelper" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.FromODataUriAttribute">
      <summary>
        <see cref="T:System.Web.Http.ParameterBindingAttribute" /> 的实现，它可以使用 OData 约定绑定 URI 参数。</summary>
    </member>
    <member name="M:System.Web.Http.OData.FromODataUriAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.FromODataUriAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>获取参数绑定。</summary>
      <returns>包含绑定的 <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />。</returns>
      <param name="parameter">要绑定的参数。</param>
    </member>
    <member name="T:System.Web.Http.OData.IDelta">
      <summary>
        <see cref="T:System.Web.Http.OData.IDelta" /> 允许更改对象并跟踪所做的更改。</summary>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.Clear">
      <summary>清除 <see cref="T:System.Web.Http.OData.IDelta" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.GetChangedPropertyNames">
      <summary>返回已通过此 IDelta 修改为属性名称可枚举值的属性</summary>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.GetUnchangedPropertyNames">
      <summary>返回尚未通过此 IDelta 修改为属性名称可枚举值的属性</summary>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.TryGetPropertyType(System.String,System.Type@)">
      <summary>尝试从基础实体获取名为 <paramref name="name" /> 的属性的 <see cref="T:System.Type" />。</summary>
      <returns>如果找到了该属性，则返回 true；否则返回 false。</returns>
      <param name="name">属性的名称</param>
      <param name="type">属性的类型</param>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.TryGetPropertyValue(System.String,System.Object@)">
      <summary>尝试从基础实体获取名为 <paramref name="name" /> 的属性的值。</summary>
      <returns>如果找到了该属性，则返回 true；否则返回 false。</returns>
      <param name="name">属性的名称</param>
      <param name="value">属性的值</param>
    </member>
    <member name="M:System.Web.Http.OData.IDelta.TrySetPropertyValue(System.String,System.Object)">
      <summary>尝试将名为 <paramref name="name" /> 的属性设置为指定的 <paramref name="value" />。</summary>
      <returns>如果成功，则返回 true；否则返回 false。</returns>
      <param name="name">属性的名称</param>
      <param name="value">属性的新值</param>
    </member>
    <member name="T:System.Web.Http.OData.IEdmComplexObject">
      <summary>表示 <see cref="T:Microsoft.Data.Edm.IEdmComplexType" /> 的实例。</summary>
    </member>
    <member name="T:System.Web.Http.OData.IEdmEntityObject">
      <summary>表示 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" /> 的实例。</summary>
    </member>
    <member name="T:System.Web.Http.OData.IEdmObject">
      <summary>表示 <see cref="T:Microsoft.Data.Edm.IEdmType" /> 的实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.IEdmObject.GetEdmType">
      <summary>获取此实例的 <see cref="T:Microsoft.Data.Edm.IEdmTypeReference" />。</summary>
      <returns>此实例的 <see cref="T:Microsoft.Data.Edm.IEdmTypeReference" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.IEdmStructuredObject">
      <summary>表示 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" /> 的实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.IEdmStructuredObject.TryGetPropertyValue(System.String,System.Object@)">
      <summary>获取具有给定名称的属性的值。</summary>
      <returns>如果实例包含具有给定名称的属性，则为 <see cref="true" />；否则为 <see cref="false" />。</returns>
      <param name="propertyName">要获取的属性的名称。</param>
      <param name="value">如果找到具有给定名称的属性，此方法返回时将包含该属性的值；否则将返回 <see cref="null" />。该参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Web.Http.OData.NullEdmComplexObject">
      <summary>表示 <see cref="T:System.Web.Http.OData.IEdmComplexObject" />，其值为 null。</summary>
    </member>
    <member name="M:System.Web.Http.OData.NullEdmComplexObject.#ctor(Microsoft.Data.Edm.IEdmComplexTypeReference)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.NullEdmComplexObject" /> 类的新实例。</summary>
      <param name="edmType">此对象的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.NullEdmComplexObject.GetEdmType"></member>
    <member name="M:System.Web.Http.OData.NullEdmComplexObject.TryGetPropertyValue(System.String,System.Object@)"></member>
    <member name="T:System.Web.Http.OData.ODataActionParameters">
      <summary>ActionPayload 保留客户端在 POST 请求中提供的参数名称和值，以调用特定的操作。参数值存储在使用参数名称键控的字典中。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataActionParameters.#ctor"></member>
    <member name="T:System.Web.Http.OData.ODataController">
      <summary>为支持使用 OData 格式读取和写入数据的 OData 控制器定义基类。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataController.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataController.Created``1(``0)">
      <summary>使用指定值创建操作结果，该结果是对具有实体到实体设置的 POST 操作的响应。</summary>
      <returns>包含指定值的 <see cref="T:System.Web.Http.OData.Results.CreatedODataResult`1" />。</returns>
      <param name="entity">创建的实体。</param>
      <typeparam name="TEntity">创建的实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.ODataController.Updated``1(``0)">
      <summary>使用指定值创建操作结果，该结果是对 OData 实体中 PUT、PATCH 或 MERGE 操作的响应。</summary>
      <returns>包含指定值的 <see cref="T:System.Web.Http.OData.Results.UpdatedODataResult`1" />。</returns>
      <param name="entity">更新的实体。</param>
      <typeparam name="TEntity">更新的实体类型。</typeparam>
    </member>
    <member name="T:System.Web.Http.OData.ODataFormattingAttribute">
      <summary>一个要放置在控制器上的特性，用于启用 OData 格式化程序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataFormattingAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataFormattingAttribute.CreateODataFormatters">
      <summary>创建 OData 格式化程序。</summary>
      <returns>OData 格式化程序的集合。</returns>
    </member>
    <member name="M:System.Web.Http.OData.ODataFormattingAttribute.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>为设置此 controllerDescriptor 的按控制器重写而调用的回调。</summary>
      <param name="controllerSettings">要初始化的控制器设置。</param>
      <param name="controllerDescriptor">控制器描述符。请注意，<see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 可以与派生的控制器类型相关联（假定 <see cref="T:System.Web.Http.Controllers.IControllerConfiguration" /> 是继承的）。</param>
    </member>
    <member name="T:System.Web.Http.OData.ODataMetadataController">
      <summary>表示用于生成 OData servicedoc 和元数据文档 ($metadata) 的 <see cref="T:System.Web.Http.ApiController" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataMetadataController.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataMetadataController.GetMetadata">
      <summary>生成 OData $metadata 文档。</summary>
      <returns>表示 $metadata 的 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.ODataMetadataController.GetServiceDocument">
      <summary>生成 OData 服务文档。</summary>
      <returns>服务的服务文档。</returns>
    </member>
    <member name="T:System.Web.Http.OData.ODataNullValueAttribute">
      <summary>表示 <see cref="IActionFilter" />，它将 OData $value 响应中的 null 值转换为 HTTP 404 响应。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataNullValueAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataNullValueAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)"></member>
    <member name="T:System.Web.Http.OData.ODataQueryContext">
      <summary>此项定义用于执行查询撰写的某些上下文信息。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataQueryContext.#ctor(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmType)">
      <summary>使用 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和元素 CLR 类型构造 <see cref="T:System.Web.Http.OData.ODataQueryContext" /> 的实例。</summary>
      <param name="model">给定 EDM 类型所属的 EDM 模型。</param>
      <param name="elementType">正在查询的集合元素的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.ODataQueryContext.#ctor(Microsoft.Data.Edm.IEdmModel,System.Type)">
      <summary>使用 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和元素 CLR 类型构造 <see cref="T:System.Web.Http.OData.ODataQueryContext" /> 的实例。</summary>
      <param name="model">EdmModel，包含与给定的 <paramref name="elementClrType" /> 对应的 <see cref="T:Microsoft.Data.Edm.IEdmType" />。</param>
      <param name="elementClrType">正在查询的集合元素的 CLR 类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.ODataQueryContext.ElementClrType">
      <summary>获取元素的 CLR 类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.ODataQueryContext.ElementType">
      <summary>获取元素的 <see cref="T:Microsoft.Data.Edm.IEdmType" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.ODataQueryContext.Model">
      <summary>获取包含 EntitySet 的给定 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.ODataQueryParameterBindingAttribute">
      <summary>一个 <see cref="T:System.Web.Http.ParameterBindingAttribute" />，用于将传入请求中类型为 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 的参数绑定到 OData 查询。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataQueryParameterBindingAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataQueryParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)"></member>
    <member name="T:System.Web.Http.OData.ODataRoutingAttribute">
      <summary>定义一个控制器级别的特性，可以使用该特性基于路由约定启用 OData 操作选择。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataRoutingAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.ODataRoutingAttribute.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>为设置此 controllerDescriptor 的按控制器重写而调用的回调。</summary>
      <param name="controllerSettings">要初始化的控制器设置。</param>
      <param name="controllerDescriptor">控制器描述符。请注意，<see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 可以与派生的控制器类型相关联（假定 <see cref="T:System.Web.Http.Controllers.IControllerConfiguration" /> 是继承的）。</param>
    </member>
    <member name="T:System.Web.Http.OData.ODataUntypedActionParameters">
      <summary>ActionPayload 保留客户端在 POST 请求中提供的参数名称和值，以调用特定的操作。参数值存储在使用参数名称键控的字典中。</summary>
    </member>
    <member name="M:System.Web.Http.OData.ODataUntypedActionParameters.#ctor(Microsoft.Data.Edm.IEdmFunctionImport)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.ODataUntypedActionParameters" /> 类的新实例。</summary>
      <param name="action">此参数的 OData 操作。</param>
    </member>
    <member name="P:System.Web.Http.OData.ODataUntypedActionParameters.Action">
      <summary>获取此参数的 OData 操作。</summary>
    </member>
    <member name="T:System.Web.Http.OData.PageResult">
      <summary>表示包含 OData 格式支持的附加信息的实体源。</summary>
    </member>
    <member name="M:System.Web.Http.OData.PageResult.#ctor(System.Uri,System.Nullable{System.Int64})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.PageResult" /> 类的新实例。</summary>
      <param name="nextPageLink">源中项的下一页面的链接。</param>
      <param name="count">源中项的总计数。</param>
    </member>
    <member name="P:System.Web.Http.OData.PageResult.Count">
      <summary>获取源中项的总计数。</summary>
    </member>
    <member name="P:System.Web.Http.OData.PageResult.NextPageLink">
      <summary>获取源中项的下一页面的链接。</summary>
    </member>
    <member name="T:System.Web.Http.OData.PageResult`1">
      <summary>表示包含 OData 格式支持的附加信息的实体源。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.PageResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Uri,System.Nullable{System.Int64})">
      <summary>创建部分结果集 - 当启用服务器驱动的分页时使用。</summary>
      <param name="items">应在此页中序列化的匹配结果的子集。</param>
      <param name="nextPageLink">指向下一页匹配结果的链接（如果存在更多结果）。</param>
      <param name="count">匹配结果的总计数，使客户端能够知道服务器上的匹配项数。</param>
    </member>
    <member name="M:System.Web.Http.OData.PageResult`1.GetEnumerator">
      <summary>返回循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="P:System.Web.Http.OData.PageResult`1.Items">
      <summary>获取此源的实体的集合。</summary>
    </member>
    <member name="M:System.Web.Http.OData.PageResult`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.Web.Http.OData.TypedDelta">
      <summary>表示 <see cref="T:System.Web.Http.OData.Delta" />，可以用于实体类型存在后备 CLR 类型且其更改可以进行跟踪的情形。</summary>
    </member>
    <member name="M:System.Web.Http.OData.TypedDelta.#ctor"></member>
    <member name="P:System.Web.Http.OData.TypedDelta.EntityType">
      <summary>获取跟踪其更改的实体的实际类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.TypedDelta.ExpectedClrType">
      <summary>获取跟踪其更改的实体的预期类型。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Batch.ChangeSetRequestItem">
      <summary>表示 ChangeSet 请求。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ChangeSetRequestItem.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.HttpRequestMessage})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.ChangeSetRequestItem" /> 类的新实例。</summary>
      <param name="requests">ChangeSet 中的请求消息。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ChangeSetRequestItem.Dispose(System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Batch.ChangeSetRequestItem.GetResourcesForDisposal">
      <summary>获取 ChangeSet 的每个请求消息中已进行释放注册的资源。</summary>
      <returns>已进行释放注册的资源集合。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Batch.ChangeSetRequestItem.Requests">
      <summary>获取 ChangeSet 中的请求消息。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ChangeSetRequestItem.SendRequestAsync(System.Net.Http.HttpMessageInvoker,System.Threading.CancellationToken)">
      <summary>发送 ChangeSet 请求。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Batch.ChangeSetResponseItem" />。</returns>
      <param name="invoker">调用程序。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.ChangeSetResponseItem">
      <summary>表示 ChangeSet 响应。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ChangeSetResponseItem.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.HttpResponseMessage})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.ChangeSetResponseItem" /> 类的新实例。</summary>
      <param name="responses">ChangeSet 请求的响应消息。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ChangeSetResponseItem.Dispose(System.Boolean)"></member>
    <member name="P:System.Web.Http.OData.Batch.ChangeSetResponseItem.Responses">
      <summary>获取 ChangeSet 的响应消息。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ChangeSetResponseItem.WriteResponseAsync(Microsoft.Data.OData.ODataBatchWriter,System.Threading.CancellationToken)">
      <summary>以 ChangeSet 形式写入响应。</summary>
      <param name="writer">
        <see cref="T:Microsoft.Data.OData.ODataBatchWriter" />。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.DefaultODataBatchHandler">
      <summary>用于处理 OData 批请求的默认 <see cref="T:System.Web.Http.OData.Batch.ODataBatchHandler" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.DefaultODataBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.DefaultODataBatchHandler" /> 类的新实例。</summary>
      <param name="httpServer">用于处理单个批请求的 <see cref="T:System.Web.Http.HttpServer" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.DefaultODataBatchHandler.CreateResponseMessageAsync(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Batch.ODataBatchResponseItem},System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>创建批响应消息。</summary>
      <returns>批响应消息。</returns>
      <param name="responses">批请求的响应。</param>
      <param name="request">包含所有批请求的原始请求。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.DefaultODataBatchHandler.ExecuteRequestMessagesAsync(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Batch.ODataBatchRequestItem},System.Threading.CancellationToken)">
      <summary>执行 OData 批请求。</summary>
      <returns>批请求的 <see cref="T:System.Web.Http.OData.Batch.ODataBatchResponseItem" /> 集合。</returns>
      <param name="requests">OData 批请求的集合。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.DefaultODataBatchHandler.GetBaseUri(System.Net.Http.HttpRequestMessage)">
      <summary>获取批请求的基 URI。</summary>
      <returns>基 URI。</returns>
      <param name="request">包含所有批请求的原始请求。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.DefaultODataBatchHandler.ParseBatchRequestsAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>将传入的 OData 批请求转换为请求消息的集合。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Batch.ODataBatchRequestItem" /> 的集合。</returns>
      <param name="request">包含批请求消息的请求。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.DefaultODataBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.OData.Batch.DefaultODataBatchHandler.ValidateRequest(System.Net.Http.HttpRequestMessage)">
      <summary>验证传入请求是否包含批请求消息。</summary>
      <param name="request">包含批请求消息的请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.ODataBatchContent">
      <summary>封装 OData 批响应的集合。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchContent.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Batch.ODataBatchResponseItem})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.ODataBatchContent" /> 类的新实例。</summary>
      <param name="responses">批响应。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchContent.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Batch.ODataBatchResponseItem},Microsoft.Data.OData.ODataMessageWriterSettings)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.ODataBatchContent" /> 类的新实例。</summary>
      <param name="responses">批响应。</param>
      <param name="writerSettings">
        <see cref="T:Microsoft.Data.OData.ODataMessageWriterSettings" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchContent.Dispose(System.Boolean)"></member>
    <member name="P:System.Web.Http.OData.Batch.ODataBatchContent.Responses">
      <summary>获取批响应。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)"></member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchContent.TryComputeLength(System.Int64@)"></member>
    <member name="T:System.Web.Http.OData.Batch.ODataBatchHandler">
      <summary>定义用于处理 OData 批请求的抽象。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.ODataBatchHandler" /> 类的新实例。</summary>
      <param name="httpServer">用于处理单个批请求的 <see cref="T:System.Web.Http.HttpServer" />。</param>
    </member>
    <member name="P:System.Web.Http.OData.Batch.ODataBatchHandler.MessageQuotas">
      <summary>获取用于读取/写入批请求/响应的 <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Batch.ODataBatchHandler.ODataRouteName">
      <summary>获取或设置与此批处理程序关联的 OData 路由的名称。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Batch.ODataBatchHttpRequestMessageExtensions">
      <summary>为 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchHttpRequestMessageExtensions.GetODataBatchId(System.Net.Http.HttpRequestMessage)">
      <summary>检索与请求关联的批 ID。</summary>
      <returns>与此请求关联的批 ID，如果没有此类 ID，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchHttpRequestMessageExtensions.GetODataChangeSetId(System.Net.Http.HttpRequestMessage)">
      <summary>检索与请求关联的 ChangeSet ID。</summary>
      <returns>与此请求关联的 ChangeSet ID，如果没有此类 ID，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchHttpRequestMessageExtensions.GetODataContentIdMapping(System.Net.Http.HttpRequestMessage)">
      <summary>检索与请求关联的内容 ID 到位置的映射。</summary>
      <returns>与此请求关联的内容 ID 到位置的映射，如果没有此类映射，则为 null。</returns>
      <param name="request">请求。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchHttpRequestMessageExtensions.SetODataBatchId(System.Net.Http.HttpRequestMessage,System.Guid)">
      <summary>将给定的批 ID 与请求关联。</summary>
      <param name="request">请求。</param>
      <param name="batchId">批 ID。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchHttpRequestMessageExtensions.SetODataChangeSetId(System.Net.Http.HttpRequestMessage,System.Guid)">
      <summary>将给定的 ChangeSet ID 与请求关联。</summary>
      <param name="request">请求。</param>
      <param name="changeSetId">ChangeSet ID。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchHttpRequestMessageExtensions.SetODataContentIdMapping(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>将给定的内容 ID 到位置映射与请求关联。</summary>
      <param name="request">请求。</param>
      <param name="contentIdMapping">内容 ID 到位置的映射。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.ODataBatchReaderExtensions">
      <summary>为 <see cref="T:Microsoft.Data.OData.ODataBatchReader" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchReaderExtensions.ReadChangeSetOperationRequestAsync(Microsoft.Data.OData.ODataBatchReader,System.Guid,System.Guid,System.Boolean)">
      <summary>读取 ChangeSet 中的操作请求。</summary>
      <returns>表示 ChangeSet 操作的 <see cref="T:System.Net.Http.HttpRequestMessage" />。</returns>
      <param name="reader">
        <see cref="T:Microsoft.Data.OData.ODataBatchReader" />。</param>
      <param name="batchId">批 ID。</param>
      <param name="changeSetId">ChangeSet ID。</param>
      <param name="bufferContentStream">如果设置为 true，则会缓冲请求内容流。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchReaderExtensions.ReadChangeSetOperationRequestAsync(Microsoft.Data.OData.ODataBatchReader,System.Guid,System.Guid,System.Boolean,System.Threading.CancellationToken)">
      <summary>读取 ChangeSet 中的操作请求。</summary>
      <returns>表示 ChangeSet 操作的 <see cref="T:System.Net.Http.HttpRequestMessage" />。</returns>
      <param name="reader">
        <see cref="T:Microsoft.Data.OData.ODataBatchReader" />。</param>
      <param name="batchId">批 ID。</param>
      <param name="changeSetId">ChangeSet ID。</param>
      <param name="bufferContentStream">如果设置为 true，则会缓冲请求内容流。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchReaderExtensions.ReadChangeSetRequestAsync(Microsoft.Data.OData.ODataBatchReader,System.Guid)">
      <summary>读取 ChangeSet 请求。</summary>
      <returns>ChangeSet 中的 <see cref="T:System.Net.Http.HttpRequestMessage" /> 集合。</returns>
      <param name="reader">
        <see cref="T:Microsoft.Data.OData.ODataBatchReader" />。</param>
      <param name="batchId">批 ID。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchReaderExtensions.ReadChangeSetRequestAsync(Microsoft.Data.OData.ODataBatchReader,System.Guid,System.Threading.CancellationToken)">
      <summary>读取 ChangeSet 请求。</summary>
      <returns>ChangeSet 中的 <see cref="T:System.Net.Http.HttpRequestMessage" /> 集合。</returns>
      <param name="reader">
        <see cref="T:Microsoft.Data.OData.ODataBatchReader" />。</param>
      <param name="batchId">批 ID。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchReaderExtensions.ReadOperationRequestAsync(Microsoft.Data.OData.ODataBatchReader,System.Guid,System.Boolean)">
      <summary>读取操作请求。</summary>
      <returns>表示操作的 <see cref="T:System.Net.Http.HttpRequestMessage" />。</returns>
      <param name="reader">
        <see cref="T:Microsoft.Data.OData.ODataBatchReader" />。</param>
      <param name="batchId">批 ID。</param>
      <param name="bufferContentStream">如果设置为 true，则会缓冲请求内容流。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchReaderExtensions.ReadOperationRequestAsync(Microsoft.Data.OData.ODataBatchReader,System.Guid,System.Boolean,System.Threading.CancellationToken)">
      <summary>读取操作请求。</summary>
      <returns>表示操作的 <see cref="T:System.Net.Http.HttpRequestMessage" />。</returns>
      <param name="reader">
        <see cref="T:Microsoft.Data.OData.ODataBatchReader" />。</param>
      <param name="batchId">批 ID。</param>
      <param name="bufferContentStream">如果设置为 true，则会缓冲请求内容流。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.ODataBatchRequestItem">
      <summary>表示 OData 批请求。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchRequestItem.#ctor"></member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchRequestItem.Dispose"></member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchRequestItem.Dispose(System.Boolean)">
      <summary>释放非托管资源，并有选择性地释放托管资源。</summary>
      <param name="disposing">若为 true，则同时释放托管资源和非托管资源；若为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchRequestItem.GetResourcesForDisposal">
      <summary>获取要释放的资源。</summary>
      <returns>要释放的资源集合。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchRequestItem.SendMessageAsync(System.Net.Http.HttpMessageInvoker,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>发送单个 OData 批请求。</summary>
      <param name="invoker">调用程序。</param>
      <param name="request">请求。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
      <param name="contentIdToLocationMapping">内容 ID 到位置的映射。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchRequestItem.SendRequestAsync(System.Net.Http.HttpMessageInvoker,System.Threading.CancellationToken)">
      <summary>发送请求。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Batch.ODataBatchResponseItem" />。</returns>
      <param name="invoker">调用程序。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.ODataBatchResponseItem">
      <summary>表示 OData 批响应。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchResponseItem.#ctor"></member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchResponseItem.Dispose"></member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchResponseItem.Dispose(System.Boolean)">
      <summary>释放非托管资源，并有选择性地释放托管资源。</summary>
      <param name="disposing">若为 true，则同时释放托管资源和非托管资源；若为 false，则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchResponseItem.WriteMessageAsync(Microsoft.Data.OData.ODataBatchWriter,System.Net.Http.HttpResponseMessage)">
      <summary>写入单个 OData 批响应。</summary>
      <returns>表示使用给定编写器写入给定批响应的任务对象。</returns>
      <param name="writer">
        <see cref="T:Microsoft.Data.OData.ODataBatchWriter" />。</param>
      <param name="response">响应消息。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchResponseItem.WriteMessageAsync(Microsoft.Data.OData.ODataBatchWriter,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
      <summary>写入单个 OData 批响应。</summary>
      <returns>表示使用给定编写器写入给定批响应的任务对象。</returns>
      <param name="writer">
        <see cref="T:Microsoft.Data.OData.ODataBatchWriter" />。</param>
      <param name="response">响应消息。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataBatchResponseItem.WriteResponseAsync(Microsoft.Data.OData.ODataBatchWriter,System.Threading.CancellationToken)">
      <summary>写入响应。</summary>
      <param name="writer">
        <see cref="T:Microsoft.Data.OData.ODataBatchWriter" />。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.ODataHttpContentExtensions">
      <summary>为 <see cref="T:System.Net.Http.HttpContent" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataHttpContentExtensions.GetODataMessageReaderAsync(System.Net.Http.HttpContent,Microsoft.Data.OData.ODataMessageReaderSettings)">
      <summary>获取 <see cref="T:System.Net.Http.HttpContent" /> 流的 <see cref="T:Microsoft.Data.OData.ODataMessageReader" />。</summary>
      <returns>完成时生成 <see cref="T:Microsoft.Data.OData.ODataMessageReader" /> 的任务对象。</returns>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />。</param>
      <param name="settings">
        <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.ODataHttpContentExtensions.GetODataMessageReaderAsync(System.Net.Http.HttpContent,Microsoft.Data.OData.ODataMessageReaderSettings,System.Threading.CancellationToken)">
      <summary>获取 <see cref="T:System.Net.Http.HttpContent" /> 流的 <see cref="T:Microsoft.Data.OData.ODataMessageReader" />。</summary>
      <returns>完成时生成 <see cref="T:Microsoft.Data.OData.ODataMessageReader" /> 的任务对象。</returns>
      <param name="content">
        <see cref="T:System.Net.Http.HttpContent" />。</param>
      <param name="settings">
        <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings" />。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.OperationRequestItem">
      <summary>表示操作请求。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.OperationRequestItem.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.OperationRequestItem" /> 类的新实例。</summary>
      <param name="request">操作请求。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.OperationRequestItem.Dispose(System.Boolean)"></member>
    <member name="M:System.Web.Http.OData.Batch.OperationRequestItem.GetResourcesForDisposal">
      <summary>获取操作请求消息中已进行释放注册的资源。</summary>
      <returns>已进行释放注册的资源集合。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Batch.OperationRequestItem.Request">
      <summary>获取操作请求。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.OperationRequestItem.SendRequestAsync(System.Net.Http.HttpMessageInvoker,System.Threading.CancellationToken)">
      <summary>发送操作请求。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Batch.OperationResponseItem" />。</returns>
      <param name="invoker">调用程序。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.OperationResponseItem">
      <summary>表示操作响应。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.OperationResponseItem.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.OperationResponseItem" /> 类的新实例。</summary>
      <param name="response">操作请求的响应消息。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.OperationResponseItem.Dispose(System.Boolean)"></member>
    <member name="P:System.Web.Http.OData.Batch.OperationResponseItem.Response">
      <summary>获取操作的响应消息。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.OperationResponseItem.WriteResponseAsync(Microsoft.Data.OData.ODataBatchWriter,System.Threading.CancellationToken)">
      <summary>以操作形式写入响应。</summary>
      <param name="writer">
        <see cref="T:Microsoft.Data.OData.ODataBatchWriter" />。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="T:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler">
      <summary>不将请求内容流放在缓冲区内的 <see cref="T:System.Web.Http.OData.Batch.ODataBatchHandler" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler" /> 类的新实例。</summary>
      <param name="httpServer">用于处理单个批请求的 <see cref="T:System.Web.Http.HttpServer" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler.CreateResponseMessageAsync(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Batch.ODataBatchResponseItem},System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>创建批响应消息。</summary>
      <returns>批响应消息。</returns>
      <param name="responses">批请求的响应。</param>
      <param name="request">包含所有批请求的原始请求。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler.ExecuteChangeSetAsync(Microsoft.Data.OData.ODataBatchReader,System.Guid,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>执行 ChangeSet。</summary>
      <returns>ChangeSet 响应。</returns>
      <param name="batchReader">批读取器。</param>
      <param name="batchId">批 ID。</param>
      <param name="originalRequest">包含所有批请求的原始请求。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler.ExecuteOperationAsync(Microsoft.Data.OData.ODataBatchReader,System.Guid,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>执行操作。</summary>
      <returns>操作的响应。</returns>
      <param name="batchReader">批读取器。</param>
      <param name="batchId">批 ID。</param>
      <param name="originalRequest">包含所有批请求的原始请求。</param>
      <param name="cancellationToken">要监视的取消请求标记。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler.GetBaseUri(System.Net.Http.HttpRequestMessage)">
      <summary>获取批请求的基 URI。</summary>
      <returns>基 URI。</returns>
      <param name="request">包含所有批请求的原始请求。</param>
    </member>
    <member name="M:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.OData.Batch.UnbufferedODataBatchHandler.ValidateRequest(System.Net.Http.HttpRequestMessage)">
      <summary>验证传入请求是否包含批请求消息。</summary>
      <param name="request">包含批请求消息的请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ActionConfiguration">
      <summary>ActionConfiguration 表示你希望通过服务公开的 OData 操作。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.AddParameter(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration)">
      <summary>添加新的非绑定参数。</summary>
      <returns>新的非绑定参数。</returns>
      <param name="name">参数名。</param>
      <param name="parameterType">参数的类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.BindingParameter">
      <summary>获取 bindingParameter。</summary>
      <returns>bindingParameter。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.CollectionParameter``1(System.String)">
      <summary>添加新的非绑定集合参数。</summary>
      <returns>新的非绑定集合参数。</returns>
      <param name="name">名称。</param>
      <typeparam name="TElementType">元素的基类型。</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.FollowsConventions">
      <summary>获取一个值，该值指示由 <see cref="M:System.Web.Http.OData.Builder.ActionConfiguration.GetActionLink" /> 提供的链接是否遵循 OData 约定。</summary>
      <returns>如果 <see cref="M:System.Web.Http.OData.Builder.ActionConfiguration.GetActionLink" /> 提供的链接遵循 OData 约定，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.GetActionLink">
      <summary>检索当前注册的操作链接工厂。</summary>
      <returns>当前注册的操作链接工厂。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.HasActionLink(System.Func{System.Web.Http.OData.EntityInstanceContext,System.Uri},System.Boolean)">
      <summary>注册一个用于创建操作链接的工厂。</summary>
      <returns>用于创建操作链接的工厂。</returns>
      <param name="actionLinkFactory">此 ActionLinkBuilder 在生成链接时应使用的 actionLinkFactory。</param>
      <param name="followsConventions">一个值，该值指示操作链接工厂是否生成遵循 OData 约定的链接。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.IsAlwaysBindable">
      <summary>是否始终可以绑定此操作。例如，假设某个 Watch 操作可绑定到 Movie：但不可能总是能够 Watch（观看）Movie（电影），在此情况下，IsAlwaysBindable 将返回 false。</summary>
      <returns>如果始终可以绑定此操作，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.IsBindable">
      <summary>获取一个值，该值指示是否可以将操作绑定到表示 BindingParameter 的 URL。</summary>
      <returns>如果可以将操作绑定到表示 BindingParameter 的 URL，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.Kind">
      <summary>获取过程的类型，可以是 Action、Function 或 ServiceOperation。</summary>
      <returns>过程的类型。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.Parameter``1(System.String)">
      <summary>添加新的非绑定参数。</summary>
      <returns>新的非绑定参数。</returns>
      <param name="name">参数名。</param>
      <typeparam name="TParameter">泛型 type 参数。</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionConfiguration.Parameters">
      <summary>获取操作使用的参数。</summary>
      <returns>操作使用的参数。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.Returns``1">
      <summary>已建立操作的返回类型。</summary>
      <returns>此 <see cref="T:System.Web.Http.OData.Builder.ActionConfiguration" /> 的类型。</returns>
      <typeparam name="TReturnType">类型值为 ReturnType 的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.ReturnsCollection``1">
      <summary>建立操作的返回类型。在返回类型为 Primitive 或 ComplexType 的集合时使用。</summary>
      <returns>此 <see cref="T:System.Web.Http.OData.Builder.ActionConfiguration" /> 的返回类型。</returns>
      <typeparam name="TReturnElementType">此 ReturnElementType 的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.ReturnsCollectionFromEntitySet``1(System.String)">
      <summary>将返回类型设置为 EntityType 实例的集合。</summary>
      <returns>此 <see cref="T:System.Web.Http.OData.Builder.ActionConfiguration" /> 的返回类型。</returns>
      <param name="entitySetName">包含返回的 EntityType 实例的 entitySetName</param>
      <typeparam name="TElementEntityType">作为 EntityType 的类型</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.ReturnsCollectionFromEntitySet``1(System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <summary>将返回类型设置为实体的集合。</summary>
      <returns>返回 <see cref="T:System.Web.Http.OData.Builder.ActionConfiguration" />。</returns>
      <param name="entitySetConfiguration">包含返回的实体的实体组。</param>
      <typeparam name="TElementEntityType">实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.ReturnsFromEntitySet``1(System.String)">
      <summary>将返回类型设置为单个 EntityType 实例。</summary>
      <returns>此 <see cref="T:System.Web.Http.OData.Builder.ActionConfiguration" /> 的返回类型。</returns>
      <param name="entitySetName">包含返回 EntityType 实例的 entitySetName</param>
      <typeparam name="TEntityType">作为 EntityType 的类型</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.ReturnsFromEntitySet``1(System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <summary>将返回类型设置为单个 EntityType 实例。</summary>
      <returns>返回 <see cref="T:System.Web.Http.OData.Builder.ActionConfiguration" />。</returns>
      <param name="entitySetConfiguration">包含返回的实体的实体组。</param>
      <typeparam name="TEntityType">作为 EntityType 的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionConfiguration.SetBindingParameter(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration,System.Boolean)">
      <summary>指定 bindingParameter 的名称、类型及其属性是否为 alwaysBindable，仅当操作的属性为“isBindable”时才使用此项。</summary>
      <returns>此 <see cref="T:System.Web.Http.OData.Builder.ActionConfiguration" /> 的绑定参数。</returns>
      <param name="name">参数名。</param>
      <param name="bindingParameterType">绑定参数类型。</param>
      <param name="alwaysBindable">如果始终可绑定，则为 true；否则为 false。</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ActionLinkBuilder">
      <summary>ActionLinkBuilder 可用于对某个操作进行批注。这是格式化程序创建链接来调用绑定操作的方式。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionLinkBuilder.#ctor(System.Func{System.Web.Http.OData.EntityInstanceContext,System.Uri},System.Boolean)">
      <summary>基于 actionLinkFactory 创建新的 ActionLinkBuilder。</summary>
      <param name="actionLinkFactory">此 ActionLinkBuilder 在生成链接时应使用的 actionLinkFactory。</param>
      <param name="followsConventions">一个值，该值指示操作链接工厂是否生成遵循 OData 约定的链接。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionLinkBuilder.BuildActionLink(System.Web.Http.OData.EntityInstanceContext)">
      <summary>为给定实体生成操作链接。</summary>
      <returns>生成的操作链接。</returns>
      <param name="context">用于包装实体实例的实例上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ActionLinkBuilder.CreateActionLinkFactory(System.Func{System.Web.Http.OData.EntityInstanceContext,System.Uri},System.Func{System.Web.Http.OData.EntityInstanceContext,System.Boolean})">
      <summary>创建一个用于生成操作链接的操作链接工厂，但只能根据 expensiveAvailabilityCheck 以及是否要执行高开销检查（可通过查看 EntityInstanceContext.SkipExpensiveActionAvailabilityChecks 属性推测）的情况来适当创建。</summary>
      <returns>新的操作链接工厂。</returns>
      <param name="baseFactory">在通过了所有检查的情况下实际生成链接的操作链接工厂。</param>
      <param name="expensiveAvailabilityCheck">可用性检查函数的开销较高，但调用时会返回操作是否可用。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ActionLinkBuilder.FollowsConventions">
      <summary>获取一个布尔值，该值指示链接工厂是否遵循 OData 约定。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.BindingParameterConfiguration">
      <summary>表示 BindingParameter。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.BindingParameterConfiguration.#ctor(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration,System.Boolean)">
      <summary>创建 BindingParameterConfiguration</summary>
      <param name="name">绑定参数的名称</param>
      <param name="parameterType">绑定参数的类型</param>
      <param name="alwaysBindable">是否始终可以将操作绑定到绑定参数的实例。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.BindingParameterConfiguration.AlwaysBindable">
      <summary>指示 BindingParameter 是否始终可绑定。例如，有些操作始终可用，而有些操作只在特定的时间或特定状态下才可用。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="F:System.Web.Http.OData.Builder.BindingParameterConfiguration.DefaultBindingParameterName">
      <summary>操作的绑定参数的默认参数名称。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.CollectionPropertyConfiguration">
      <summary>CollectionPropertyConfiguration 表示 EntityType 或 ComplexType 上的 CollectionProperty。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>使用提供的 <paramref name="property" /> 构造一个 CollectionPropertyConfiguration。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.ElementType">
      <summary>返回集合中的元素类型</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.IsOptional">
      <summary>将 CollectionProperty 设置为 optional（即可为 null）。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.IsRequired">
      <summary>将 CollectionProperty 设置为 required（即不可为 null）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.Kind"></member>
    <member name="P:System.Web.Http.OData.Builder.CollectionPropertyConfiguration.RelatedClrType"></member>
    <member name="T:System.Web.Http.OData.Builder.CollectionTypeConfiguration">
      <summary>表示某个命名类型的集合。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.CollectionTypeConfiguration.#ctor(System.Web.Http.OData.Builder.IEdmTypeConfiguration,System.Type)">
      <summary>构造一个集合，该集合包含指定 ElementType 的元素，并在 CLR 中使用指定的 clrType 表示。</summary>
      <param name="elementType">集合中元素的 EdmTypeConfiguration</param>
      <param name="clrType">此集合在 CLR 中表明时的类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.ClrType">
      <summary>获取与此集合类型关联的 CLR 类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.ElementType">
      <summary>获取此集合中元素的 <see cref="T:System.Web.Http.OData.Builder.IEdmTypeConfiguration" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.FullName">
      <summary>获取此集合类型的全名（包括命名空间）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.Kind">
      <summary>获取 <see cref="T:Microsoft.Data.Edm.IEdmType" /> 的类型。在此示例中，该类型为 <see cref="F:Microsoft.Data.Edm.EdmTypeKind.Collection" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.ModelBuilder">
      <summary>获取用于创建此配置的 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.Name">
      <summary>获取此集合类型的名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.CollectionTypeConfiguration.Namespace">
      <summary>获取此集合类型的命名空间。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ComplexPropertyConfiguration">
      <summary>表示结构类型（实体类型或复杂类型）的复杂属性的配置。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>实例化 <see cref="T:System.Web.Http.OData.Builder.ComplexPropertyConfiguration" /> 类的新实例。</summary>
      <param name="property">配置的属性。</param>
      <param name="declaringType">属性的声明类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.IsOptional">
      <summary>将当前复杂属性标记为可选。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.IsRequired">
      <summary>将当前复杂属性标记为必需。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.Kind"></member>
    <member name="P:System.Web.Http.OData.Builder.ComplexPropertyConfiguration.RelatedClrType"></member>
    <member name="T:System.Web.Http.OData.Builder.ComplexTypeConfiguration">
      <summary>允许针对模型中的复杂类型执行配置。可通过使用方法 <see cref="M:System.Web.Http.OData.Builder.ODataModelBuilder.ComplexType``1" /> 获取 ComplexTypeConfiguration。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ComplexTypeConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.ComplexTypeConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ComplexTypeConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Type)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.ComplexTypeConfiguration" /> 类的新实例。</summary>
      <param name="modelBuilder">所使用的 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</param>
      <param name="clrType">此实体类型的后备 CLR 类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ComplexTypeConfiguration.Kind"></member>
    <member name="T:System.Web.Http.OData.Builder.ComplexTypeConfiguration`1">
      <summary>表示一个可以使用 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" /> 生成的 <see cref="T:Microsoft.Data.Edm.IEdmComplexType" />。</summary>
      <typeparam name="TComplexType"></typeparam>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntityCollectionConfiguration`1">
      <summary>EntityCollectionConfiguration 表示实体的集合。此类可用于配置要绑定到实体的项，例如绑定到集合的操作。</summary>
      <typeparam name="TEntityType">EntityType，作为 EntityCollection 的 ElementType</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityCollectionConfiguration`1.Action(System.String)">
      <summary>创建一个可绑定到 Collection(EntityType) 的新操作。</summary>
      <returns>ActionConfiguration，允许对操作执行进一步的配置。</returns>
      <param name="name">操作的名称</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityCollectionConfiguration`1.TransientAction(System.String)">
      <summary>创建一个有时可绑定到 Collection(EntityType) 的新操作。</summary>
      <returns>ActionConfiguration，允许对操作执行进一步的配置。</returns>
      <param name="name">操作的名称</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntitySetConfiguration">
      <summary>允许针对模型中的实体集执行配置。可通过使用方法 <see cref="M:System.Web.Http.OData.Builder.ODataModelBuilder.EntitySet``1(System.String)" /> 获取 <see cref="T:System.Web.Http.OData.Builder.EntitySetConfiguration" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.EntitySetConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Type,System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.EntitySetConfiguration" /> 类的新实例。</summary>
      <param name="modelBuilder">
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</param>
      <param name="entityType">此实体集中包含的实体类型的 CLR <see cref="T:System.Type" />。</param>
      <param name="name">实体集的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Web.Http.OData.Builder.EntityTypeConfiguration,System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.EntitySetConfiguration" /> 类的新实例。</summary>
      <param name="modelBuilder">
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</param>
      <param name="entityType">此实体集中包含的实体类型。</param>
      <param name="name">实体集的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.AddBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Web.Http.OData.Builder.EntitySetConfiguration)">
      <summary>将给定的导航属性绑定到目标实体集。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" />，从而可以进一步对其进行配置。</returns>
      <param name="navigationConfiguration">导航属性。</param>
      <param name="targetEntitySet">目标实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration.Bindings">
      <summary>获取此实体集的导航目标。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration.ClrType">
      <summary>获取此实体集中包含的实体类型的后备 CLR 类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration.EntityType">
      <summary>获取此实体集中包含的实体类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.FindBinding(System.String)">
      <summary>获取具有给定名称的导航属性的 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" />。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" />。</returns>
      <param name="propertyName">导航属性的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.FindBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration)">
      <summary>查找给定导航属性的绑定并在该绑定不存在时尝试创建它。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" />，从而可以进一步对其进行配置。</returns>
      <param name="navigationConfiguration">导航属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.FindBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Boolean)">
      <summary>查找给定导航属性的绑定。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" />，从而可以进一步对其进行配置。</returns>
      <param name="navigationConfiguration">导航属性。</param>
      <param name="autoCreate">指示是否应自动创建绑定（如果该绑定不存在）。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetEditLink">
      <summary>获取用于为此实体集中的条目生成编辑链接的生成器。</summary>
      <returns>链接生成器。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetFeedSelfLink">
      <summary>获取用于为此实体集的源生成自助链接的生成器。</summary>
      <returns>链接生成器。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetIdLink">
      <summary>获取用于为此实体集中的条目生成 ID 的生成器。</summary>
      <returns>生成器。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetNavigationPropertyLink(System.Web.Http.OData.Builder.NavigationPropertyConfiguration)">
      <summary>获取用于为此实体集中条目的给定导航属性生成导航链接的生成器。</summary>
      <returns>链接生成器。</returns>
      <param name="navigationProperty">导航属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetReadLink">
      <summary>获取用于为此实体集中的条目生成读取链接的生成器。</summary>
      <returns>链接生成器。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.GetUrl">
      <summary>获取实体集 URL。</summary>
      <returns>实体集 URL。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasEditLink(System.Web.Http.OData.Builder.SelfLinkBuilder{System.Uri})">
      <summary>为此实体集中的实体配置编辑链接。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="editLinkBuilder">用于生成编辑链接的生成器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasFeedSelfLink(System.Func{System.Web.Http.OData.FeedContext,System.Uri})">
      <summary>向源添加自助链接。</summary>
      <returns>当前正在配置的实体集配置。</returns>
      <param name="feedSelfLinkFactory">用于生成链接 URL 的生成器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasIdLink(System.Web.Http.OData.Builder.SelfLinkBuilder{System.String})">
      <summary>为此实体集中的实体配置 ID。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="idLinkBuilder">用于生成 ID 的生成器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasNavigationPropertiesLink(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Builder.NavigationPropertyConfiguration},System.Web.Http.OData.Builder.NavigationLinkBuilder)">
      <summary>为此实体集中的实体的给定导航属性配置导航链接。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="navigationProperties">要为其生成导航链接的导航属性。</param>
      <param name="navigationLinkBuilder">用于生成导航链接的生成器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasNavigationPropertyLink(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Web.Http.OData.Builder.NavigationLinkBuilder)">
      <summary>为此实体集中的实体的给定导航属性配置导航链接。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="navigationProperty">要为其生成导航链接的导航属性。</param>
      <param name="navigationLinkBuilder">用于生成导航链接的生成器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasReadLink(System.Web.Http.OData.Builder.SelfLinkBuilder{System.Uri})">
      <summary>为此实体集中的实体配置读取链接。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="readLinkBuilder">用于生成读取链接的生成器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.HasUrl(System.String)">
      <summary>配置实体集 URL。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="url">实体集 URL。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration.Name">
      <summary>获取此实体集的名称。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration.RemoveBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration)">
      <summary>删除给定导航属性的绑定。</summary>
      <param name="navigationConfiguration">导航属性</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntitySetConfiguration`1">
      <typeparam name="TEntityType">实体集的元素类型。</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntitySetConfiguration`1.EntityType">
      <summary>获取此实体集中包含的实体类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.FindBinding(System.String)">
      <summary>查找具有给定名称的导航属性的 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" />。</summary>
      <returns>如果找到绑定，则为该绑定；否则为 <see cref="null" />。</returns>
      <param name="propertyName">导航属性的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.FindBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration)">
      <summary>查找给定导航属性的 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" />；如果该项不存在，则创建它。</summary>
      <returns>如果找到绑定，则为该绑定；否则为创建的绑定。</returns>
      <param name="navigationConfiguration">导航属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.FindBinding(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Boolean)">
      <summary>查找给定导航属性的 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" />。</summary>
      <returns>绑定（如果找到）。</returns>
      <param name="navigationConfiguration">导航属性。</param>
      <param name="autoCreate">表示一个值，该值指定在找不到绑定时是否应创建绑定。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasEditLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.String},System.Boolean)">
      <summary>为此实体集中的实体配置编辑链接。</summary>
      <param name="editLinkFactory">用于生成编辑链接的工厂。</param>
      <param name="followsConventions">如果工厂遵循 OData 编辑链接约定，则为 <see cref="true" />；否则为 <see cref="false" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasEditLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.Uri},System.Boolean)">
      <summary>为此实体集中的实体配置编辑链接。</summary>
      <param name="editLinkFactory">用于生成编辑链接的工厂。</param>
      <param name="followsConventions">如果工厂遵循 OData 编辑链接约定，则为 <see cref="true" />；否则为 <see cref="false" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasFeedSelfLink(System.Func{System.Web.Http.OData.FeedContext,System.String})">
      <summary>向源添加自助链接。</summary>
      <param name="feedSelfLinkFactory">用于生成链接 URL 的生成器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasFeedSelfLink(System.Func{System.Web.Http.OData.FeedContext,System.Uri})">
      <summary>向源添加自助链接。</summary>
      <param name="feedSelfLinkFactory">用于生成链接 URL 的生成器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasIdLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.String},System.Boolean)">
      <summary>为此实体集中的实体配置 ID 链接。</summary>
      <param name="idLinkFactory">用于生成 ID 链接的工厂。</param>
      <param name="followsConventions">如果工厂遵循 OData ID 链接约定，则为 <see cref="true" />；否则为 <see cref="false" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasManyBinding``2(System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0}}},System.String)">
      <summary>通过此实体类型配置一对多关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="entitySetName">绑定的目标实体集名称。如果该目标实体集名称不存在，则将进行创建。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
      <typeparam name="TDerivedEntityType">目标实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasManyBinding``2(System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0}}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <summary>通过此实体类型配置一对多关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="targetSet">绑定的目标实体集。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
      <typeparam name="TDerivedEntityType">目标实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasManyBinding``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.String)">
      <summary>通过此实体类型配置一对多关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="entitySetName">绑定的目标实体集名称。如果该目标实体集名称不存在，则将进行创建。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasManyBinding``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <summary>通过此实体类型配置一对多关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="targetSet">绑定的目标实体集。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasNavigationPropertiesLink(System.Collections.Generic.IEnumerable{System.Web.Http.OData.Builder.NavigationPropertyConfiguration},System.Func{System.Web.Http.OData.EntityInstanceContext{`0},Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri},System.Boolean)">
      <summary>为此实体集中的实体的给定导航属性配置导航链接。</summary>
      <param name="navigationProperties">要为其生成导航链接的导航属性。</param>
      <param name="navigationLinkFactory">用于生成导航链接的工厂。</param>
      <param name="followsConventions">如果工厂遵循 OData 导航链接约定，则为 <see cref="true" />；否则为 <see cref="false" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasNavigationPropertyLink(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Func{System.Web.Http.OData.EntityInstanceContext{`0},Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri},System.Boolean)">
      <summary>为此实体集中的实体的给定导航属性配置导航链接。</summary>
      <param name="navigationProperty">要为其生成导航链接的导航属性。</param>
      <param name="navigationLinkFactory">用于生成导航链接的工厂。</param>
      <param name="followsConventions">如果工厂遵循 OData 导航链接约定，则为 <see cref="true" />；否则为 <see cref="false" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasOptionalBinding``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String)">
      <summary>通过此实体类型配置可选关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="entitySetName">绑定的目标实体集名称。如果该目标实体集名称不存在，则将进行创建。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
      <typeparam name="TDerivedEntityType">目标实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasOptionalBinding``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <summary>通过此实体类型配置可选关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="targetSet">绑定的目标实体集。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
      <typeparam name="TDerivedEntityType">目标实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasOptionalBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>通过此实体类型配置可选关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="entitySetName">绑定的目标实体集名称。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasOptionalBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <summary>通过此实体类型配置可选关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="targetSet">绑定的目标实体集。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasReadLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.String},System.Boolean)">
      <summary>为此实体集中的实体配置读取链接。</summary>
      <param name="readLinkFactory">用于生成读取链接的工厂。</param>
      <param name="followsConventions">如果工厂遵循 OData 读取链接约定，则为 <see cref="true" />；否则为 <see cref="false" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasReadLink(System.Func{System.Web.Http.OData.EntityInstanceContext{`0},System.Uri},System.Boolean)">
      <summary>为此实体集中的实体配置读取链接。</summary>
      <param name="readLinkFactory">用于生成读取链接的工厂。</param>
      <param name="followsConventions">如果工厂遵循 OData 读取链接约定，则为 <see cref="true" />；否则为 <see cref="false" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasRequiredBinding``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.String)">
      <summary>通过此实体类型配置所需的关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="entitySetName">绑定的目标实体集名称。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
      <typeparam name="TDerivedEntityType">目标实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasRequiredBinding``2(System.Linq.Expressions.Expression{System.Func{``1,``0}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <summary>通过此实体类型配置所需的关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="targetSet">绑定的目标实体集。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
      <typeparam name="TDerivedEntityType">目标实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasRequiredBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>通过此实体类型配置所需的关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="entitySetName">绑定的目标实体集名称。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetConfiguration`1.HasRequiredBinding``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Web.Http.OData.Builder.EntitySetConfiguration{``0})">
      <summary>通过此实体类型配置所需的关系，并将相应的导航属性绑定到给定的实体集。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <param name="targetSet">绑定的目标实体集。</param>
      <typeparam name="TTargetType">目标实体集类型。</typeparam>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" /> 是一个类，可使用相关信息批注 <see cref="T:Microsoft.Data.Edm.IEdmEntitySet" /> 内部的 <see cref="T:Microsoft.Data.Edm.IEdmModel" />，此相关信息是关于如何生成与该实体集相关的链接的。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.#ctor(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmModel)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" /> 类的新实例。</summary>
      <param name="entitySet">正在为其构造链接生成器的实体集。</param>
      <param name="model">此实体集所属的 EDM 模型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.#ctor(Microsoft.Data.Edm.IEdmEntitySet,System.Func{System.Web.Http.OData.FeedContext,System.Uri},System.Web.Http.OData.Builder.SelfLinkBuilder{System.String},System.Web.Http.OData.Builder.SelfLinkBuilder{System.Uri},System.Web.Http.OData.Builder.SelfLinkBuilder{System.Uri})">
      <summary>构造 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" /> 的实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.#ctor(System.Web.Http.OData.Builder.EntitySetConfiguration)">
      <summary>通过 <see cref="T:System.Web.Http.OData.Builder.EntitySetConfiguration" /> 构造 <see cref="T:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation" /> 的实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.AddNavigationPropertyLinkBuilder(Microsoft.Data.Edm.IEdmNavigationProperty,System.Web.Http.OData.Builder.NavigationLinkBuilder)">
      <summary>为从此 EntitySet 中的实体导航的 <see cref="T:Microsoft.Data.Edm.IEdmNavigationProperty" /> 注册链接生成器。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.BuildEditLink(System.Web.Http.OData.EntityInstanceContext,System.Web.Http.OData.Formatter.ODataMetadataLevel,System.String)">
      <summary>为特定的 <see cref="T:System.Web.Http.OData.EntityInstanceContext" /> 和 <see cref="T:System.Web.Http.OData.Formatter.ODataMetadataLevel" /> 构造 EditLink URL。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.BuildEntitySelfLinks(System.Web.Http.OData.EntityInstanceContext,System.Web.Http.OData.Formatter.ODataMetadataLevel)">
      <summary>为特定的 <see cref="T:System.Web.Http.OData.EntityInstanceContext" /> 和 <see cref="T:System.Web.Http.OData.Formatter.ODataMetadataLevel" /> 构造 <see cref="T:System.Web.Http.OData.Formatter.Serialization.EntitySelfLinks" />。</summary>
      <returns>返回 <see cref="T:System.Web.Http.OData.Formatter.Serialization.EntitySelfLinks" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.BuildFeedSelfLink(System.Web.Http.OData.FeedContext)">
      <summary>生成给定 <see cref="T:System.Web.Http.OData.FeedContext" /> 的自助链接 URI。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.BuildIdLink(System.Web.Http.OData.EntityInstanceContext,System.Web.Http.OData.Formatter.ODataMetadataLevel)">
      <summary>为特定的 <see cref="T:System.Web.Http.OData.EntityInstanceContext" /> 和 <see cref="T:System.Web.Http.OData.Formatter.ODataMetadataLevel" /> 构造 IdLink。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.BuildNavigationLink(System.Web.Http.OData.EntityInstanceContext,Microsoft.Data.Edm.IEdmNavigationProperty,System.Web.Http.OData.Formatter.ODataMetadataLevel)">
      <summary>为特定的 <see cref="T:System.Web.Http.OData.EntityInstanceContext" />、<see cref="T:Microsoft.Data.Edm.IEdmNavigationProperty" /> 和 <see cref="T:System.Web.Http.OData.Formatter.ODataMetadataLevel" /> 构造 NavigationLink。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntitySetLinkBuilderAnnotation.BuildReadLink(System.Web.Http.OData.EntityInstanceContext,System.Web.Http.OData.Formatter.ODataMetadataLevel,System.Uri)">
      <summary>为特定的 <see cref="T:System.Web.Http.OData.EntityInstanceContext" /> 和 <see cref="T:System.Web.Http.OData.Formatter.ODataMetadataLevel" /> 构造 ReadLink URL。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntityTypeConfiguration">
      <summary>表示一个可以使用 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" /> 生成的 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.EntityTypeConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Type)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.EntityTypeConfiguration" /> 类的新实例。</summary>
      <param name="modelBuilder">所使用的 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</param>
      <param name="clrType">此实体类型的后备 CLR 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.Abstract">
      <summary>将此实体类型标记为抽象。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.AddCollectionProperty(System.Reflection.PropertyInfo)">
      <summary>将新的 EDM 集合属性添加到此实体类型。</summary>
      <returns>返回所添加属性的 <see cref="T:System.Web.Http.OData.Builder.CollectionPropertyConfiguration" />。</returns>
      <param name="propertyInfo">后备 CLR 属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.AddComplexProperty(System.Reflection.PropertyInfo)">
      <summary>将新的 EDM 复杂属性添加到此实体类型。</summary>
      <returns>返回所添加属性的 <see cref="T:System.Web.Http.OData.Builder.ComplexPropertyConfiguration" />。</returns>
      <param name="propertyInfo">后备 CLR 属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.AddNavigationProperty(System.Reflection.PropertyInfo,Microsoft.Data.Edm.EdmMultiplicity)">
      <summary>将新的 EDM 导航属性添加到此实体类型。</summary>
      <returns>返回所添加属性的 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration" />。</returns>
      <param name="navigationProperty">后备 CLR 属性。</param>
      <param name="multiplicity">导航属性的 <see cref="T:Microsoft.Data.Edm.EdmMultiplicity" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.AddProperty(System.Reflection.PropertyInfo)">
      <summary>将新的 EDM 基元属性添加到此实体类型。</summary>
      <returns>返回所添加属性的 <see cref="T:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration" />。</returns>
      <param name="propertyInfo">后备 CLR 属性。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.BaseType">
      <summary>获取或设置此实体类型的基类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.BaseTypeConfigured">
      <summary>获取一个值，该值表示基类型是显式配置的还是推断的。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.DerivesFrom(System.Web.Http.OData.Builder.EntityTypeConfiguration)">
      <summary>设置此实体类型的基类型。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="baseType">基实体类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.DerivesFromNothing">
      <summary>将此实体类型的基类型设置为 null，表示此实体类型无法从任何元素派生。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>配置此实体类型的键属性。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="keyProperty">要添加到此实体类型键属性的属性。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.IsAbstract">
      <summary>获取或设置一个值，该值指示此类型是否为抽象类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.Keys">
      <summary>获取此实体类型的键的集合。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.Kind">
      <summary>获取此 <see cref="T:System.Web.Http.OData.Builder.IEdmTypeConfiguration" /> 的 <see cref="T:Microsoft.Data.Edm.EdmTypeKind" /></summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration.NavigationProperties">
      <summary>获取此实体类型的 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration" /> 的集合。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.RemoveKey(System.Web.Http.OData.Builder.PrimitivePropertyConfiguration)">
      <summary>从实体键集合中删除属性。</summary>
      <param name="keyProperty">要删除的键。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration.RemoveProperty(System.Reflection.PropertyInfo)">
      <summary>从实体中删除属性。</summary>
      <param name="propertyInfo">要删除的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.EntityTypeConfiguration`1">
      <summary>表示一个可以使用 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" /> 生成的 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" />。</summary>
      <typeparam name="TEntityType">此 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" /> 的后备 CLR 类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.Abstract">
      <summary>将此实体类型标记为抽象。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.Action(System.String)">
      <summary>创建一个可绑定到此 EntityType 的操作。</summary>
      <returns>ActionConfiguration，允许对新操作执行进一步的配置。</returns>
      <param name="name">操作的名称。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.BaseType">
      <summary>获取此实体类型的基类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.Collection">
      <summary>用于访问实体的集合，通过该集合能够配置可绑定到 EntityCollection 的操作。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.DerivesFrom``1">
      <summary>设置此实体类型的基类型。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <typeparam name="TBaseType">基实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.DerivesFromNothing">
      <summary>将此实体类型的基类型设置为 null，表示此实体类型无法从任何元素派生。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>配置此实体类型的键属性。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
      <param name="keyDefinitionExpression">一个 lambda 表达式，表示要用作主键的属性。例如，在 C# 中，t =&amp;gt; t.Id；在 Visual Basic 中，.Net Function(t) t.Id。</param>
      <typeparam name="TKey">键的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
      <summary>通过此实体类型配置一对多关系。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TTargetEntity">位于关系另一端的实体的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>通过此实体类型配置可选关系。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TTargetEntity">位于关系另一端的实体的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>通过此实体类型配置所需的关系。</summary>
      <returns>一个配置对象，可用于进一步配置关系。</returns>
      <param name="navigationPropertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TTargetEntity">位于关系另一端的实体的类型。</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.NavigationProperties">
      <summary>获取此实体类型的 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration" /> 的集合。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.EntityTypeConfiguration`1.TransientAction(System.String)">
      <summary>创建一个有时可绑定到此 EntityType 的操作</summary>
      <returns>ActionConfiguration，允许对新的“瞬态”操作执行进一步的配置。</returns>
      <param name="name">操作的名称。</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.IEdmTypeConfiguration">
      <summary>表示 EdmType</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.ClrType">
      <summary>与 EdmType 关联的 CLR 类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.FullName">
      <summary>EdmType 的全名（包括命名空间）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.Kind">
      <summary>EdmType 的类型。示例包括 EntityType、ComplexType、PrimitiveType 和 CollectionType。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.ModelBuilder">
      <summary>用于创建此 IEdmType 的 ODataModelBuilder。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.Name">
      <summary>EdmType 的名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.IEdmTypeConfiguration.Namespace">
      <summary>EdmType 的命名空间。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.LinkGenerationHelpers">
      <summary>包含帮助器方法，用于生成遵循 OData URL 约定的 OData 链接。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.LinkGenerationHelpers.GenerateActionLink(System.Web.Http.OData.EntityInstanceContext,Microsoft.Data.Edm.IEdmFunctionBase)">
      <summary>为操作 <paramref name="action" /> 生成遵循 OData URL 约定的操作链接，并将该链接绑定到 <paramref name="entityContext" /> 表示的实体。</summary>
      <returns>生成的遵循 OData URL 约定的操作链接。</returns>
      <param name="entityContext">
        <see cref="T:System.Web.Http.OData.EntityInstanceContext" />，表示需为其生成操作链接的实体。</param>
      <param name="action">需为其生成操作链接的操作。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.LinkGenerationHelpers.GenerateFeedSelfLink(System.Web.Http.OData.FeedContext)">
      <summary>生成一个源自助链接，该链接遵循 <paramref name="feedContext" /> 所代表的源的 OData URL 约定。</summary>
      <returns>生成的遵循 OData URL 约定的源自助链接。</returns>
      <param name="feedContext">
        <see cref="T:System.Web.Http.OData.FeedContext" />，表示需为其生成自助链接的源。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.LinkGenerationHelpers.GenerateNavigationPropertyLink(System.Web.Http.OData.EntityInstanceContext,Microsoft.Data.Edm.IEdmNavigationProperty,System.Boolean)">
      <summary>为由 <paramref name="entityContext" /> 和给定导航属性表示的实体生成遵循 OData URL 约定的导航链接。</summary>
      <returns>遵循 OData URL 约定的导航链接。</returns>
      <param name="entityContext">
        <see cref="T:System.Web.Http.OData.EntityInstanceContext" />，表示需为其生成导航链接的实体。</param>
      <param name="navigationProperty">EDM 导航属性。</param>
      <param name="includeCast">表示生成的链接是否应包含表示类型转换的转换段。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.LinkGenerationHelpers.GenerateSelfLink(System.Web.Http.OData.EntityInstanceContext,System.Boolean)">
      <summary>为 <paramref name="entityContext" /> 表示的实体生成遵循 OData URL 约定的自助链接。</summary>
      <returns>遵循 OData URL 约定的自助链接。</returns>
      <param name="entityContext">
        <see cref="T:System.Web.Http.OData.EntityInstanceContext" />，表示需为其生成自助链接的实体。</param>
      <param name="includeCast">表示生成的链接是否应包含表示类型转换的转换段。</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.NavigationLinkBuilder">
      <summary>封装导航链接工厂，并指示该链接工厂是否遵循约定。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.NavigationLinkBuilder.#ctor(System.Func{System.Web.Http.OData.EntityInstanceContext,Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri},System.Boolean)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.NavigationLinkBuilder" /> 类的新实例。</summary>
      <param name="navigationLinkFactory">用于创建导航链接的导航链接工厂。</param>
      <param name="followsConventions">表示此工厂是否遵循 OData 约定。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationLinkBuilder.Factory">
      <summary>获取用于创建导航链接的导航链接工厂。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationLinkBuilder.FollowsConventions">
      <summary>获取一个值，该值表示此工厂是否遵循 OData 约定。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration">
      <summary>为实体集的导航属性配置绑定。此配置功能由模型生成器 Fluent API 公开，请参阅 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration.#ctor(System.Web.Http.OData.Builder.NavigationPropertyConfiguration,System.Web.Http.OData.Builder.EntitySetConfiguration)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration" /> 类的新实例。</summary>
      <param name="navigationProperty">绑定的导航属性。</param>
      <param name="entitySet">绑定的目标实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration.EntitySet">
      <summary>获取绑定的目标实体集。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyBindingConfiguration.NavigationProperty">
      <summary>获取绑定的导航属性。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration">
      <summary>表示某一实体类型的导航属性的配置。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.#ctor(System.Reflection.PropertyInfo,Microsoft.Data.Edm.EdmMultiplicity,System.Web.Http.OData.Builder.EntityTypeConfiguration)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.NavigationPropertyConfiguration" /> 类的新实例。</summary>
      <param name="property">后备 CLR 属性。</param>
      <param name="multiplicity">
        <see cref="T:Microsoft.Data.Edm.EdmMultiplicity" />。</param>
      <param name="declaringType">声明实体类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.DeclaringEntityType">
      <summary>获取声明实体类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.Kind">
      <summary>获取此属性的 <see cref="T:System.Web.Http.OData.Builder.PropertyKind" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.Multiplicity">
      <summary>获取此导航属性的 <see cref="T:Microsoft.Data.Edm.EdmMultiplicity" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.Optional">
      <summary>将导航属性标记为可选。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.RelatedClrType">
      <summary>获取此属性类型的后备 CLR 类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.NavigationPropertyConfiguration.Required">
      <summary>将导航属性标记为必需。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.NonbindingParameterConfiguration">
      <summary>表示非绑定过程参数。非绑定参数在操作的 POST 正文中提供。对于函数，非绑定参数以 3 种方式提供 - ~/.../Function(p1=value) - ~/.../Function(p1=@x)?@x=value - ~/.../Function?p1=value（仅当 Function 是最后一个 URL 路径段时才允许使用）。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.NonbindingParameterConfiguration.#ctor(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.NonbindingParameterConfiguration" /> 类的新实例。</summary>
      <param name="name">参数名。</param>
      <param name="parameterType">参数的 EDM 类型。</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" /> 用于根据一组 <see cref="T:System.Web.Http.OData.Builder.Conventions.IConvention" /> 自动将 CLR 类映射到 EDM 模型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>初始化新的 <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" />。</summary>
      <param name="configuration">要使用的 <see cref="T:System.Web.Http.HttpConfiguration" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.#ctor(System.Web.Http.HttpConfiguration,System.Boolean)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" /> 类的新实例。</summary>
      <param name="configuration">要使用的 <see cref="T:System.Web.Http.HttpConfiguration" />。</param>
      <param name="isQueryCompositionMode">是否只为查询构建模型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.AddComplexType(System.Type)"></member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.AddEntity(System.Type)"></member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.AddEntitySet(System.String,System.Web.Http.OData.Builder.EntityTypeConfiguration)"></member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.GetEdmModel"></member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.Ignore``1">
      <summary>从模型中排除类型。这用于从模型中删除在初始模型发现期间按约定添加的类型。</summary>
      <returns>同一 ，以便能够链接多个调用。</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataConventionModelBuilder.Ignore(System.Type[])">
      <summary>从模型中排除类型。这用于从模型中删除在初始模型发现期间按约定添加的类型。</summary>
      <returns>同一 ，以便能够链接多个调用。</returns>
      <param name="types">要从模型中排除的类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataConventionModelBuilder.OnModelCreating">
      <summary>在 <see cref="T:System.Web.Http.OData.Builder.ODataConventionModelBuilder" /> 运行所有约定之后、但在配置已锁定并用于生成 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 之前调用此操作。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ODataModelBuilder">
      <summary>表示用于将 CLR 类映射到 EDM 模型的模型生成器。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.Action(System.String)">
      <summary>向生成器添加一个不可绑定的操作。</summary>
      <returns>指定的操作的配置对象。</returns>
      <param name="name">操作的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.AddComplexType(System.Type)">
      <summary>将某个复杂类型注册为模型的一部分，并返回可用于配置实体的对象。可以针对同一个实体多次调用此方法，以执行多行配置。</summary>
      <returns>指定复杂类型的配置对象。</returns>
      <param name="type">要注册或配置的类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.AddEntity(System.Type)">
      <summary>将某个实体类型注册为模型的一部分，并返回可用于配置实体的对象。可以针对同一个实体多次调用此方法，以执行多行配置。</summary>
      <returns>指定实体类型的配置对象。</returns>
      <param name="type">要注册或配置的类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.AddEntitySet(System.String,System.Web.Http.OData.Builder.EntityTypeConfiguration)">
      <summary>将某个实体集注册为模型的一部分，并返回可用于配置该实体集的对象。可以针对同一个类型多次调用此方法，以执行多行配置。</summary>
      <returns>指定实体集的配置对象。</returns>
      <param name="name">实体集的名称。</param>
      <param name="entityType">要注册或配置的类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.AddProcedure(System.Web.Http.OData.Builder.ProcedureConfiguration)">
      <summary>将过程添加到模型中。</summary>
      <param name="procedure">要添加的过程。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.ComplexType``1">
      <summary>将某个类型注册为模型中的复杂类型，并返回可用于配置该复杂类型的对象。可以针对同一个类型多次调用此方法，以执行多行配置。</summary>
      <returns>指定复杂类型的配置对象。</returns>
      <typeparam name="TComplexType">要注册或配置的类型。</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.ContainerName">
      <summary>获取或设置要保留所有实体集、操作和函数的容器的名称。</summary>
      <returns>容器的名称</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.DataServiceVersion">
      <summary>获取或设置模型的数据服务版本。默认值为 3.0。</summary>
      <returns>模型的数据服务版本。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.Entity``1">
      <summary>将某个实体类型注册为模型的一部分，并返回可用于配置实体的对象。可以针对同一个实体多次调用此方法，以执行多行配置。</summary>
      <returns>指定实体类型的配置对象。</returns>
      <typeparam name="TEntityType">要注册或配置的类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.EntitySet``1(System.String)">
      <summary>将某个实体集注册为模型的一部分，并返回可用于配置该实体集的对象。可以针对同一个类型多次调用此方法，以执行多行配置。</summary>
      <returns>指定实体集的配置对象。</returns>
      <param name="name">实体集的名称。</param>
      <typeparam name="TEntityType">实体集的实体类型。</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.EntitySets">
      <summary>获取要生成的模型中 EDM 实体集的集合。</summary>
      <returns>要生成的模型中 EDM 实体集的集合。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.GetEdmModel">
      <summary>使用此生成器基于执行的配置创建并返回 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</summary>
      <returns>生成的模型。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.GetTypeConfigurationOrNull(System.Type)">
      <summary>尝试查找与 <paramref name="type" /> 匹配的预配置结构类型或基元类型。如果找不到匹配项，则返回 null。</summary>
      <returns>预配置的结构类型或基元类型（如果已找到）；否则为 null。</returns>
      <param name="type">要查找的类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.MaxDataServiceVersion">
      <summary>获取或设置模型的最大数据服务版本。默认值为 3.0。</summary>
      <returns>模型的最大数据服务版本。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.Namespace">
      <summary>获取或设置要用于生成的模型的命名空间。</summary>
      <returns>要用于生成的模型的命名空间。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.Procedures">
      <summary>获取要生成的模型中过程（即操作、函数和服务操作）的集合。</summary>
      <returns>过程的集合。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.RemoveEntitySet(System.String)">
      <summary>从模型中删除实体集。</summary>
      <returns>如果该实体集在模型中存在，则为 true；否则为 false。</returns>
      <param name="name">要删除的实体集的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.RemoveProcedure(System.String)">
      <summary>从模型中删除过程。</summary>
      <returns>如果该过程在模型中存在，则为 true；否则为 false。</returns>
      <param name="name">要删除的过程的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.RemoveProcedure(System.Web.Http.OData.Builder.ProcedureConfiguration)">
      <summary>从模型中删除过程。</summary>
      <returns>如果该过程在模型中存在，则为 true；否则为 false。</returns>
      <param name="procedure">要删除的过程。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ODataModelBuilder.RemoveStructuralType(System.Type)">
      <summary>从模型中删除类型。</summary>
      <returns>如果该类型在模型中存在，则为 true；否则为 false。</returns>
      <param name="type">要删除的类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ODataModelBuilder.StructuralTypes">
      <summary>获取要生成的模型中 EDM 结构类型的集合。</summary>
      <returns>模型中 EDM 结构类型的集合。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ParameterConfiguration">
      <summary>表示过程的参数</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ParameterConfiguration.#ctor(System.String,System.Web.Http.OData.Builder.IEdmTypeConfiguration)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.ParameterConfiguration" /> 类的新实例。</summary>
      <param name="name">参数名。</param>
      <param name="parameterType">参数的 EDM 类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ParameterConfiguration.Name">
      <summary>参数名</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ParameterConfiguration.TypeConfiguration">
      <summary>参数的类型</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration">
      <summary>用于配置实体类型或复杂类型的基元属性。此配置功能由模型生成器 Fluent API 公开，请参阅 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration" /> 类的新实例。</summary>
      <param name="property">属性的名称。</param>
      <param name="declaringType">属性的声明 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.IsOptional">
      <summary>将属性配置为 optional。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.IsRequired">
      <summary>将属性配置为 required。</summary>
      <returns>返回自身，以便能够链接多个调用。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.Kind">
      <summary>获取此属性的类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration.RelatedClrType">
      <summary>获取此属性类型的后备 CLR 类型。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration">
      <summary>表示 PrimitiveType</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,Microsoft.Data.Edm.IEdmPrimitiveType,System.Type)">
      <summary>此构造函数仅公用于单元测试目的。若要获取 PrimitiveTypeConfiguration，请使用 ODataModelBuilder.GetTypeConfigurationOrNull(Type)</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.ClrType">
      <summary>获取此 EDM 类型的后备 CLR 类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.EdmPrimitiveType">
      <summary>返回与此 PrimitiveTypeConfiguration 关联的 IEdmPrimitiveType</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.FullName">
      <summary>获取此 EDM 类型的全名。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.Kind">
      <summary>获取此 EDM 类型的 <see cref="T:Microsoft.Data.Edm.EdmTypeKind" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.ModelBuilder">
      <summary>获取用于创建此配置的 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.Name">
      <summary>获取此 EDM 类型的名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PrimitiveTypeConfiguration.Namespace">
      <summary>获取此 EDM 类型的命名空间。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ProcedureConfiguration">
      <summary>表示在模型中公开的过程</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.ProcedureConfiguration.#ctor"></member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.ContainerQualifiedName">
      <summary>该过程在 OData URL 中使用时的限定名称。需要进行限定，以便将该过程与其他可能的单一组成部分标识符区分开来。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.EntitySet">
      <summary>从中返回实体的 EntitySet。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.FullName">
      <summary>FullName 是 ContainerQualifiedName。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.FullyQualifiedName">
      <summary>FullyQualifiedName 是使用命名空间进一步限定的 ContainerQualifiedName。通常，这是不需要的，因为大多数服务最多只有一个同名的容器。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.IsAlwaysBindable">
      <summary>如果该过程的属性为 IsBindable，它是否始终可绑定。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.IsBindable">
      <summary>是否可以将该过程绑定到表示 BindingParameter 的 URL。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.IsComposable">
      <summary>该过程是否可用作组合基础。例如，调用该过程的 URL 是否可用作调用该过程并对结果执行其他某些操作的请求的基 URL</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.IsSideEffecting">
      <summary>该过程是否有副作用。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.Kind">
      <summary>过程的类型，可以是 Action、Function 或 ServiceOperation</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.ModelBuilder">
      <summary>获取或设置用于创建此配置的 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.Name">
      <summary>过程的名称</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.Parameters">
      <summary>过程使用的参数</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.ProcedureConfiguration.ReturnType">
      <summary>调用该过程时返回的类型。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.ProcedureKind">
      <summary>OData 过程的类型。Action、Function 和 ServiceOperation 中的一个。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.ProcedureKind.Action">
      <summary>一个操作</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.ProcedureKind.Function">
      <summary>一个函数</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.ProcedureKind.ServiceOperation">
      <summary>一个服务操作</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.PropertyConfiguration">
      <summary>所有属性配置的基类。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.PropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.PropertyConfiguration" /> 类的新实例。</summary>
      <param name="property">属性的名称。</param>
      <param name="declaringType">属性的声明 EDM 类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.AddedExplicitly">
      <summary>获取或设置一个值，如果属性是由用户添加的，则该值为 <see cref="true" />；如果属性是通过约定推断的，则该值为 <see cref="false" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.DeclaringType">
      <summary>获取声明类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.Kind">
      <summary>获取属性的 <see cref="T:System.Web.Http.OData.Builder.PropertyKind" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.Name">
      <summary>获取属性的名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.PropertyInfo">
      <summary>获取映射 CLR <see cref="P:System.Web.Http.OData.Builder.PropertyConfiguration.PropertyInfo" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.PropertyConfiguration.RelatedClrType">
      <summary>获取属性的 CLR <see cref="T:System.Type" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.PropertyKind">
      <summary>EDM 属性的类型。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.PropertyKind.Collection">
      <summary>表示一个 EDM 集合属性。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.PropertyKind.Complex">
      <summary>表示一个 EDM 复杂属性。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.PropertyKind.Navigation">
      <summary>表示一个 EDM 导航属性。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Builder.PropertyKind.Primitive">
      <summary>表示一个 EDM 基元属性。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.SelfLinkBuilder`1">
      <summary>封装自助链接工厂，并指示该链接工厂是否遵循约定。</summary>
      <typeparam name="T">生成的自助链接类型。对于 ID 链接，此值应为 <see cref="T:System.String" />；对于读取和编辑链接，此值应为 <see cref="T:System.Uri" />。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.SelfLinkBuilder`1.#ctor(System.Func{System.Web.Http.OData.EntityInstanceContext,`0},System.Boolean)">
      <summary>构造 <see cref="T:System.Web.Http.OData.Builder.SelfLinkBuilder`1" /> 的新实例。</summary>
      <param name="linkFactory">链接工厂。</param>
      <param name="followsConventions">工厂是否遵循有关生成链接的 OData 约定。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.SelfLinkBuilder`1.Factory">
      <summary>获取用于生成链接的工厂。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.SelfLinkBuilder`1.FollowsConventions">
      <summary>获取一个布尔值，该值指示链接工厂是否遵循 OData 约定。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.StructuralPropertyConfiguration">
      <summary>所有结构属性配置的基类。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralPropertyConfiguration.#ctor(System.Reflection.PropertyInfo,System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.StructuralPropertyConfiguration" /> 类的新实例。</summary>
      <param name="property">配置的属性。</param>
      <param name="declaringType">属性的声明类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralPropertyConfiguration.OptionalProperty">
      <summary>获取或设置一个值，该值指示此属性是否为可选属性。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration">
      <summary>表示一个可以使用 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" /> 生成的 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.#ctor(System.Web.Http.OData.Builder.ODataModelBuilder,System.Type)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration" /> 类的新实例。</summary>
      <param name="modelBuilder">关联的 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</param>
      <param name="clrType">此 EDM 结构类型的后备 CLR 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.AddCollectionProperty(System.Reflection.PropertyInfo)">
      <summary>将集合属性添加到此 EDM 类型。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.CollectionPropertyConfiguration" />，从而可以进一步对该属性进行配置。</returns>
      <param name="propertyInfo">正在添加的属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.AddComplexProperty(System.Reflection.PropertyInfo)">
      <summary>将复杂属性添加到此 EDM 类型。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.ComplexPropertyConfiguration" />，从而可以进一步对该属性进行配置。</returns>
      <param name="propertyInfo">正在添加的属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.AddProperty(System.Reflection.PropertyInfo)">
      <summary>将基元属性添加到此 EDM 类型。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Builder.PrimitivePropertyConfiguration" />，从而可以进一步对该属性进行配置。</returns>
      <param name="propertyInfo">正在添加的属性。</param>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.ClrType">
      <summary>获取后备 CLR <see cref="T:System.Type" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.ExplicitProperties">
      <summary>获取显式添加的属性的集合。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.FullName">
      <summary>获取此 EDM 类型的全名。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.IgnoredProperties">
      <summary>从支持 CLR 类型中获取要对此 EDM 类型忽略的属性。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.Kind">
      <summary>获取此 EDM 类型的 <see cref="T:Microsoft.Data.Edm.EdmTypeKind" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.ModelBuilder">
      <summary>
        <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.Name">
      <summary>获取此 EDM 类型的名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.Namespace">
      <summary>获取此 EDM 类型的命名空间。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.Properties">
      <summary>获取此 EDM 类型的声明属性。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration.RemovedProperties">
      <summary>获取显式删除的属性的集合。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration.RemoveProperty(System.Reflection.PropertyInfo)">
      <summary>删除给定的属性。</summary>
      <param name="propertyInfo">正在删除的属性。</param>
    </member>
    <member name="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1">
      <summary>表示一个可以使用 <see cref="T:System.Web.Http.OData.Builder.ODataModelBuilder" /> 生成的 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" />。</summary>
      <typeparam name="TStructuralType"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.#ctor(System.Web.Http.OData.Builder.StructuralTypeConfiguration)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1" /> 类的新实例。</summary>
      <param name="configuration">结构类型的内部配置。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.CollectionProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
      <summary>将集合属性添加到 EDM 类型。</summary>
      <returns>一个配置对象，可用于进一步配置属性。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TElementType">集合的元素类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>将复杂属性添加到 EDM 类型。</summary>
      <returns>一个配置对象，可用于进一步配置属性。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TComplexType">复杂类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>从类型中排除某个属性。</summary>
      <param name="propertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="TProperty">属性类型。</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Properties">
      <summary>获取属于此类型的 EDM 结构属性的集合。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>将二进制属性添加到 EDM 类型。</summary>
      <returns>一个配置对象，可用于进一步配置属性。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.IO.Stream}})">
      <summary>将流属性添加到 EDM 类型。</summary>
      <returns>一个配置对象，可用于进一步配置属性。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>将可选的基元属性添加到 EDM 类型。</summary>
      <returns>一个配置对象，可用于进一步配置属性。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="T">基元属性类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>将字符串属性添加到 EDM 类型。</summary>
      <returns>一个配置对象，可用于进一步配置属性。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
    </member>
    <member name="M:System.Web.Http.OData.Builder.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>将必需的基元属性添加到 EDM 类型。</summary>
      <returns>一个配置对象，可用于进一步配置属性。</returns>
      <param name="propertyExpression">一个 lambda 表达式，表示关系的导航属性。例如，C# 中的 t =&gt; t.MyProperty 和 Visual Basic .NET 中的 Function(t) t.MyProperty。</param>
      <typeparam name="T">基元属性类型。</typeparam>
    </member>
    <member name="T:System.Web.Http.OData.Extensions.HttpConfigurationExtensions">
      <summary>为 <see cref="T:System.Web.Http.HttpConfiguration" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpConfigurationExtensions.AddODataQueryFilter(System.Web.Http.HttpConfiguration)">
      <summary>针对返回类型为 <see cref="T:System.Linq.IQueryable" /> 或 <see cref="T:System.Linq.IQueryable`1" /> 的操作启用查询支持。若要避免处理意外查询或恶意查询，请使用 <see cref="T:System.Web.Http.OData.EnableQueryAttribute" /> 上的验证设置以验证传入查询。有关更多信息，请访问 http://go.microsoft.com/fwlink/?LinkId=279712。</summary>
      <param name="configuration">服务器配置。</param>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpConfigurationExtensions.AddODataQueryFilter(System.Web.Http.HttpConfiguration,System.Web.Http.Filters.IActionFilter)">
      <summary>针对返回类型为 <see cref="T:System.Linq.IQueryable" /> 或 <see cref="T:System.Linq.IQueryable`1" /> 的操作启用查询支持。若要避免处理意外查询或恶意查询，请使用 <see cref="T:System.Web.Http.OData.EnableQueryAttribute" /> 上的验证设置以验证传入查询。有关更多信息，请访问 http://go.microsoft.com/fwlink/?LinkId=279712。</summary>
      <param name="configuration">服务器配置。</param>
      <param name="queryFilter">执行查询的操作筛选器。</param>
    </member>
    <member name="T:System.Web.Http.OData.Extensions.HttpErrorExtensions">
      <summary>为 <see cref="T:System.Web.Http.HttpError" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpErrorExtensions.CreateODataError(System.Web.Http.HttpError)">
      <summary>将 <paramref name="httpError" /> 转换为 <see cref="T:Microsoft.Data.OData.ODataError" />。</summary>
      <returns>转换后的 <see cref="T:Microsoft.Data.OData.ODataError" /></returns>
      <param name="httpError">要转换的 <see cref="T:System.Web.Http.HttpError" /> 实例。</param>
    </member>
    <member name="T:System.Web.Http.OData.Extensions.HttpRequestMessageExtensions">
      <summary>为 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,Microsoft.Data.OData.ODataError)">
      <summary>帮助器方法，用于执行内容协商，并创建一个 <see cref="T:System.Net.Http.HttpResponseMessage" />（表示将 <paramref name="oDataError" /> 包装为内容的 <see cref="T:System.Net.Http.ObjectContent`1" /> 的实例存在的错误）。如果找不到格式化程序，则此方法将返回状态为“406 NotAcceptable”的响应。此方法要求 <paramref name="request" /> 已与 <see cref="T:System.Web.Http.HttpConfiguration" /> 的实例相关联。</summary>
      <returns>一个用于包装 <paramref name="oDataError" /> 的错误响应，状态代码为 <paramref name="statusCode" />。</returns>
      <param name="request">感兴趣的请求。</param>
      <param name="statusCode">所创建的响应的状态代码。</param>
      <param name="oDataError">要包装的 OData 错误。</param>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpRequestMessageExtensions.ODataProperties(System.Net.Http.HttpRequestMessage)">
      <summary>获取包含给定 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的 OData 方法和属性的 <see cref="T:System.Web.Http.OData.Extensions.HttpRequestMessageProperties" /> 实例。</summary>
      <returns>通过其给定 <paramref name="request" /> 的 OData 方法和属性可用的对象。</returns>
      <param name="request">感兴趣的请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Extensions.HttpRequestMessageProperties">
      <summary>提供用于 <see cref="M:System.Web.Http.OData.Extensions.HttpRequestMessageExtensions.ODataProperties(System.Net.Http.HttpRequestMessage)" /> 扩展方法的属性。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.Model">
      <summary>获取或设置与请求关联的 EDM 模型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.NextLink">
      <summary>获取或设置 OData 响应的下一个链接。如果没有下一个链接应发回客户端，Getter 将返回 null。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.Path">
      <summary>获取或设置请求的 OData 路径。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.PathHandler">
      <summary>获取或设置用于生成链接的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。如果值当前为 null，则 Getter 将创建默认的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.RouteName">
      <summary>获取或设置用于生成 OData 链接的路由名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.RoutingConventions">
      <summary>获取或设置用于控制器和操作选择的 OData 路由约定。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.RoutingConventionsStore">
      <summary>获取由 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 用来存储任何自定义路由数据的数据存储。首次调用时，Getter 将创建新的 IDictionary&lt;string, object&gt;。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.SelectExpandClause">
      <summary>获取或设置请求的已分析 OData <see cref="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.SelectExpandClause" />。在写入此请求的响应时，<see cref="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter" /> 将使用此信息（如果有）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Extensions.HttpRequestMessageProperties.TotalCount">
      <summary>获取或设置 OData 响应的总计数。如果没有计数应发回客户端，则 Getter 将返回 null。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Extensions.HttpRouteCollectionExtensions">
      <summary>为 <see cref="T:System.Web.Http.HttpRouteCollection" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpRouteCollectionExtensions.MapODataServiceRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel)">
      <summary>映射指定的 OData 路由。</summary>
      <returns>添加的 <see cref="T:System.Web.Http.OData.Routing.ODataRoute" />。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="routeName">要映射的路由的名称。</param>
      <param name="routePrefix">要添加到 OData 路由的路径模板的前缀。</param>
      <param name="model">用于分析 OData 路径的 EDM 模型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpRouteCollectionExtensions.MapODataServiceRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Batch.ODataBatchHandler)">
      <summary>映射指定的 OData 路由。如果已提供 <paramref name="batchHandler" />，它将创建“$batch”终结点以处理批请求。</summary>
      <returns>添加的 <see cref="T:System.Web.Http.OData.Routing.ODataRoute" />。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="routeName">要映射的路由的名称。</param>
      <param name="routePrefix">要添加到 OData 路由的路径模板的前缀。</param>
      <param name="model">用于分析 OData 路径的 EDM 模型。</param>
      <param name="batchHandler">
        <see cref="T:System.Web.Http.OData.Batch.ODataBatchHandler" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpRouteCollectionExtensions.MapODataServiceRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.IODataPathHandler,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention})">
      <summary>映射指定的 OData 路由。</summary>
      <returns>添加的 <see cref="T:System.Web.Http.OData.Routing.ODataRoute" />。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="routeName">要映射的路由的名称。</param>
      <param name="routePrefix">要添加到 OData 路由的路径模板的前缀。</param>
      <param name="model">用于分析 OData 路径的 EDM 模型。</param>
      <param name="pathHandler">用于分析 OData 路径的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</param>
      <param name="routingConventions">要用于控制器和操作选择的 OData 路由约定。</param>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.HttpRouteCollectionExtensions.MapODataServiceRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.IODataPathHandler,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention},System.Web.Http.OData.Batch.ODataBatchHandler)">
      <summary>映射指定的 OData 路由。如果已提供 <paramref name="batchHandler" />，它将创建“$batch”终结点以处理批请求。</summary>
      <returns>添加的 <see cref="T:System.Web.Http.OData.Routing.ODataRoute" />。</returns>
      <param name="routes">应用程序的路由的集合。</param>
      <param name="routeName">要映射的路由的名称。</param>
      <param name="routePrefix">要添加到 OData 路由的路径模板的前缀。</param>
      <param name="model">用于分析 OData 路径的 EDM 模型。</param>
      <param name="pathHandler">用于分析 OData 路径的 <see cref="T:System.Web.Http.OData.Routing.IODataPathHandler" />。</param>
      <param name="routingConventions">要用于控制器和操作选择的 OData 路由约定。</param>
      <param name="batchHandler">
        <see cref="T:System.Web.Http.OData.Batch.ODataBatchHandler" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.Extensions.UrlHelperExtensions">
      <summary>为 <see cref="T:System.Web.Http.Routing.UrlHelper" /> 类提供扩展方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.UrlHelperExtensions.CreateODataLink(System.Web.Http.Routing.UrlHelper,System.Collections.Generic.IList{System.Web.Http.OData.Routing.ODataPathSegment})">
      <summary>使用请求的 OData 路由名称、路径处理程序以及给定的段生成 OData 链接。</summary>
      <returns>生成的 OData 链接。</returns>
      <param name="urlHelper">URL 帮助器。</param>
      <param name="segments">OData 路径段。</param>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.UrlHelperExtensions.CreateODataLink(System.Web.Http.Routing.UrlHelper,System.String,System.Web.Http.OData.Routing.IODataPathHandler,System.Collections.Generic.IList{System.Web.Http.OData.Routing.ODataPathSegment})">
      <summary>使用给定的 OData 路由名称、路径处理程序和段生成 OData 链接。</summary>
      <returns>生成的 OData 链接。</returns>
      <param name="urlHelper">URL 帮助器。</param>
      <param name="routeName">OData 路由的名称。</param>
      <param name="pathHandler">用于生成链接的路径处理程序。</param>
      <param name="segments">OData 路径段。</param>
    </member>
    <member name="M:System.Web.Http.OData.Extensions.UrlHelperExtensions.CreateODataLink(System.Web.Http.Routing.UrlHelper,System.Web.Http.OData.Routing.ODataPathSegment[])">
      <summary>使用请求的 OData 路由名称、路径处理程序以及给定的段生成 OData 链接。</summary>
      <returns>生成的 OData 链接。</returns>
      <param name="urlHelper">URL 帮助器。</param>
      <param name="segments">OData 路径段。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.ODataBinaryValueMediaTypeMapping">
      <summary>用于将二进制属性原始值请求关联到 application/octet-stream 内容类型的媒体类型映射。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataBinaryValueMediaTypeMapping.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.ODataBinaryValueMediaTypeMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataBinaryValueMediaTypeMapping.IsMatch(System.Web.Http.OData.Routing.PropertyAccessPathSegment)"></member>
    <member name="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter">
      <summary>用于处理 OData 的 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> 类。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataPayloadKind})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter" /> 类的新实例。</summary>
      <param name="payloadKinds">此格式化程序支持的负载类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.#ctor(System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider,System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataPayloadKind})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter" /> 类的新实例。</summary>
      <param name="deserializerProvider">要使用的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider" />。</param>
      <param name="serializerProvider">要使用的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider" />。</param>
      <param name="payloadKinds">此格式化程序支持的负载类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.CanReadType(System.Type)"></member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.CanWriteType(System.Type)"></member>
    <member name="P:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.DeserializerProvider">
      <summary>获取此格式化程序实例要使用的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="P:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.MessageReaderQuotas">
      <summary>获取此格式化程序在读取端使用的 <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.MessageReaderSettings">
      <summary>获取在读取请求时要使用的 <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.MessageWriterQuotas">
      <summary>获取此格式化程序在写入端使用的 <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.MessageWriterSettings">
      <summary>获取在写入响应时要使用的 <see cref="T:Microsoft.Data.OData.ODataMessageWriterSettings" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)"></member>
    <member name="P:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.SerializerProvider">
      <summary>获取此格式化程序实例要使用的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)"></member>
    <member name="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatters">
      <summary>用于处理 OData 的 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> 类。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatters.Create">
      <summary>创建一组用于处理 OData 的媒体类型格式化程序。</summary>
      <returns>一组用于处理 OData 的媒体类型格式化程序。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataMediaTypeFormatters.Create(System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider)">
      <summary>创建一系列媒体类型格式化程序，以使用给定的 <paramref name="serializerProvider" /> 和 <paramref name="deserializerProvider" /> 处理 OData。</summary>
      <returns>一组用于处理 OData 的媒体类型格式化程序。</returns>
      <param name="serializerProvider">要使用的序列化程序提供程序。</param>
      <param name="deserializerProvider">要使用的反序列化程序提供程序。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.ODataMetadataLevel">
      <summary>要在 OData 响应中序列化的元数据信息量（对于 JSON 精简模式）。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Formatter.ODataMetadataLevel.Default">
      <summary>正常元数据；用于除 JSON 精简模式以外的任何项（Atom/XML、JSON 详细模式）。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Formatter.ODataMetadataLevel.FullMetadata">
      <summary>JSON 精简模式下的完整元数据。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Formatter.ODataMetadataLevel.MinimalMetadata">
      <summary>JSON 精简模式下的少量元数据。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Formatter.ODataMetadataLevel.NoMetadata">
      <summary>JSON 精简模式下无元数据。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.ODataModelBinderProvider">
      <summary>为 EDM 基元类型提供 <see cref="T:System.Web.Http.ModelBinding.IModelBinder" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataModelBinderProvider.#ctor"></member>
    <member name="M:System.Web.Http.OData.Formatter.ODataModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)"></member>
    <member name="T:System.Web.Http.OData.Formatter.ODataPrimitiveValueMediaTypeMapping">
      <summary>用于关联非二进制基元属性原始值请求与文本/普通内容类型的媒体类型映射。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataPrimitiveValueMediaTypeMapping.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.ODataPrimitiveValueMediaTypeMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataPrimitiveValueMediaTypeMapping.IsMatch(System.Web.Http.OData.Routing.PropertyAccessPathSegment)"></member>
    <member name="T:System.Web.Http.OData.Formatter.ODataRawValueMediaTypeMapping">
      <summary>用于关联属性原始值请求的媒体类型映射。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataRawValueMediaTypeMapping.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.ODataRawValueMediaTypeMapping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataRawValueMediaTypeMapping.IsMatch(System.Web.Http.OData.Routing.PropertyAccessPathSegment)">
      <summary>此方法用于确定 <see cref="T:System.Net.Http.HttpRequestMessage" /> 是否为 OData 原始值请求。</summary>
      <returns>如果请求是 OData 原始值请求，则为 True。</returns>
      <param name="propertySegment">路径的 <see cref="T:System.Web.Http.OData.Routing.PropertyAccessPathSegment" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.ODataRawValueMediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.DefaultODataDeserializerProvider">
      <summary>默认的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.DefaultODataDeserializerProvider.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.DefaultODataDeserializerProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.DefaultODataDeserializerProvider.GetEdmTypeDeserializer(Microsoft.Data.Edm.IEdmTypeReference)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.DefaultODataDeserializerProvider.GetODataDeserializer(Microsoft.Data.Edm.IEdmModel,System.Type,System.Net.Http.HttpRequestMessage)"></member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.DefaultODataDeserializerProvider.Instance">
      <summary>获取 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.DefaultODataDeserializerProvider" /> 的默认实例。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataActionPayloadDeserializer">
      <summary>表示用于读取 OData 操作参数的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataActionPayloadDeserializer.#ctor(System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataActionPayloadDeserializer" /> 类的新实例。</summary>
      <param name="deserializerProvider">用于读取内部对象的反序列化程序提供程序。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataActionPayloadDeserializer.DeserializerProvider">
      <summary>获取用于读取内部对象的反序列化程序提供程序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataActionPayloadDeserializer.Read(Microsoft.Data.OData.ODataMessageReader,System.Type,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataCollectionDeserializer">
      <summary>表示可以读取 OData 集合负载的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataCollectionDeserializer.#ctor(System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataCollectionDeserializer" /> 类的新实例。</summary>
      <param name="deserializerProvider">用于读取内部对象的反序列化程序提供程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataCollectionDeserializer.Read(Microsoft.Data.OData.ODataMessageReader,System.Type,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataCollectionDeserializer.ReadCollectionValue(Microsoft.Data.OData.ODataCollectionValue,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>反序列化给定 <paramref name="readContext" /> 下的给定 <paramref name="collectionValue" />。</summary>
      <returns>已反序列化的集合。</returns>
      <param name="collectionValue">要反序列化的 <see cref="T:Microsoft.Data.OData.ODataCollectionValue" />。</param>
      <param name="elementType">要读取的集合的元素类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataCollectionDeserializer.ReadInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataComplexTypeDeserializer">
      <summary>表示可以读取 OData 复杂类型负载的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataComplexTypeDeserializer.#ctor(System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataComplexTypeDeserializer" /> 类的新实例。</summary>
      <param name="deserializerProvider">用于读取内部对象的反序列化程序提供程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataComplexTypeDeserializer.ReadComplexValue(Microsoft.Data.OData.ODataComplexValue,Microsoft.Data.Edm.IEdmComplexTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>反序列化给定 <paramref name="readContext" /> 下的给定 <paramref name="complexValue" />。</summary>
      <returns>已反序列化的复杂值。</returns>
      <param name="complexValue">要反序列化的复杂值。</param>
      <param name="complexType">要读取的复杂值的 EDM 类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataComplexTypeDeserializer.ReadInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer">
      <summary>
        <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" /> 用于将 ODataMessage 读入 CLR 对象。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer.#ctor(Microsoft.Data.OData.ODataPayloadKind)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" /> 类的新实例。</summary>
      <param name="payloadKind">此反序列化程序处理的负载类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer.ODataPayloadKind">
      <summary>此反序列化程序处理的 ODataPayload 类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer.Read(Microsoft.Data.OData.ODataMessageReader,System.Type,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>使用 messageReader 读取 <see cref="T:Microsoft.Data.OData.IODataRequestMessage" />。</summary>
      <returns>已反序列化的对象。</returns>
      <param name="messageReader">要使用的 messageReader。</param>
      <param name="type">要读入的对象的类型。</param>
      <param name="readContext">读取上下文。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext">
      <summary>此类可以封装从 <see cref="T:System.Web.Http.OData.Formatter.ODataMediaTypeFormatter" /> 传递给 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" /> 的状态和设置。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext.#ctor"></member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext.Model">
      <summary>获取或设置与请求关联的 EDM 模型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext.Path">
      <summary>获取或设置请求的 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext.Request">
      <summary>获取或设置正在反序列化的 HTTP 请求。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext.RequestContext">
      <summary>获取或设置请求上下文。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext.ResourceEdmType">
      <summary>获取或设置请求需要反序列化成的顶级对象的 <see cref="T:Microsoft.Data.Edm.IEdmTypeReference" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext.ResourceType">
      <summary>获取或设置请求需要反序列化成的顶级对象的类型。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider">
      <summary>表示一个可以创建 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" /> 的工厂。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider.#ctor"></member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider.GetEdmTypeDeserializer(Microsoft.Data.Edm.IEdmTypeReference)">
      <summary>获取给定 EDM 类型的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer" />。</summary>
      <returns>可以反序列化给定 EDM 类型的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer" />。</returns>
      <param name="edmType">EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider.GetODataDeserializer(Microsoft.Data.Edm.IEdmModel,System.Type,System.Net.Http.HttpRequestMessage)">
      <summary>获取给定类型的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</summary>
      <returns>可以反序列化给定类型的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</returns>
      <param name="model">EDM 模型。</param>
      <param name="type">CLR 类型。</param>
      <param name="request">要反序列化的请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer">
      <summary>将反序列化为 <see cref="T:Microsoft.Data.Edm.IEdmType" /> 支持的对象的所有 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" /> 的基类。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer.#ctor(Microsoft.Data.OData.ODataPayloadKind)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer" /> 类的新实例。</summary>
      <param name="payloadKind">此反序列化程序读取的 OData 负载类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer.#ctor(Microsoft.Data.OData.ODataPayloadKind,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer" /> 类的新实例。</summary>
      <param name="payloadKind">此反序列化程序处理的 OData 负载类型。</param>
      <param name="deserializerProvider">
        <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider" />。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer.DeserializerProvider">
      <summary>用于反序列化内部项的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEdmTypeDeserializer.ReadInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>将项反序列化为一个新对象，该对象的类型对应于 <paramref name="edmType" />。</summary>
      <returns>已反序列化的对象。</returns>
      <param name="item">要反序列化的项。</param>
      <param name="edmType">要读入的对象的 EDM 类型。</param>
      <param name="readContext">
        <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer">
      <summary>表示用于读取 OData 条目负载的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.#ctor(System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer" /> 类的新实例。</summary>
      <param name="deserializerProvider">用于读取内部对象的反序列化程序提供程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.ApplyNavigationProperties(System.Object,System.Web.Http.OData.Formatter.Deserialization.ODataEntryWithNavigationLinks,Microsoft.Data.Edm.IEdmEntityTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>将 <paramref name="entryWrapper" /> 中的导航属性反序列化为 <paramref name="entityResource" />。</summary>
      <param name="entityResource">应将导航属性读取到的对象。</param>
      <param name="entryWrapper">包含导航属性的条目对象。</param>
      <param name="entityType">实体资源的实体类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.ApplyNavigationProperty(System.Object,System.Web.Http.OData.Formatter.Deserialization.ODataNavigationLinkWithItems,Microsoft.Data.Edm.IEdmEntityTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>将 <paramref name="navigationLinkWrapper" /> 中的导航属性反序列化为 <paramref name="entityResource" />。</summary>
      <param name="entityResource">应将导航属性读取到的对象。</param>
      <param name="navigationLinkWrapper">导航链接。</param>
      <param name="entityType">实体资源的实体类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.ApplyStructuralProperties(System.Object,System.Web.Http.OData.Formatter.Deserialization.ODataEntryWithNavigationLinks,Microsoft.Data.Edm.IEdmEntityTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>将 <paramref name="entryWrapper" /> 中的结构属性反序列化为 <paramref name="entityResource" />。</summary>
      <param name="entityResource">应将结构属性读取到的对象。</param>
      <param name="entryWrapper">包含结构属性的条目对象。</param>
      <param name="entityType">实体资源的实体类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.ApplyStructuralProperty(System.Object,Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmEntityTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>将给定的 <paramref name="structuralProperty" /> 反序列化为 <paramref name="entityResource" />。</summary>
      <param name="entityResource">应将结构属性读取到的对象。</param>
      <param name="structuralProperty">包含结构属性的条目对象。</param>
      <param name="entityType">实体资源的实体类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.CreateEntityResource(Microsoft.Data.Edm.IEdmEntityTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>为给定实体类型创建后备 CLR 对象的新实例。</summary>
      <returns>创建的 CLR 对象。</returns>
      <param name="entityType">要创建的实体的 EDM 类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.Read(Microsoft.Data.OData.ODataMessageReader,System.Type,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.ReadEntry(System.Web.Http.OData.Formatter.Deserialization.ODataEntryWithNavigationLinks,Microsoft.Data.Edm.IEdmEntityTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>反序列化给定 <paramref name="readContext" /> 下的给定 <paramref name="entryWrapper" />。</summary>
      <returns>已反序列化的条目。</returns>
      <param name="entryWrapper">要反序列化的 OData 条目。</param>
      <param name="entityType">要反序列化的条目的实体类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.ReadEntryOrFeed(Microsoft.Data.OData.ODataReader)">
      <summary>从读取器读取 ODataFeed 或 ODataItem。</summary>
      <returns>读取源或条目。</returns>
      <param name="reader">要从中读取的 OData 读取器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityDeserializer.ReadInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataEntityReferenceLinkBase">
      <summary>封装 <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityReferenceLinkBase.#ctor(Microsoft.Data.OData.ODataEntityReferenceLink)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataEntityReferenceLinkBase" /> 的新实例。</summary>
      <param name="item">包装的项。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataEntityReferenceLinkBase.EntityReferenceLink">
      <summary>获取包装的 <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataEntityReferenceLinkDeserializer">
      <summary>表示可以读取 OData 实体引用链接负载的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityReferenceLinkDeserializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataEntityReferenceLinkDeserializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntityReferenceLinkDeserializer.Read(Microsoft.Data.OData.ODataMessageReader,System.Type,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataEntryWithNavigationLinks">
      <summary>封装 <see cref="T:Microsoft.Data.OData.ODataEntry" /> 和内部导航链接。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataEntryWithNavigationLinks.#ctor(Microsoft.Data.OData.ODataEntry)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataEntryWithNavigationLinks" /> 的新实例。</summary>
      <param name="item">包装的项。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataEntryWithNavigationLinks.Entry">
      <summary>获取包装的 <see cref="T:Microsoft.Data.OData.ODataEntry" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataEntryWithNavigationLinks.NavigationLinks">
      <summary>获取内部导航链接。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataFeedDeserializer">
      <summary>表示可以读取 OData 源的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataFeedDeserializer.#ctor(System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataFeedDeserializer" /> 类的新实例。</summary>
      <param name="deserializerProvider">用于读取内部对象的反序列化程序提供程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataFeedDeserializer.ReadFeed(System.Web.Http.OData.Formatter.Deserialization.ODataFeedWithEntries,Microsoft.Data.Edm.IEdmEntityTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>反序列化给定 <paramref name="readContext" /> 下的给定 <paramref name="feed" />。</summary>
      <returns>反序列化的源对象。</returns>
      <param name="feed">要反序列化的源。</param>
      <param name="elementType">要读取的源的元素类型。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataFeedDeserializer.ReadInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataFeedWithEntries">
      <summary>封装 <see cref="T:Microsoft.Data.OData.ODataFeed" /> 及其包含的 <see cref="T:Microsoft.Data.OData.ODataEntry" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataFeedWithEntries.#ctor(Microsoft.Data.OData.ODataFeed)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataFeedWithEntries" /> 的新实例。</summary>
      <param name="item">包装的项。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataFeedWithEntries.Entries">
      <summary>获取此源的嵌套条目。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataFeedWithEntries.Feed">
      <summary>获取包装的 <see cref="T:Microsoft.Data.OData.ODataFeed" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataItemBase">
      <summary>包装 <see cref="T:Microsoft.Data.OData.ODataItem" /> 的所有类的基类。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataItemBase.#ctor(Microsoft.Data.OData.ODataItem)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataItemBase" /> 的新实例。</summary>
      <param name="item">包装的项。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataItemBase.Item">
      <summary>获取包装的 <see cref="T:Microsoft.Data.OData.ODataItem" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataNavigationLinkWithItems">
      <summary>封装 <see cref="T:Microsoft.Data.OData.ODataNavigationLink" /> 和嵌套项列表。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataNavigationLinkWithItems.#ctor(Microsoft.Data.OData.ODataNavigationLink)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataNavigationLinkWithItems" /> 的新实例。</summary>
      <param name="item">包装的项。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataNavigationLinkWithItems.NavigationLink">
      <summary>获取包装的 <see cref="T:Microsoft.Data.OData.ODataNavigationLink" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Deserialization.ODataNavigationLinkWithItems.NestedItems">
      <summary>获取属于此导航链接的嵌套项。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Deserialization.ODataPrimitiveDeserializer">
      <summary>表示可以读取 OData 基元类型的 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataDeserializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataPrimitiveDeserializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Deserialization.ODataPrimitiveDeserializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataPrimitiveDeserializer.Read(Microsoft.Data.OData.ODataMessageReader,System.Type,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataPrimitiveDeserializer.ReadInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Deserialization.ODataPrimitiveDeserializer.ReadPrimitive(Microsoft.Data.OData.ODataProperty,System.Web.Http.OData.Formatter.Deserialization.ODataDeserializerContext)">
      <summary>从给定的 <paramref name="primitiveProperty" />（在给定 <paramref name="readContext" /> 下）反序列化基元。</summary>
      <returns>反序列化的 OData 基元值。</returns>
      <param name="primitiveProperty">要反序列化的基元属性。</param>
      <param name="readContext">反序列化程序上下文。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.DefaultODataSerializerProvider">
      <summary>默认的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.DefaultODataSerializerProvider.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.DefaultODataSerializerProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.DefaultODataSerializerProvider.GetEdmTypeSerializer(Microsoft.Data.Edm.IEdmTypeReference)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.DefaultODataSerializerProvider.GetODataPayloadSerializer(Microsoft.Data.Edm.IEdmModel,System.Type,System.Net.Http.HttpRequestMessage)"></member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.DefaultODataSerializerProvider.Instance">
      <summary>获取 <see cref="T:System.Web.Http.OData.Formatter.Serialization.DefaultODataSerializerProvider" /> 的默认实例。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.EntitySelfLinks">
      <summary>EntitySelfLinks 包含实体的 ID、编辑和读取链接。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.EntitySelfLinks.#ctor"></member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.EntitySelfLinks.EditLink">
      <summary>可用于编辑资源副本的 URL。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.EntitySelfLinks.IdLink">
      <summary>用于唯一标识资源的字符串。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.EntitySelfLinks.ReadLink">
      <summary>可用于检索资源副本的 URL。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataCollectionSerializer">
      <summary>用于序列化实体、复杂类型或基元集合的 ODataSerializer。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataCollectionSerializer.#ctor(System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataCollectionSerializer" /> 类的新实例。</summary>
      <param name="serializerProvider">用于序列化嵌套对象的序列化程序提供程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataCollectionSerializer.AddTypeNameAnnotationAsNeeded(Microsoft.Data.OData.ODataCollectionValue,System.Web.Http.OData.Formatter.ODataMetadataLevel)">
      <summary>添加正确执行 json light 序列化所需的类型名称批注。</summary>
      <param name="value">必须为其添加批注的集合值。</param>
      <param name="metadataLevel">响应的 OData 元数据级别。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataCollectionSerializer.CreateODataCollectionValue(System.Collections.IEnumerable,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)">
      <summary>为 <paramref name="enumerable" /> 所表示的可枚举值创建 <see cref="T:Microsoft.Data.OData.ODataCollectionValue" />。</summary>
      <returns>创建的 <see cref="T:Microsoft.Data.OData.ODataCollectionValue" />。</returns>
      <param name="enumerable">要创建的集合的值。</param>
      <param name="elementType">集合的元素 EDM 类型。</param>
      <param name="writeContext">要在创建集合时使用的序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataCollectionSerializer.CreateODataValue(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataCollectionSerializer.WriteCollection(Microsoft.Data.OData.ODataCollectionWriter,System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)">
      <summary>使用给定的 <paramref name="writer" /> 写入给定的 <paramref name="graph" />。</summary>
      <param name="writer">要使用的 <see cref="T:Microsoft.Data.OData.ODataCollectionWriter" />。</param>
      <param name="graph">要写入的集合。</param>
      <param name="collectionType">集合的 EDM 类型。</param>
      <param name="writeContext">序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataCollectionSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataComplexTypeSerializer">
      <summary>用于序列化复杂类型的 ODataSerializer。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataComplexTypeSerializer.#ctor(System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataComplexTypeSerializer" /> 类的新实例。</summary>
      <param name="serializerProvider">用于序列化嵌套对象的序列化程序提供程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataComplexTypeSerializer.CreateODataComplexValue(System.Object,Microsoft.Data.Edm.IEdmComplexTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)">
      <summary>为 <paramref name="graph" /> 所表示的对象创建 <see cref="T:Microsoft.Data.OData.ODataComplexValue" />。</summary>
      <returns>创建的 <see cref="T:Microsoft.Data.OData.ODataComplexValue" />。</returns>
      <param name="graph">要创建的 <see cref="T:Microsoft.Data.OData.ODataComplexValue" /> 的值。</param>
      <param name="complexType">对象的 EDM 复杂类型。</param>
      <param name="writeContext">序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataComplexTypeSerializer.CreateODataValue(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataComplexTypeSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer">
      <summary>表示一个 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />，它可以序列化 <see cref="T:Microsoft.Data.Edm.IEdmType" /> 所支持的对象的实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer.#ctor(Microsoft.Data.OData.ODataPayloadKind)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer" /> 类的新实例。</summary>
      <param name="payloadKind">此序列化程序生成的 OData 负载类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer.#ctor(Microsoft.Data.OData.ODataPayloadKind,System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer" /> 类的新实例。</summary>
      <param name="payloadKind">此序列化程序生成的 OData 负载类型。</param>
      <param name="serializerProvider">用于写入内部对象的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer.CreateODataValue(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)">
      <summary>为 <paramref name="graph" /> 所表示的对象创建 <see cref="T:Microsoft.Data.OData.ODataValue" />。</summary>
      <returns>创建的 <see cref="T:Microsoft.Data.OData.ODataValue" />。</returns>
      <param name="graph">要创建的 <see cref="T:Microsoft.Data.OData.ODataValue" /> 的值。</param>
      <param name="expectedType">由 <paramref name="graph" /> 表示的对象的预期 EDM 类型。</param>
      <param name="writeContext">
        <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext" />。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer.SerializerProvider">
      <summary>获取可用于写入内部对象的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer.WriteObjectInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)">
      <summary>使用给定的 messageWriter 和 writeContext，以现有 OData 消息一部分的形式写入参数图指定的给定对象。</summary>
      <param name="graph">要写入的对象。</param>
      <param name="expectedType">由 <paramref name="graph" /> 表示的对象的预期 EDM 类型。</param>
      <param name="writer">要用于写入的 <see cref="T:Microsoft.Data.OData.ODataWriter" />。</param>
      <param name="writeContext">
        <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataEntityReferenceLinkSerializer">
      <summary>表示用于序列化 $links 响应的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityReferenceLinkSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataEntityReferenceLinkSerializer" /> 的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityReferenceLinkSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataEntityReferenceLinksSerializer">
      <summary>表示用于序列化集合导航属性的 $link 响应的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityReferenceLinksSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataEntityReferenceLinksSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityReferenceLinksSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer">
      <summary>用于序列化 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" /> 实例的 ODataSerializer</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer.#ctor(System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer.CreateEntry(System.Web.Http.OData.Formatter.Serialization.SelectExpandNode,System.Web.Http.OData.EntityInstanceContext)">
      <summary>创建要在写入此条目时写入的 <see cref="T:Microsoft.Data.OData.ODataEntry" />。</summary>
      <returns>创建的 <see cref="T:Microsoft.Data.OData.ODataEntry" />。</returns>
      <param name="selectExpandNode">描述响应图的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode" />。</param>
      <param name="entityInstanceContext">所写入的实体实例的上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer.CreateNavigationLink(Microsoft.Data.Edm.IEdmNavigationProperty,System.Web.Http.OData.EntityInstanceContext)">
      <summary>创建要在写入此条目时写入的 <see cref="T:Microsoft.Data.OData.ODataNavigationLink" />。</summary>
      <returns>要写入的导航链接。</returns>
      <param name="navigationProperty">要为其创建导航链接的导航属性。</param>
      <param name="entityInstanceContext">所写入的实体实例的上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer.CreateODataAction(Microsoft.Data.Edm.IEdmFunctionImport,System.Web.Http.OData.EntityInstanceContext)">
      <summary>创建要为给定操作和实体实例写入的 <see cref="T:Microsoft.Data.OData.ODataAction" />。</summary>
      <returns>已创建的操作；如果不应写入操作，则为 null。</returns>
      <param name="action">OData 操作。</param>
      <param name="entityInstanceContext">所写入的实体实例的上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer.CreateSelectExpandNode(System.Web.Http.OData.EntityInstanceContext)">
      <summary>创建用于描述要在写入该实体时选择和扩展的属性和操作集的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode" />。</summary>
      <returns>用于描述要在写入该实体时选择和扩展的属性和操作集的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode" />。</returns>
      <param name="entityInstanceContext">包含所写入的实体实例和上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer.CreateStructuralProperty(Microsoft.Data.Edm.IEdmStructuralProperty,System.Web.Http.OData.EntityInstanceContext)">
      <summary>创建要为给定实体和结构属性写入的 <see cref="T:Microsoft.Data.OData.ODataProperty" />。</summary>
      <returns>要写入的 <see cref="T:Microsoft.Data.OData.ODataProperty" />。</returns>
      <param name="structuralProperty">所写入的 EDM 结构属性。</param>
      <param name="entityInstanceContext">所写入的实体实例的上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataEntityTypeSerializer.WriteObjectInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataErrorSerializer">
      <summary>表示用于序列化 <see cref="T:Microsoft.Data.OData.ODataError" /> 和 <see cref="T:System.Web.Http.HttpError" /> 的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataErrorSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataErrorSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataFeedSerializer">
      <summary>用于序列化 <see cref="T:Microsoft.Data.Edm.IEdmEntityType" /> 集合的 OData 序列化程序</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataFeedSerializer.#ctor(System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataFeedSerializer" /> 的新实例。</summary>
      <param name="serializerProvider">要用于写入嵌套条目的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataFeedSerializer.CreateODataFeed(System.Collections.IEnumerable,Microsoft.Data.Edm.IEdmCollectionTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)">
      <summary>创建要为给定源实例写入的 <see cref="T:Microsoft.Data.OData.ODataFeed" />。</summary>
      <returns>创建的 <see cref="T:Microsoft.Data.OData.ODataFeed" /> 对象。</returns>
      <param name="feedInstance">表示所写入源的实例。</param>
      <param name="feedType">所写入源的 EDM 类型。</param>
      <param name="writeContext">序列化程序上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataFeedSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataFeedSerializer.WriteObjectInline(System.Object,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataMetadataSerializer">
      <summary>表示用于序列化 $metadata 的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataMetadataSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataMetadataSerializer" /> 的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataMetadataSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataPrimitiveSerializer">
      <summary>表示用于序列化 <see cref="T:Microsoft.Data.Edm.IEdmPrimitiveType" /> 的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataPrimitiveSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataPrimitiveSerializer" /> 的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataPrimitiveSerializer.CreateODataPrimitiveValue(System.Object,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)">
      <summary>为 <paramref name="graph" /> 所表示的对象创建 <see cref="T:Microsoft.Data.OData.ODataPrimitiveValue" />。</summary>
      <returns>创建的 <see cref="T:Microsoft.Data.OData.ODataPrimitiveValue" />。</returns>
      <param name="graph">基元值。</param>
      <param name="primitiveType">值的 EDM 基元类型。</param>
      <param name="writeContext">序列化程序写入上下文。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataPrimitiveSerializer.CreateODataValue(System.Object,Microsoft.Data.Edm.IEdmTypeReference,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataPrimitiveSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataRawValueSerializer">
      <summary>表示用于序列化 <see cref="T:Microsoft.Data.Edm.IEdmPrimitiveType" /> 原始值的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataRawValueSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataPrimitiveSerializer" /> 的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataRawValueSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer">
      <summary>ODataSerializer 用于将 CLR 对象写入 ODataMessage。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataSerializer.#ctor(Microsoft.Data.OData.ODataPayloadKind)">
      <summary>构造可生成指定类型的 OData 负载的 ODataSerializer。</summary>
      <param name="payloadKind">此序列化程序生成的 OData 负载类型。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializer.ODataPayloadKind">
      <summary>获取此序列化程序生成的 <see cref="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializer.ODataPayloadKind" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)">
      <summary>使用给定的 messageWriter 和 writeContext 写入参数 graph 指定的整个给定对象。</summary>
      <param name="graph">要写入的对象</param>
      <param name="type">要写入的对象的类型。</param>
      <param name="messageWriter">要用于写入的 <see cref="T:Microsoft.Data.OData.ODataMessageWriter" />。</param>
      <param name="writeContext">
        <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext">
      <summary>
        <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" /> 在以 OData 消息格式序列化对象时使用的上下文信息。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.#ctor(System.Web.Http.OData.EntityInstanceContext,Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause,Microsoft.Data.Edm.IEdmNavigationProperty)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext" /> 类的新实例。</summary>
      <param name="entity">正在扩展导航属性的实体。</param>
      <param name="selectExpandClause">要扩展的导航属性的 <see cref="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.SelectExpandClause" />。</param>
      <param name="navigationProperty">要扩展的导航属性。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.EntitySet">
      <summary>获取或设置实体集。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.ExpandedEntity">
      <summary>获取或设置要扩展的实体。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.Items">
      <summary>获取与此上下文关联的属性包，以存储泛型数据。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.MetadataLevel">
      <summary>获取或设置响应的元数据级别。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.Model">
      <summary>获取或设置与请求关联的 EDM 模型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.NavigationProperty">
      <summary>获取或设置要扩展的导航属性。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.Path">
      <summary>获取或设置请求的 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.Request">
      <summary>获取或设置正在序列化其响应的 HTTP 请求。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.RequestContext">
      <summary>获取或设置请求上下文。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.RootElementName">
      <summary>获取或设置写入基元类型和复杂类型时使用的根元素名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.SelectExpandClause">
      <summary>获取或设置 <see cref="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.SelectExpandClause" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.SkipExpensiveAvailabilityChecks">
      <summary>获取或设置是否应计算高开销链接。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext.Url">
      <summary>获取或设置用于生成 OData 链接的 <see cref="T:System.Web.Http.Routing.UrlHelper" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider">
      <summary>ODataSerializerProvider 是用于创建 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" /> 的工厂。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider.#ctor"></member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider.GetEdmTypeSerializer(Microsoft.Data.Edm.IEdmTypeReference)">
      <summary>获取给定 edmType 的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataEdmTypeSerializer" />。</summary>
      <returns>
        <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</returns>
      <param name="edmType">
        <see cref="T:Microsoft.Data.Edm.IEdmTypeReference" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataSerializerProvider.GetODataPayloadSerializer(Microsoft.Data.Edm.IEdmModel,System.Type,System.Net.Http.HttpRequestMessage)">
      <summary>获取给定 <paramref name="model" /> 和 <paramref name="type" /> 的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</summary>
      <returns>给定类型的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</returns>
      <param name="model">与请求关联的 EDM 模型。</param>
      <param name="type">要为其请求序列化程序的 <see cref="T:System.Type" />。</param>
      <param name="request">要为其序列化响应的请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.ODataWorkspaceSerializer">
      <summary>表示用于序列化生成 servicedoc 的 <see cref="T:Microsoft.Data.OData.ODataWorkspace" /> 的 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataSerializer" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataWorkspaceSerializer.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Formatter.Serialization.ODataWorkspaceSerializer" /> 的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.ODataWorkspaceSerializer.WriteObject(System.Object,System.Type,Microsoft.Data.OData.ODataMessageWriter,System.Web.Http.OData.Formatter.Serialization.ODataSerializerContext)"></member>
    <member name="T:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode">
      <summary>描述结构属性和导航属性的集，以及在响应中写入 <see cref="T:Microsoft.Data.OData.ODataEntry" /> 时要选择的操作与要扩展的导航属性。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode.#ctor">
      <summary>创建 <see cref="T:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmModel)">
      <summary>创建 <see cref="T:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode" /> 类的新实例，该类描述结构属性集、导航属性以及要为给定 <paramref name="selectExpandClause" /> 选择和扩展的操作。</summary>
      <param name="selectExpandClause">分析的 $select 和 $expand 查询选项。</param>
      <param name="entityType">要写入的条目的实体类型。</param>
      <param name="model">包含给定实体类型的 <see cref="T:Microsoft.Data.Edm.IEdmModel" />。</param>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode.ExpandedNavigationProperties">
      <summary>获取要在响应中扩展的 EDM 导航属性的列表。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode.SelectedActions">
      <summary>获取要包含在响应中的 OData 操作的列表。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode.SelectedNavigationProperties">
      <summary>获取要作为链接包含在响应中的 EDM 导航属性的列表。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Formatter.Serialization.SelectExpandNode.SelectedStructuralProperties">
      <summary>获取要包含在响应中的 EDM 结构属性的列表。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.AllowedArithmeticOperators">
      <summary>允许使用 $filter 进行查询的算术运算符。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Add">
      <summary>与允许在 $filter 中使用“Add”算术运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.All">
      <summary>与允许在 $filter 中使用所有算术运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Divide">
      <summary>与允许在 $filter 中使用“Divide”算术运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Modulo">
      <summary>与允许在 $filter 中使用“Modulo”算术运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Multiply">
      <summary>与允许在 $filter 中使用“Multiply”算术运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.None">
      <summary>与不允许在 $filter 中使用算术运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedArithmeticOperators.Subtract">
      <summary>与允许在 $filter 中使用“Subtract”算术运算符对应的值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.AllowedFunctions">
      <summary>允许使用 $filter 进行查询的函数。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.All">
      <summary>与允许在 $filter 中使用“All”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.AllDateTimeFunctions">
      <summary>与允许在 $filter 中使用所有日期时间相关函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.AllFunctions">
      <summary>与允许在 $filter 中使用所有函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.AllMathFunctions">
      <summary>与允许在 $filter 中使用数学相关函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.AllStringFunctions">
      <summary>与允许在 $filter 中使用所有字符串相关函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Any">
      <summary>与允许在 $filter 中使用“Any”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Cast">
      <summary>与允许在 $filter 中使用“Cast”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Ceiling">
      <summary>与允许在 $filter 中使用“Ceiling”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Concat">
      <summary>与允许在 $filter 中使用“Concat”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Day">
      <summary>与允许在 $filter 中使用“Day”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Days">
      <summary>与允许在 $filter 中使用“Days”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.EndsWith">
      <summary>与允许在 $filter 中使用“EndsWith”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Floor">
      <summary>与允许在 $filter 中使用“Floor”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Hour">
      <summary>与允许在 $filter 中使用“Hour”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Hours">
      <summary>与允许在 $filter 中使用“Hours”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.IndexOf">
      <summary>与允许在 $filter 中使用“IndexOf”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.IsOf">
      <summary>与允许在 $filter 中使用“IsOf”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Length">
      <summary>与允许在 $filter 中使用“Length”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Minute">
      <summary>与允许在 $filter 中使用“Minute”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Minutes">
      <summary>与允许在 $filter 中使用“Minutes”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Month">
      <summary>与允许在 $filter 中使用“Month”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Months">
      <summary>与允许在 $filter 中使用“Months”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.None">
      <summary>与不允许在 $filter 中使用函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Round">
      <summary>与允许在 $filter 中使用“Round”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Second">
      <summary>与允许在 $filter 中使用“Second”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Seconds">
      <summary>与允许在 $filter 中使用“Seconds”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.StartsWith">
      <summary>与允许在 $filter 中使用“StartsWith”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Substring">
      <summary>与允许在 $filter 中使用“Substring”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.SubstringOf">
      <summary>与允许在 $filter 中使用“SubstringOf”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.ToLower">
      <summary>与允许在 $filter 中使用“ToLower”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.ToUpper">
      <summary>与允许在 $filter 中使用“ToUpper”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Trim">
      <summary>与允许在 $filter 中使用“Trim”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Year">
      <summary>与允许在 $filter 中使用“Year”函数对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedFunctions.Years">
      <summary>与允许在 $filter 中使用“Years”函数对应的值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.AllowedLogicalOperators">
      <summary>允许使用 $filter 进行查询的逻辑运算符。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.All">
      <summary>与允许在 $filter 中使用所有逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.And">
      <summary>与允许在 $filter 中使用“And”逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.Equal">
      <summary>与允许在 $filter 中使用“Equal”逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.GreaterThan">
      <summary>与允许在 $filter 中使用“GreaterThan”逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.GreaterThanOrEqual">
      <summary>与允许在 $filter 中使用“GreaterThanOrEqual”逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.LessThan">
      <summary>与允许在 $filter 中使用“LessThan”逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.LessThanOrEqual">
      <summary>与允许在 $filter 中使用“LessThanOrEqual”逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.None">
      <summary>与不允许在 $filter 中使用逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.Not">
      <summary>与允许在 $filter 中使用“Not”逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.NotEqual">
      <summary>与允许在 $filter 中使用“NotEqual”逻辑运算符对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedLogicalOperators.Or">
      <summary>与允许在 $filter 中使用“Or”逻辑运算符对应的值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.AllowedQueryOptions">
      <summary>允许查询的 OData 查询选项。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.All">
      <summary>与允许所有查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Expand">
      <summary>与允许 $expand 查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Filter">
      <summary>与允许 $filter 查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Format">
      <summary>与允许 $format 查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.InlineCount">
      <summary>与允许 $inlinecount 查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.None">
      <summary>与不允许查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.OrderBy">
      <summary>与允许 $orderby 查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Select">
      <summary>与允许 $select 查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Skip">
      <summary>与允许 $skip 查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.SkipToken">
      <summary>与允许 $skiptoken 查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Supported">
      <summary>与 <see cref="T:System.Web.Http.OData.EnableQueryAttribute" /> 支持的默认查询选项对应的值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.AllowedQueryOptions.Top">
      <summary>与允许 $top 查询选项对应的值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.FilterQueryOption">
      <summary>此项定义 $filter OData 查询选项用于查询。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.FilterQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>基于原始 $filter 值和 <see cref="T:System.Web.Http.OData.ODataQueryContext" /> 中的 EdmModel 初始化 <see cref="T:System.Web.Http.OData.Query.FilterQueryOption" /> 的新实例。</summary>
      <param name="rawValue">$filter 查询的原始值。可为 null 或为空。</param>
      <param name="context">包含 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和某些类型信息的 <see cref="T:System.Web.Http.OData.ODataQueryContext" /></param>
    </member>
    <member name="M:System.Web.Http.OData.Query.FilterQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>将 filter 查询应用到给定的 IQueryable。</summary>
      <returns>应用 filter 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">包含所有与查询应用程序相关的设置的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.FilterQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings,System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary>将 filter 查询应用到给定的 IQueryable。</summary>
      <returns>应用 filter 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">包含所有与查询应用程序相关的设置的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />。</param>
      <param name="assembliesResolver">要使用的 <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" />。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.FilterQueryOption.Context">
      <summary>获取给定的 <see cref="T:System.Web.Http.OData.ODataQueryContext" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.FilterQueryOption.FilterClause">
      <summary>获取此查询选项的已分析 <see cref="P:System.Web.Http.OData.Query.FilterQueryOption.FilterClause" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.FilterQueryOption.RawValue">
      <summary>获取原始 $filter 值。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.FilterQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>基于给定的 <paramref name="validationSettings" /> 验证 filter 查询。如果验证失败，将引发 ODataException。</summary>
      <param name="validationSettings">包含所有验证设置的 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 实例。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.FilterQueryOption.Validator">
      <summary>获取或设置 filter 查询验证程序</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.HandleNullPropagationOption">
      <summary>此枚举定义如何处理可查询支持中的 null 传播。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.HandleNullPropagationOption.Default">
      <summary>确定如何在查询撰写期间基于查询提供程序处理 null 传播。这是在 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" /> 中使用的默认值</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.HandleNullPropagationOption.False">
      <summary>在查询撰写期间不处理 null 传播。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.HandleNullPropagationOption.True">
      <summary>在查询撰写期间处理 null 传播。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.InlineCountQueryOption">
      <summary>表示 $inlinecount 查询选项的值，并公开一种方法用于检索满足查询条件的实体数。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.InlineCountQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Query.InlineCountQueryOption" /> 类的新实例。</summary>
      <param name="rawValue">$inlinecount 查询选项的原始值。</param>
      <param name="context">包含 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和某些类型信息的 <see cref="T:System.Web.Http.OData.ODataQueryContext" /></param>
    </member>
    <member name="P:System.Web.Http.OData.Query.InlineCountQueryOption.Context">
      <summary>获取给定的 <see cref="T:System.Web.Http.OData.ODataQueryContext" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.InlineCountQueryOption.GetEntityCount(System.Linq.IQueryable)">
      <summary>如果响应中应该包含内联计数，则获取满足给定查询条件的实体数；否则获取 null。</summary>
      <returns>如果响应中应该包含内联计数，则为满足指定查询条件的实体数；否则为 null。</returns>
      <param name="query">要计算其计数的查询。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.InlineCountQueryOption.RawValue">
      <summary>获取原始 $inlinecount 值。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.InlineCountQueryOption.Value">
      <summary>获取已分析格式的 $inlinecount 值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.InlineCountValue">
      <summary>定义 $inlinecount 查询选项值的枚举。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.InlineCountValue.AllPages">
      <summary>与“allpages”$inlinecount 查询选项值对应。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Query.InlineCountValue.None">
      <summary>与“none”$inlinecount 查询选项值对应。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.IPropertyMapper">
      <summary>将 $select 和 $expand 投影的结果表示为一个 <see cref="T:System.Web.Http.OData.Query.ISelectExpandWrapper" /> 实例。可以通过调用 <see cref="M:System.Web.Http.OData.Query.ISelectExpandWrapper.ToDictionary(System.Func{Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmStructuredType,System.Web.Http.OData.Query.IPropertyMapper})" /> 将该实例投影到 <see cref="T:System.Collections.Generic.IDictionary`2" /> 实例中。该方法将使用函数构造一个 <see cref="T:System.Web.Http.OData.Query.IPropertyMapper" />，后者将该投影中的属性名称映射到所返回 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的键。将 <see cref="T:System.Web.Http.OData.Query.ISelectExpandWrapper" /> 实例转换为 <see cref="T:System.Collections.Generic.IDictionary`2" />（使用上述方法）的主要目的是允许更改 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" /> 中的属性名称，这些名称将在给定的格式化程序序列化 $select 和 $expand 投影期间使用。例如，用于支持特定格式化程序的自定义序列化特性。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.IPropertyMapper.MapProperty(System.String)">
      <summary>定义 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" /> 的 <see cref="T:Microsoft.Data.Edm.IEdmProperty" /> 名称与应在其他上下文中（例如，将 <see cref="T:System.Web.Http.OData.Query.ISelectExpandWrapper" /> 的实例投影到 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的实例时）使用的名称之间的映射</summary>
      <returns>通过对 <see cref="T:System.Web.Http.OData.Query.ISelectExpandWrapper" /> 实例调用 ToDictionary 生成的值，将用作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中此属性的键。</returns>
      <param name="propertyName">
        <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" /> 中由此 <see cref="T:System.Web.Http.OData.Query.ISelectExpandWrapper" /> 实例表示的属性的名称。</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.ISelectExpandWrapper">
      <summary>表示 $select 和 $expand 查询操作的结果。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ISelectExpandWrapper.ToDictionary">
      <summary>将 $select 和 $expand 查询的结果投影到 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" />，表示 $select 和 $expand 结果。</returns>
    </member>
    <member name="M:System.Web.Http.OData.Query.ISelectExpandWrapper.ToDictionary(System.Func{Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmStructuredType,System.Web.Http.OData.Query.IPropertyMapper})">
      <summary>使用给定的 <paramref name="propertyMapperProvider" /> 将 $select 和/或 $expand 查询的结果投影到 <see cref="T:System.Collections.Generic.IDictionary`2" />。<paramref name="propertyMapperProvider" /> 用于获取此 <see cref="T:System.Web.Http.OData.Query.ISelectExpandWrapper" /> 实例表示的 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" /> 的 <see cref="T:System.Web.Http.OData.Query.IPropertyMapper" />。此 <see cref="T:System.Web.Http.OData.Query.IPropertyMapper" /> 将用于将 <see cref="T:System.Web.Http.OData.Query.ISelectExpandWrapper" /> 实例的属性映射到返回的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。例如，可以使用此方法将 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" /> 中的属性名称映射到应该用于序列化此投影包含的属性的名称。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IDictionary`2" />，表示 $select 和 $expand 结果。</returns>
      <param name="propertyMapperProvider">一个函数，该函数为给定 <see cref="T:Microsoft.Data.Edm.IEdmStructuredType" /> 和给定 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 提供 <see cref="T:System.Web.Http.OData.Query.IPropertyMapper" /> 的新实例。</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.ITruncatedCollection">
      <summary>表示截断为给定页面大小的集合。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ITruncatedCollection.IsTruncated">
      <summary>获取一个表示集合是否已截断的值。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ITruncatedCollection.PageSize">
      <summary>获取集合截断成的页面大小。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataQueryOptions">
      <summary>此项定义可用于执行查询撰写的复合 OData 查询选项。此项当前仅支持 $filter、$orderby、$top、$skip 和 $inlinecount。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.#ctor(System.Web.Http.OData.ODataQueryContext,System.Net.Http.HttpRequestMessage)">
      <summary>基于传入的请求以及 <see cref="T:System.Web.Http.OData.ODataQueryContext" /> 中的某些元数据信息初始化 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 类的新实例。</summary>
      <param name="context">包含 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和某些类型信息的 <see cref="T:System.Web.Http.OData.ODataQueryContext" />。</param>
      <param name="request">传入请求消息。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.ApplyTo(System.Linq.IQueryable)">
      <summary>按正确的顺序将单个查询应用到给定的 IQueryable。</summary>
      <returns>应用查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>按正确的顺序将单个查询应用到给定的 IQueryable。</summary>
      <returns>应用查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">要在查询撰写中使用的设置。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.ApplyTo(System.Object,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>使用给定的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" /> 将查询应用到给定的实体。</summary>
      <returns>应用 $select 和 $expand 查询后生成的新实体。</returns>
      <param name="entity">原始实体。</param>
      <param name="querySettings">包含所有与查询应用程序相关的设置的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Context">
      <summary>获取给定的 <see cref="T:System.Web.Http.OData.ODataQueryContext" /></summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Filter">
      <summary>获取 <see cref="T:System.Web.Http.OData.Query.FilterQueryOption" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.InlineCount">
      <summary>获取 <see cref="T:System.Web.Http.OData.Query.InlineCountQueryOption" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.IsSystemQueryOption(System.String)">
      <summary>检查给定的查询选项是否为 OData 系统查询选项。</summary>
      <returns>如果查询选项为 OData 系统查询选项，则返回 true。</returns>
      <param name="queryOptionName">查询选项的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.LimitResults``1(System.Linq.IQueryable{``0},System.Int32,System.Boolean@)">
      <summary>将查询结果限制为最大结果数。</summary>
      <returns>限制的查询结果。</returns>
      <param name="queryable">要限制的可查询结果。</param>
      <param name="limit">查询结果限制。</param>
      <param name="resultsLimited">如果限制了查询结果，则为 true；否则为 false</param>
      <typeparam name="T">实体 CLR 类型</typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.OrderBy">
      <summary>获取 <see cref="T:System.Web.Http.OData.Query.OrderByQueryOption" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.RawValues">
      <summary>获取所有 OData 查询选项的原始字符串</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Request">
      <summary>获取与此实例关联的请求消息。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.SelectExpand">
      <summary>获取 <see cref="T:System.Web.Http.OData.Query.SelectExpandQueryOption" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Skip">
      <summary>获取 <see cref="T:System.Web.Http.OData.Query.SkipQueryOption" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Top">
      <summary>获取 <see cref="T:System.Web.Http.OData.Query.TopQueryOption" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>基于给定的 <paramref name="validationSettings" /> 验证所有 OData 查询，包括 $skip、$top、$orderby 和 $filter。如果验证失败，将引发 ODataException。</summary>
      <param name="validationSettings">包含所有验证设置的 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 实例。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQueryOptions.Validator">
      <summary>获取或设置查询验证程序。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataQueryOptions`1">
      <summary>此项定义可用于执行查询撰写的复合 OData 查询选项。此项当前仅支持 $filter、$orderby、$top 和 $skip。</summary>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions`1.#ctor(System.Web.Http.OData.ODataQueryContext,System.Net.Http.HttpRequestMessage)">
      <summary>基于传入的请求以及 <see cref="T:System.Web.Http.OData.ODataQueryContext" /> 中的某些元数据信息初始化 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 类的新实例。</summary>
      <param name="context">包含 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和某些类型信息的 <see cref="T:System.Web.Http.OData.ODataQueryContext" /></param>
      <param name="request">传入请求消息</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions`1.ApplyTo(System.Linq.IQueryable)">
      <summary>按正确的顺序将单个查询应用到给定的 IQueryable。</summary>
      <returns>应用查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQueryOptions`1.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>按正确的顺序将单个查询应用到给定的 IQueryable。</summary>
      <returns>应用查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">要在查询撰写中使用的设置。</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataQuerySettings">
      <summary>此类描述在查询撰写期间要使用的设置。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQuerySettings.#ctor">
      <summary>实例化 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" /> 类的新实例并初始化默认设置。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataQuerySettings.#ctor(System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>基于现有实例初始化 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" /> 类的新实例。</summary>
      <param name="settings">要从中复制的设置。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQuerySettings.EnableConstantParameterization">
      <summary>获取或设置一个值，该值指示是否应对常量进行参数化。常量参数化可提升 Entity Framework 的性能。</summary>
      <returns>默认值为 true。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQuerySettings.EnsureStableOrdering">
      <summary>获取或设置一个值，该值指示查询撰写是否应在必要时更改原始查询，以确保稳定的排序顺序。</summary>
      <returns>true 值表示应在必要时修改原始查询，以保证稳定的排序顺序。false 值表示可以将排序顺序视为稳定，而无需修改查询。确保稳定排序顺序的查询提供程序应将此值设置为 false。默认值为 true。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQuerySettings.HandleNullPropagation">
      <summary>获取或设置一个值，该值指示在查询撰写期间应如何处理 null 传播。</summary>
      <returns>默认值为 <see cref="F:System.Web.Http.OData.Query.HandleNullPropagationOption.Default" />。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataQuerySettings.PageSize">
      <summary>获取或设置要返回的最大查询结果数。</summary>
      <returns>要返回的最大查询结果数；如果没有限制，则为 null。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataRawQueryOptions">
      <summary>表示来自传入请求的字符串格式的原始查询值。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataRawQueryOptions.#ctor"></member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Expand">
      <summary>从传入请求 URI 中获取原始 $expand 查询值（如果存在）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Filter">
      <summary>从传入请求 URI 中获取原始 $filter 查询值（如果存在）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Format">
      <summary>从传入请求 URI 中获取原始 $format 查询值（如果存在）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.InlineCount">
      <summary>从传入请求 URI 中获取原始 $inlineCount 查询值（如果存在）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.OrderBy">
      <summary>从传入请求 URI 中获取原始 $orderby 查询值（如果存在）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Select">
      <summary>从传入请求 URI 中获取原始 $select 查询值（如果存在）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Skip">
      <summary>从传入请求 URI 中获取原始 $skip 查询值（如果存在）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.SkipToken">
      <summary>从传入请求 URI 中获取原始 $skiptoken 查询值（如果存在）。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataRawQueryOptions.Top">
      <summary>从传入请求 URI 中获取原始 $top 查询值（如果存在）。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.ODataValidationSettings">
      <summary>此类描述用于查询的验证设置。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.ODataValidationSettings.#ctor"></member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedArithmeticOperators">
      <summary>获取或设置允许的算术运算符（包括“add”、“sub”、“mul”、“div”、“mod”）的列表。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedFunctions">
      <summary>获取或设置允许在 $filter 查询中使用的函数的列表。允许的函数包括以下各项：字符串相关：substringof、endswith、startswith、length、indexof、substring、tolower、toupper、trim、concat，例如~/Customers?$filter=length(CompanyName) eq 19 日期时间相关：year、years、month、months、day、days、hour、hours、minute、minutes、second，例如~/Employees?$filter=year(BirthDate) eq 1971 数学相关：round、floor、ceiling。类型相关：isof、cast。集合相关：any、all</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedLogicalOperators">
      <summary>获取或设置允许的逻辑运算符（包括“eq”、“ne”、“gt”、“ge”、“lt”、“le”、“and”、“or”、“not”）的列表。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedOrderByProperties">
      <summary>获取可用作结果排序依据的属性的列表。请注意，此列表在默认情况下为空，这意味着结果可按任何属性排序。例如，提供空集合意味着客户端可按任意属性对可查询结果进行排序。将“Name”添加到此列表表示只允许按 Name 属性对可查询结果进行排序。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.AllowedQueryOptions">
      <summary>获取或设置允许在查询内部使用的查询参数。默认值为所有查询选项，包括 $filter、$skip、$top、$orderby、$expand、$select、$inlineCount、$format 和 $skiptoken。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxAnyAllExpressionDepth">
      <summary>获取或设置嵌套在查询内部的 Any 或 All 元素的最大深度。</summary>
      <returns>嵌套在查询内部的 Any 或 All 元素的最大深度。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxExpansionDepth">
      <summary>获取或设置 $expand 查询选项的最大展开深度。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxNodeCount">
      <summary>获取或设置 $filter 语法树中的最大节点数。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxOrderByNodeCount">
      <summary>获取或设置可按 $orderby 显示的最大表达式数。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxSkip">
      <summary>获取或设置客户端可以请求的最大 $skip 值。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.ODataValidationSettings.MaxTop">
      <summary>获取或设置客户端可以请求的最大 $top 值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.OrderByItNode">
      <summary>表示 $orderby 子句中的 order by 表达式“$it”。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByItNode.#ctor(Microsoft.Data.OData.Query.OrderByDirection)">
      <summary>实例化 <see cref="T:System.Web.Http.OData.Query.OrderByItNode" /> 类的新实例。</summary>
      <param name="direction">此节点的 <see cref="T:Microsoft.Data.OData.Query.OrderByDirection" />。</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.OrderByNode">
      <summary>表示 $orderby 子句中的单个 order by 表达式。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByNode.#ctor(Microsoft.Data.OData.Query.OrderByDirection)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Query.OrderByNode" /> 类的新实例。</summary>
      <param name="direction">排序顺序的方向。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByNode.CreateCollection(Microsoft.Data.OData.Query.SemanticAst.OrderByClause)">
      <summary>从 <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause" /> 实例的链接列表创建 <see cref="T:System.Web.Http.OData.Query.OrderByNode" /> 实例的列表。</summary>
      <returns>新的 <see cref="T:System.Web.Http.OData.Query.OrderByPropertyNode" /> 实例的列表。</returns>
      <param name="orderByClause">
        <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause" /> 链接列表的标头。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByNode.Direction">
      <summary>获取当前节点的 <see cref="T:Microsoft.Data.OData.Query.OrderByDirection" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.OrderByPropertyNode">
      <summary>表示按 <see cref="T:Microsoft.Data.Edm.IEdmProperty" /> 表达式排序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByPropertyNode.#ctor(Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.OData.Query.OrderByDirection)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Query.OrderByPropertyNode" /> 类的新实例。</summary>
      <param name="property">此节点的 <see cref="T:Microsoft.Data.Edm.IEdmProperty" />。</param>
      <param name="direction">此节点的 <see cref="T:Microsoft.Data.OData.Query.OrderByDirection" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByPropertyNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.OrderByClause)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Query.OrderByPropertyNode" /> 类的新实例。</summary>
      <param name="orderByClause">表示属性访问的 orderby 子句。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByPropertyNode.OrderByClause">
      <summary>获取此节点的 <see cref="P:System.Web.Http.OData.Query.OrderByPropertyNode.OrderByClause" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByPropertyNode.Property">
      <summary>获取当前节点的 <see cref="T:Microsoft.Data.Edm.IEdmProperty" />。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.OrderByQueryOption">
      <summary>此项定义 $orderby OData 查询选项用于查询。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>基于原始 $orderby 值和 <see cref="T:System.Web.Http.OData.ODataQueryContext" /> 中的 EdmModel 初始化 <see cref="T:System.Web.Http.OData.Query.OrderByQueryOption" /> 的新实例。</summary>
      <param name="rawValue">$orderby 查询的原始值。可为 null 或为空。</param>
      <param name="context">包含 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和某些类型信息的 <see cref="T:System.Web.Http.OData.ODataQueryContext" /></param>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.ApplyTo(System.Linq.IQueryable)">
      <summary>将 $orderby 查询应用到给定的 IQueryable。</summary>
      <returns>应用 orderby 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>将 $orderby 查询应用到给定的 IQueryable。</summary>
      <returns>应用 orderby 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">包含所有与查询应用程序相关的设置的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.ApplyTo``1(System.Linq.IQueryable{``0})">
      <summary>将 $orderby 查询应用到给定的 IQueryable。</summary>
      <returns>应用 orderby 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>将 $orderby 查询应用到给定的 IQueryable。</summary>
      <returns>应用 orderby 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">包含所有与查询应用程序相关的设置的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />。</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.Context">
      <summary>获取给定的 <see cref="T:System.Web.Http.OData.ODataQueryContext" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.OrderByClause">
      <summary>获取此查询选项的已分析 <see cref="P:System.Web.Http.OData.Query.OrderByQueryOption.OrderByClause" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.OrderByNodes">
      <summary>获取此查询选项的 <see cref="T:System.Web.Http.OData.Query.OrderByPropertyNode" /> 实例的可变列表。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.RawValue">
      <summary>获取原始 $orderby 值。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.OrderByQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>基于给定的 <paramref name="validationSettings" /> 验证 orderby 查询。如果验证失败，将引发 ODataException。</summary>
      <param name="validationSettings">包含所有验证设置的 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 实例。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.OrderByQueryOption.Validator">
      <summary>获取或设置 OrderBy 查询验证程序。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.QueryFilterProvider">
      <summary>
        <see cref="T:System.Web.Http.Filters.IFilterProvider" /> 的实现，它可将操作筛选器应用到返回类型为 <see cref="T:System.Linq.IQueryable" /> 或 <see cref="T:System.Linq.IQueryable`1" /> 且不绑定类型 <see cref="T:System.Web.Http.OData.Query.ODataQueryOptions" /> 的参数的任意操作。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.QueryFilterProvider.#ctor(System.Web.Http.Filters.IActionFilter)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Query.QueryFilterProvider" /> 类的新实例。</summary>
      <param name="queryFilter">执行查询的操作筛选器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.QueryFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>提供要应用到指定操作的筛选器。</summary>
      <returns>要应用到指定操作的筛选器。</returns>
      <param name="configuration">服务器配置。</param>
      <param name="actionDescriptor">要为其提供筛选器的操作的操作描述符。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.QueryFilterProvider.QueryFilter">
      <summary>获取执行查询的操作筛选器。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.SelectExpandQueryOption">
      <summary>表示 OData $select 和 $expand 查询选项。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.SelectExpandQueryOption.#ctor(System.String,System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Query.SelectExpandQueryOption" /> 类的新实例。</summary>
      <param name="select">$select 查询参数值。</param>
      <param name="expand">$select 查询参数值。</param>
      <param name="context">包含 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和某些类型信息的 <see cref="T:System.Web.Http.OData.ODataQueryContext" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.SelectExpandQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>使用给定的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />，将 $select 和 $expand 查询选项应用于给定的 <see cref="T:System.Linq.IQueryable" />。</summary>
      <returns>应用 filter 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="queryable">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="settings">包含所有与查询应用程序相关的设置的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.SelectExpandQueryOption.ApplyTo(System.Object,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>使用给定的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />，将 $select 和 $expand 查询选项应用于给定实体。</summary>
      <returns>应用 $select 和 $expand 查询后生成的新实体。</returns>
      <param name="entity">原始实体。</param>
      <param name="settings">包含所有与查询应用程序相关的设置的 <see cref="T:System.Web.Http.OData.Query.ODataQuerySettings" />。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.SelectExpandQueryOption.Context">
      <summary>获取给定的 <see cref="T:System.Web.Http.OData.ODataQueryContext" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.SelectExpandQueryOption.RawExpand">
      <summary>获取原始 $expand 值。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.SelectExpandQueryOption.RawSelect">
      <summary>获取原始 $select 值。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.SelectExpandQueryOption.SelectExpandClause">
      <summary>获取此查询选项的已分析 <see cref="P:System.Web.Http.OData.Query.SelectExpandQueryOption.SelectExpandClause" />。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.SelectExpandQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>基于给定的 <paramref name="validationSettings" /> 验证 $select 和 $expand 查询。如果验证失败，将引发 ODataException。</summary>
      <param name="validationSettings">包含所有验证设置的 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 实例。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.SelectExpandQueryOption.Validator">
      <summary>获取或设置 $select 和 $expand 查询验证程序。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.SkipQueryOption">
      <summary>此项定义 $skip OData 查询选项用于查询。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.SkipQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>基于原始 $skip 值和 <see cref="T:System.Web.Http.OData.ODataQueryContext" /> 中的 EdmModel 初始化 <see cref="T:System.Web.Http.OData.Query.SkipQueryOption" /> 的新实例。</summary>
      <param name="rawValue">$skip 查询的原始值。可为 null 或为空。</param>
      <param name="context">包含 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和某些类型信息的 <see cref="T:System.Web.Http.OData.ODataQueryContext" /></param>
    </member>
    <member name="M:System.Web.Http.OData.Query.SkipQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>将 $skip 查询应用于给定的 IQueryable。</summary>
      <returns>应用 skip 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">应用此查询选项时要使用的查询设置。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.SkipQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>将 $skip 查询应用于给定的 IQueryable。</summary>
      <returns>应用 skip 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">应用此查询选项时要使用的查询设置。</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Query.SkipQueryOption.Context">
      <summary>获取给定的 <see cref="T:System.Web.Http.OData.ODataQueryContext" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.SkipQueryOption.RawValue">
      <summary>获取原始 $skip 值。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.SkipQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>基于给定的 <paramref name="validationSettings" /> 验证 skip 查询。如果验证失败，将引发 ODataException。</summary>
      <param name="validationSettings">包含所有验证设置的 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 实例。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.SkipQueryOption.Validator">
      <summary>获取或设置 Skip 查询验证程序。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.SkipQueryOption.Value">
      <summary>获取作为已分析整数的 $skip 值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.TopQueryOption">
      <summary>此项定义 $top OData 查询选项用于查询。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.TopQueryOption.#ctor(System.String,System.Web.Http.OData.ODataQueryContext)">
      <summary>基于原始 $top 值和 <see cref="T:System.Web.Http.OData.ODataQueryContext" /> 中的 EdmModel 初始化 <see cref="T:System.Web.Http.OData.Query.TopQueryOption" /> 的新实例。</summary>
      <param name="rawValue">$top 查询的原始值。可为 null 或为空。</param>
      <param name="context">包含 <see cref="T:Microsoft.Data.Edm.IEdmModel" /> 和某些类型信息的 <see cref="T:System.Web.Http.OData.ODataQueryContext" /></param>
    </member>
    <member name="M:System.Web.Http.OData.Query.TopQueryOption.ApplyTo(System.Linq.IQueryable,System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>将 $top 查询应用于给定的 IQueryable。</summary>
      <returns>应用 top 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">应用此查询选项时要使用的查询设置。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.TopQueryOption.ApplyTo``1(System.Linq.IQueryable{``0},System.Web.Http.OData.Query.ODataQuerySettings)">
      <summary>将 $top 查询应用于给定的 IQueryable。</summary>
      <returns>应用 top 查询后生成的新 <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="query">原始 <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="querySettings">应用此查询选项时要使用的查询设置。</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Web.Http.OData.Query.TopQueryOption.Context">
      <summary>获取给定的 <see cref="T:System.Web.Http.OData.ODataQueryContext" />。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.TopQueryOption.RawValue">
      <summary>获取原始 $top 值。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.TopQueryOption.Validate(System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>基于给定的 <paramref name="validationSettings" /> 验证 top 查询。如果验证失败，将引发 ODataException。</summary>
      <param name="validationSettings">包含所有验证设置的 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 实例。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.TopQueryOption.Validator">
      <summary>获取或设置 Top 查询验证程序。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Query.TopQueryOption.Value">
      <summary>获取作为已分析整数的 $top 值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.TruncatedCollection`1">
      <summary>表示可将集合截断为给定页面大小的类。</summary>
      <typeparam name="T">集合元素类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Query.TruncatedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Query.TruncatedCollection`1" /> 类的新实例。</summary>
      <param name="source">要截断的集合。</param>
      <param name="pageSize">页面大小。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.TruncatedCollection`1.#ctor(System.Linq.IQueryable{`0},System.Int32)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Query.TruncatedCollection`1" /> 类的新实例。</summary>
      <param name="source">要截断的可查询集合。</param>
      <param name="pageSize">页面大小。</param>
    </member>
    <member name="P:System.Web.Http.OData.Query.TruncatedCollection`1.IsTruncated"></member>
    <member name="P:System.Web.Http.OData.Query.TruncatedCollection`1.PageSize"></member>
    <member name="T:System.Web.Http.OData.Query.Validators.FilterQueryValidator">
      <summary>表示用于根据 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 验证 <see cref="T:System.Web.Http.OData.Query.FilterQueryOption" /> 的验证程序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.#ctor"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.Validate(System.Web.Http.OData.Query.FilterQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>验证 <see cref="T:System.Web.Http.OData.Query.FilterQueryOption" />。</summary>
      <param name="filterQueryOption">$filter 查询。</param>
      <param name="settings">验证设置。</param>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateAllNode(Microsoft.Data.OData.Query.SemanticAst.AllNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以限制 filter 查询中的“all”查询。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateAnyNode(Microsoft.Data.OData.Query.SemanticAst.AnyNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以限制 filter 查询中的“any”查询。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateArithmeticOperator(Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>针对算术运算符（包括 add、sub、mul、div 和 mod）重写此方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateBinaryOperatorNode(Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以限制 filter 查询中的二进制运算符。这包括除“not”以外的所有逻辑运算符，以及所有数学运算符。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateCollectionPropertyAccessNode(Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以验证集合属性访问器。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateConstantNode(Microsoft.Data.OData.Query.SemanticAst.ConstantNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以限制 filter 查询中的“constant”。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateConvertNode(Microsoft.Data.OData.Query.SemanticAst.ConvertNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以限制 filter 查询中的“cast”。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateEntityCollectionCastNode(Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>如果要验证对实体集合执行的转换，请重写此方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateLogicalOperator(Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以验证 LogicalOperators，例如“eq”、“ne”、“gt”、“ge”、“lt”、“le”、“and”、“or”。请注意，其中不包括“not”。请重写 ValidateUnaryOperatorNode 来自定义“not”。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateNavigationPropertyNode(Microsoft.Data.OData.Query.SemanticAst.QueryNode,Microsoft.Data.Edm.IEdmNavigationProperty,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>针对导航属性节点重写此方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateQueryNode(Microsoft.Data.OData.Query.SemanticAst.QueryNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>如果要访问每个查询节点，请重写此方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateRangeVariable(Microsoft.Data.OData.Query.SemanticAst.RangeVariable,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以验证在 filter 查询中使用的参数。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateSingleEntityCastNode(Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>如果要验证对单个实体执行的转换，请重写此方法。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateSingleValueFunctionCallNode(Microsoft.Data.OData.Query.SingleValueFunctionCallNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以验证 Function 调用，例如“length”、“years”等。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateSingleValuePropertyAccessNode(Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以验证属性访问器。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.FilterQueryValidator.ValidateUnaryOperatorNode(Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>重写此方法可以验证 Not 运算符。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Query.Validators.ODataQueryValidator">
      <summary>表示用于根据 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 验证 OData 查询的验证程序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.ODataQueryValidator.#ctor"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.ODataQueryValidator.Validate(System.Web.Http.OData.Query.ODataQueryOptions,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>验证 OData 查询。</summary>
      <param name="options">要验证的 OData 查询。</param>
      <param name="validationSettings">验证设置。</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.Validators.OrderByQueryValidator">
      <summary>表示用于根据 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 验证 <see cref="T:System.Web.Http.OData.Query.OrderByQueryOption" /> 的验证程序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.OrderByQueryValidator.#ctor"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.OrderByQueryValidator.Validate(System.Web.Http.OData.Query.OrderByQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>验证 <see cref="T:System.Web.Http.OData.Query.OrderByQueryOption" />。</summary>
      <param name="orderByOption">$orderby 查询。</param>
      <param name="validationSettings">验证设置。</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.Validators.SelectExpandQueryValidator">
      <summary>表示用于根据 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 验证 <see cref="T:System.Web.Http.OData.Query.SelectExpandQueryOption" /> 的验证程序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.SelectExpandQueryValidator.#ctor"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.SelectExpandQueryValidator.Validate(System.Web.Http.OData.Query.SelectExpandQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>验证 <see cref="T:System.Web.Http.OData.Query.TopQueryOption" />。</summary>
      <param name="selectExpandQueryOption">$select 和 $expand 查询。</param>
      <param name="validationSettings">验证设置。</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.Validators.SkipQueryValidator">
      <summary>表示用于根据 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 验证 <see cref="T:System.Web.Http.OData.Query.SkipQueryOption" /> 的验证程序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.SkipQueryValidator.#ctor"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.SkipQueryValidator.Validate(System.Web.Http.OData.Query.SkipQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>验证 <see cref="T:System.Web.Http.OData.Query.SkipQueryOption" />。</summary>
      <param name="skipQueryOption">$skip 查询。</param>
      <param name="validationSettings">验证设置。</param>
    </member>
    <member name="T:System.Web.Http.OData.Query.Validators.TopQueryValidator">
      <summary>表示用于根据 <see cref="T:System.Web.Http.OData.Query.ODataValidationSettings" /> 验证 <see cref="T:System.Web.Http.OData.Query.TopQueryOption" /> 的验证程序。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Query.Validators.TopQueryValidator.#ctor"></member>
    <member name="M:System.Web.Http.OData.Query.Validators.TopQueryValidator.Validate(System.Web.Http.OData.Query.TopQueryOption,System.Web.Http.OData.Query.ODataValidationSettings)">
      <summary>验证 <see cref="T:System.Web.Http.OData.Query.TopQueryOption" />。</summary>
      <param name="topQueryOption">$top 查询。</param>
      <param name="validationSettings">验证设置。</param>
    </member>
    <member name="T:System.Web.Http.OData.Results.CreatedODataResult`1">
      <summary>表示一个操作结果，该结果是对具有实体到实体设置的 POST 操作的响应。</summary>
      <typeparam name="T">实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Results.CreatedODataResult`1.#ctor(`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Uri)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Results.CreatedODataResult`1" /> 类的新实例。</summary>
      <param name="entity">创建的实体。</param>
      <param name="contentNegotiator">用于处理内容协商的内容协商者。</param>
      <param name="request">导致此结果的请求消息。</param>
      <param name="formatters">用于协商内容及设置内容格式的格式化程序。</param>
      <param name="locationHeader">所创建实体的位置标头。</param>
    </member>
    <member name="M:System.Web.Http.OData.Results.CreatedODataResult`1.#ctor(`0,System.Web.Http.ApiController)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Results.CreatedODataResult`1" /> 类的新实例。</summary>
      <param name="entity">创建的实体。</param>
      <param name="controller">从中获取执行所需依赖项的控制器。</param>
    </member>
    <member name="P:System.Web.Http.OData.Results.CreatedODataResult`1.ContentNegotiator">
      <summary>获取用于处理内容协商的内容协商者。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Results.CreatedODataResult`1.Entity">
      <summary>获取创建的实体。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Results.CreatedODataResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.OData.Results.CreatedODataResult`1.Formatters">
      <summary>获取用于协商所创建实体并设置其格式的格式化程序。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Results.CreatedODataResult`1.LocationHeader">
      <summary>获取所创建实体的位置标头。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Results.CreatedODataResult`1.Request">
      <summary>获取导致此结果的请求消息。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Results.UpdatedODataResult`1">
      <summary>表示一个操作结果，该结果是对 OData 实体中 PUT、PATCH 或 MERGE 操作的响应。</summary>
      <typeparam name="T">实体类型。</typeparam>
    </member>
    <member name="M:System.Web.Http.OData.Results.UpdatedODataResult`1.#ctor(`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Results.UpdatedODataResult`1" /> 类的新实例。</summary>
      <param name="entity">更新的实体。</param>
      <param name="contentNegotiator">用于处理内容协商的内容协商者。</param>
      <param name="request">导致此结果的请求消息。</param>
      <param name="formatters">用于协商内容及设置内容格式的格式化程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.Results.UpdatedODataResult`1.#ctor(`0,System.Web.Http.ApiController)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Results.UpdatedODataResult`1" /> 类的新实例。</summary>
      <param name="entity">更新的实体。</param>
      <param name="controller">从中获取执行所需依赖项的控制器。</param>
    </member>
    <member name="P:System.Web.Http.OData.Results.UpdatedODataResult`1.ContentNegotiator">
      <summary>获取用于处理内容协商的内容协商者。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Results.UpdatedODataResult`1.Entity">
      <summary>获取更新的实体。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Results.UpdatedODataResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.OData.Results.UpdatedODataResult`1.Formatters">
      <summary>获取用于协商内容及设置内容格式的格式化程序。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Results.UpdatedODataResult`1.Request">
      <summary>获取导致此结果的请求消息。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ActionPathSegment">
      <summary>表示操作调用的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.#ctor(Microsoft.Data.Edm.IEdmFunctionImport)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ActionPathSegment" /> 类的新实例。</summary>
      <param name="action">正在调用的操作。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ActionPathSegment" /> 类的新实例。</summary>
      <param name="actionName">操作的名称。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ActionPathSegment.Action">
      <summary>获取正在调用的操作。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ActionPathSegment.ActionName">
      <summary>获取操作的名称。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ActionPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ActionPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.BatchPathSegment">
      <summary>表示 $batch 段的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.BatchPathSegment.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.BatchPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.BatchPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.BatchPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.BatchPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.CastPathSegment">
      <summary>表示转换的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.#ctor(Microsoft.Data.Edm.IEdmEntityType)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.CastPathSegment" /> 类的新实例。</summary>
      <param name="castType">转换的类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.CastPathSegment" /> 类的新实例。</summary>
      <param name="castTypeName">转换类型的名称。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.CastPathSegment.CastType">
      <summary>获取转换的类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.CastPathSegment.CastTypeName">
      <summary>获取转换类型的名称。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.CastPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.CastPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.DefaultODataPathHandler">
      <summary>将 OData 路径分析为 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />，并将 <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 转换为 OData 链接。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.Link(System.Web.Http.OData.Routing.ODataPath)">
      <summary>将 <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 的实例转换为 OData 链接。</summary>
      <returns>生成的 OData 链接。</returns>
      <param name="path">要转换为链接的 OData 路径。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.Parse(Microsoft.Data.Edm.IEdmModel,System.String)">
      <summary>将指定的 OData 路径分析为 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />，其中包含有关 EDM 类型以及该路径的实体集的附加信息。</summary>
      <returns>路径的已分析表示形式；如果路径与模型不匹配，则为 null。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="odataPath">要分析的 OData 路径。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtCollection(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary>分析集合后面的下一个 OData 路径段。</summary>
      <returns>段的已分析表示形式。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="previous">上一个路径段。</param>
      <param name="previousEdmType">上一个段前面的 OData 路径的 EDM 类型。</param>
      <param name="segment">要分析的段的值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtComplex(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary>分析复杂类型段后面的下一个 OData 路径段。</summary>
      <returns>段的已分析表示形式。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="previous">上一个路径段。</param>
      <param name="previousEdmType">上一个段前面的 OData 路径的 EDM 类型。</param>
      <param name="segment">要分析的段的值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtEntity(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary>分析实体后面的下一个 OData 路径段。</summary>
      <returns>段的已分析表示形式。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="previous">上一个路径段。</param>
      <param name="previousEdmType">上一个段前面的 OData 路径的 EDM 类型。</param>
      <param name="segment">要分析的段的值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtEntityCollection(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary>分析实体集合后面的下一个 OData 路径段。</summary>
      <returns>段的已分析表示形式。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="previous">上一个路径段。</param>
      <param name="previousEdmType">上一个段前面的 OData 路径的 EDM 类型。</param>
      <param name="segment">要分析的段的值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseAtPrimitiveProperty(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary>分析基元属性后面的下一个 OData 路径段。</summary>
      <returns>段的已分析表示形式。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="previous">上一个路径段。</param>
      <param name="previousEdmType">上一个段前面的 OData 路径的 EDM 类型。</param>
      <param name="segment">要分析的段的值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseEntrySegment(Microsoft.Data.Edm.IEdmModel,System.String)">
      <summary>分析服务基 URI 后面的第一个 OData 段。</summary>
      <returns>段的已分析表示形式。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="segment">要分析的段的值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseNextSegment(Microsoft.Data.Edm.IEdmModel,System.Web.Http.OData.Routing.ODataPathSegment,Microsoft.Data.Edm.IEdmType,System.String)">
      <summary>分析下一个 OData 路径段。</summary>
      <returns>段的已分析表示形式。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="previous">上一个路径段。</param>
      <param name="previousEdmType">上一个段前面的 OData 路径的 EDM 类型。</param>
      <param name="segment">要分析的段的值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.DefaultODataPathHandler.ParseSegments(System.String)">
      <summary>将 OData 路径分析为段。</summary>
      <returns>OData 路径的段。</returns>
      <param name="odataPath">OData 路径。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.EntitySetPathSegment">
      <summary>表示实体集的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.#ctor(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.EntitySetPathSegment" /> 类的新实例。</summary>
      <param name="entitySet">所访问的实体集。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.EntitySetPathSegment" /> 类的新实例。</summary>
      <param name="entitySetName">实体集的名称。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.EntitySetPathSegment.EntitySet">
      <summary>获取此段表示的实体集。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.EntitySetPathSegment.EntitySetName">
      <summary>获取实体集的名称。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.EntitySetPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.EntitySetPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.IODataPathHandler">
      <summary>公开将 OData 路径分析为 <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 的功能，并将 <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 转换为 OData 链接。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.IODataPathHandler.Link(System.Web.Http.OData.Routing.ODataPath)">
      <summary>将 <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 的实例转换为 OData 链接。</summary>
      <returns>生成的 OData 链接。</returns>
      <param name="path">要转换为链接的 OData 路径。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.IODataPathHandler.Parse(Microsoft.Data.Edm.IEdmModel,System.String)">
      <summary>将指定的 OData 路径分析为 <see cref="T:System.Web.Http.OData.Routing.ODataPath" />，其中包含有关 EDM 类型以及该路径的实体集的附加信息。</summary>
      <returns>URI 的已分析表示形式；如果 URI 与模型不匹配，则为 null。</returns>
      <param name="model">要用于路径分析的模型。</param>
      <param name="odataPath">要分析的 OData 路径。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.KeyValuePathSegment">
      <summary>一个 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现，表示根据键在实体集合中建立索引。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.KeyValuePathSegment.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.KeyValuePathSegment" /> 类的新实例。</summary>
      <param name="value">要在集合中建立索引使用的键值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.KeyValuePathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.KeyValuePathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.KeyValuePathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.KeyValuePathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Web.Http.OData.Routing.KeyValuePathSegment.Value">
      <summary>获取要在集合中建立索引使用的键值。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Routing.LinksPathSegment">
      <summary>表示 $links 段的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.LinksPathSegment.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.LinksPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.LinksPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.LinksPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.LinksPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.MetadataPathSegment">
      <summary>表示 $metadata 段的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.MetadataPathSegment.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.MetadataPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.MetadataPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.MetadataPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.MetadataPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.NavigationPathSegment">
      <summary>表示导航的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.NavigationPathSegment" /> 类的新实例。</summary>
      <param name="navigationProperty">此段正在访问的导航属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.NavigationPathSegment" /> 类的新实例。</summary>
      <param name="navigationPropertyName">导航属性的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.NavigationPathSegment.NavigationProperty">
      <summary>获取此段正在访问的导航属性。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.NavigationPathSegment.NavigationPropertyName">
      <summary>获取导航属性的名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.NavigationPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.NavigationPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataActionSelector">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /> 的实现，它使用服务器的 OData 路由约定为 OData 请求选择操作。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataActionSelector.#ctor(System.Web.Http.Controllers.IHttpActionSelector)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ODataActionSelector" /> 类的新实例。</summary>
      <param name="innerSelector">要调用的内部控制器选择器。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>返回选择器可以选择的所有 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> 的映射，该映射使用操作字符串作为键。此方法主要由 <see cref="T:System.Web.Http.Description.IApiExplorer" /> 调用，以发现控制器中的所有可能操作。</summary>
      <returns>选择器可以选择的 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> 的映射或 null（如果选择器没有 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> 的已经过良好定义的映射）。</returns>
      <param name="controllerDescriptor">控制器描述符。</param>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>为 <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" /> 选择操作。</summary>
      <returns>选定的操作。</returns>
      <param name="controllerContext">控制器上下文。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataPath">
      <summary>提供 OData 路径的对象表示形式，以及有关 EDM 类型和该路径的实体集的附加信息。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPath.#ctor(System.Collections.Generic.IList{System.Web.Http.OData.Routing.ODataPathSegment})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 类的新实例。</summary>
      <param name="segments">路径的路径段。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPath.#ctor(System.Web.Http.OData.Routing.ODataPathSegment[])">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 类的新实例。</summary>
      <param name="segments">路径的路径段。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPath.EdmType">
      <summary>获取或设置路径的 EDM 类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPath.EntitySet">
      <summary>获取或设置路径的实体集。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPath.PathTemplate">
      <summary>获取描述路径中的段类型的路径模板。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPath.Segments">
      <summary>获取 OData 路径的路径段。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPath.ToString"></member>
    <member name="T:System.Web.Http.OData.Routing.ODataPathParameterBindingAttribute">
      <summary>
        <see cref="T:System.Web.Http.ParameterBindingAttribute" /> 的实现，用于将 <see cref="T:System.Web.Http.OData.Routing.ODataPath" /> 的实例绑定为操作参数。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathParameterBindingAttribute.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>获取参数绑定。</summary>
      <returns>参数绑定。</returns>
      <param name="parameter">参数说明。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataPathRouteConstraint">
      <summary>只与 OData 路径匹配的 <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" /> 的实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathRouteConstraint.#ctor(System.Web.Http.OData.Routing.IODataPathHandler,Microsoft.Data.Edm.IEdmModel,System.String,System.Collections.Generic.IEnumerable{System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention})">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ODataPathRouteConstraint" /> 类的新实例。</summary>
      <param name="pathHandler">用于分析的 OData 路径处理程序。</param>
      <param name="model">用于分析路径的 EDM 模型。</param>
      <param name="routeName">与此约束关联的路由的名称。</param>
      <param name="routingConventions">用于选择控制器名称的 OData 路由约定。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathRouteConstraint.EdmModel">
      <summary>获取用于分析路径的 EDM 模型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>确定此实例是否等于指定的路由。</summary>
      <returns>如果此实例等于指定的路由，则为 true；否则为 false。</returns>
      <param name="request">请求。</param>
      <param name="route">要比较的路由。</param>
      <param name="parameterName">参数名。</param>
      <param name="values">参数值的列表。</param>
      <param name="routeDirection">路由方向。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathRouteConstraint.PathHandler">
      <summary>获取用于分析的 OData 路径处理程序。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathRouteConstraint.RouteName">
      <summary>获取与此约束关联的路由的名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathRouteConstraint.RoutingConventions">
      <summary>获取用于选择控制器名称的 OData 路由约定。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathRouteConstraint.SelectControllerName(System.Web.Http.OData.Routing.ODataPath,System.Net.Http.HttpRequestMessage)">
      <summary>选择要将请求调度到的控制器的名称。</summary>
      <returns>要调度到的控制器的名称；如果无法解析这种控制器，则为 null。</returns>
      <param name="path">请求的 OData 路径。</param>
      <param name="request">请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataPathSegment">
      <summary>提供 OData 路径段的对象表示形式，以及有关 EDM 类型和该路径的实体集的附加信息。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathSegment.#ctor">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataRoute">
      <summary>OData 路由的路由实现。它支持传入路由的路由前缀，以及用于将请求路径分析为 OData 的路径约束。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataRoute.#ctor(System.String,System.Web.Http.OData.Routing.ODataPathRouteConstraint)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ODataRoute" /> 类的新实例。</summary>
      <param name="routePrefix">路由前缀。</param>
      <param name="pathConstraint">OData 路径约束。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataRoute.#ctor(System.String,System.Web.Http.OData.Routing.ODataPathRouteConstraint,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Net.Http.HttpMessageHandler)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.ODataRoute" /> 类的新实例。</summary>
      <param name="routePrefix">路由前缀。</param>
      <param name="pathConstraint">OData 路径约束。</param>
      <param name="defaults">路由的默认值。</param>
      <param name="constraints">路由约束。</param>
      <param name="dataTokens">数据标记。</param>
      <param name="handler">路由的消息处理程序。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})"></member>
    <member name="P:System.Web.Http.OData.Routing.ODataRoute.RoutePrefix">
      <summary>获取路由前缀。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataRouteConstants">
      <summary>此类包含 OData 的路由常量。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.Action">
      <summary>操作名称的路由数据键。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.Batch">
      <summary>OData 批的路由模板后缀。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.ConstraintName">
      <summary>要用于 OData 路径路由约束的参数名称。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.Controller">
      <summary>控制器名称的路由数据键。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.Key">
      <summary>实体键的路由数据键。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.NavigationProperty">
      <summary>操作链接时导航属性名称的路由数据键。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.ODataPath">
      <summary>OData 路径的路由变量名。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.ODataPathTemplate">
      <summary>OData 路径路由变量的通配符路由模板。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.RelatedKey">
      <summary>删除链接时相关键的路由数据键。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataRouteConstants.VersionConstraintName">
      <summary>要用于 OData 版本路由约束的参数名称。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataSegmentKinds">
      <summary>提供 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 的实现的段类型值。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Action">
      <summary>表示一个指示 OData 操作的段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Batch">
      <summary>表示 OData $batch 段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Cast">
      <summary>表示一个指示类型转换的段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.EntitySet">
      <summary>表示一个指示实体集的段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Key">
      <summary>表示一个指示按键索引操作的段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Links">
      <summary>表示 OData $links 段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Metadata">
      <summary>表示 OData $metadata 段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Navigation">
      <summary>表示一个指示导航的段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Property">
      <summary>表示一个指示属性访问权限的段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.ServiceBase">
      <summary>表示服务根段（用于 OData 服务文档）。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Unresolved">
      <summary>表示无法识别的段。</summary>
    </member>
    <member name="F:System.Web.Http.OData.Routing.ODataSegmentKinds.Value">
      <summary>表示 OData $value 段。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ODataVersionConstraint">
      <summary>只与特定 OData 协议版本匹配的 <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" /> 的实现。无论当前版本标头的版本为何，此约束都不会与包含任一 v4.0 OData 版本标头的任何传入请求匹配。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataVersionConstraint.#ctor">
      <summary>创建默认版本范围为 1.0 到 3.0 的 <see cref="T:System.Web.Http.OData.Routing.ODataVersionConstraint" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataVersionConstraint.#ctor(Microsoft.Data.OData.ODataVersion)">
      <summary>创建 <see cref="T:System.Web.Http.OData.Routing.ODataVersionConstraint" /> 类的新实例。此实例将只匹配协议的单个版本。</summary>
      <param name="version">与此实例匹配的协议版本。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataVersionConstraint.#ctor(Microsoft.Data.OData.ODataVersion,Microsoft.Data.OData.ODataVersion)">
      <summary>创建 <see cref="T:System.Web.Http.OData.Routing.ODataVersionConstraint" /> 类的新实例。此实例将只匹配协议的单个版本。</summary>
      <param name="minVersion">与此实例匹配的协议的最低版本。</param>
      <param name="maxVersion">与此实例匹配的协议的最高版本。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ODataVersionConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.OData.Routing.ODataVersionConstraint.MaxVersion">
      <summary>OData 协议的最高版本，OData-Version 或 OData-MaxVersion 请求标头必须使用该版本，才能由具有此路由约束的 OData 服务来处理。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ODataVersionConstraint.MinVersion">
      <summary>OData 协议的最低版本，OData-Version 或 OData-MaxVersion 请求标头必须使用该版本，才能由具有此路由约束的 OData 服务来处理。</summary>
    </member>
    <member name="T:System.Web.Http.OData.Routing.PropertyAccessPathSegment">
      <summary>表示属性访问的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.#ctor(Microsoft.Data.Edm.IEdmProperty)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.PropertyAccessPathSegment" /> 类的新实例。</summary>
      <param name="property">此段正在访问的属性。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.PropertyAccessPathSegment" /> 类的新实例。</summary>
      <param name="propertyName">属性的名称。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.PropertyAccessPathSegment.Property">
      <summary>获取此段正在访问的属性。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.PropertyAccessPathSegment.PropertyName">
      <summary>获取属性的名称。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.PropertyAccessPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.PropertyAccessPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.UnresolvedPathSegment">
      <summary>表示无法解析的段的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.UnresolvedPathSegment.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Web.Http.OData.Routing.UnresolvedPathSegment" /> 类的新实例。</summary>
      <param name="segmentValue">无法解析的段值。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.UnresolvedPathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.UnresolvedPathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.UnresolvedPathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="P:System.Web.Http.OData.Routing.UnresolvedPathSegment.SegmentValue">
      <summary>获取无法解析的段值。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.UnresolvedPathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.ValuePathSegment">
      <summary>表示 $value 段的 <see cref="T:System.Web.Http.OData.Routing.ODataPathSegment" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ValuePathSegment.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.ValuePathSegment.GetEdmType(Microsoft.Data.Edm.IEdmType)">
      <summary>获取此段的 EDM 类型。</summary>
      <returns>此段的 EDM 类型。</returns>
      <param name="previousEdmType">上一个路径段的 EDM 类型。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ValuePathSegment.GetEntitySet(Microsoft.Data.Edm.IEdmEntitySet)">
      <summary>获取此段的实体集。</summary>
      <returns>此段的实体集。</returns>
      <param name="previousEntitySet">上一个路径段的实体集。</param>
    </member>
    <member name="P:System.Web.Http.OData.Routing.ValuePathSegment.SegmentKind">
      <summary>获取当前段的段类型。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.ValuePathSegment.ToString">
      <summary>返回一个表示此实例的 <see cref="T:System.String" />。</summary>
      <returns>一个表示此实例的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.ActionRoutingConvention">
      <summary>处理操作调用的 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 的实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.ActionRoutingConvention.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.ActionRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary>为 OData 请求选择操作。</summary>
      <returns>如果不按此约定处理请求，则为 null；否则为所选操作的名称</returns>
      <param name="odataPath">OData 路径。</param>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionMap">操作映射。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.EntityRoutingConvention">
      <summary>根据键对实体处理操作的 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 的实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntityRoutingConvention.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntityRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary>为 OData 请求选择操作。</summary>
      <returns>如果不按此约定处理请求，则为 null；否则为所选操作的名称</returns>
      <param name="odataPath">OData 路径。</param>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionMap">操作映射。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention">
      <summary>处理实体集的 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 的实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary>为 OData 请求选择操作。</summary>
      <returns>如果不按此约定处理请求，则为 null；否则为所选操作的名称</returns>
      <param name="odataPath">OData 路径。</param>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionMap">操作映射。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.EntitySetRoutingConvention.SelectController(System.Web.Http.OData.Routing.ODataPath,System.Net.Http.HttpRequestMessage)">
      <summary>为 OData 请求选择控制器。</summary>
      <returns>如果不按此约定处理请求，则为 null；否则为所选控制器的名称</returns>
      <param name="odataPath">OData 路径。</param>
      <param name="request">请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention">
      <summary>提供抽象以便为 OData 请求选择控制器和操作。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary>为 OData 请求选择操作。</summary>
      <returns>如果不按此约定处理请求，则为 null；否则为所选操作的名称</returns>
      <param name="odataPath">OData 路径。</param>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionMap">操作映射。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention.SelectController(System.Web.Http.OData.Routing.ODataPath,System.Net.Http.HttpRequestMessage)">
      <summary>为 OData 请求选择控制器。</summary>
      <returns>如果不按此约定处理请求，则为 null；否则为所选控制器的名称</returns>
      <param name="odataPath">OData 路径。</param>
      <param name="request">请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.LinksRoutingConvention">
      <summary>处理链接操作的 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 的实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.LinksRoutingConvention.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.LinksRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary>选择操作。</summary>
      <param name="odataPath">OData 路径。</param>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionMap">操作映射。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention">
      <summary>处理 OData 元数据请求的 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 的实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary>为 OData 请求选择操作。</summary>
      <returns>如果不按此约定处理请求，则为 null；否则为所选操作的名称</returns>
      <param name="odataPath">OData 路径。</param>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionMap">操作映射。</param>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.MetadataRoutingConvention.SelectController(System.Web.Http.OData.Routing.ODataPath,System.Net.Http.HttpRequestMessage)">
      <summary>为 OData 请求选择控制器。</summary>
      <returns>如果不按此约定处理请求，则为 null；否则为所选控制器的名称</returns>
      <param name="odataPath">OData 路径。</param>
      <param name="request">请求。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.NavigationRoutingConvention">
      <summary>处理导航属性的 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 的实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.NavigationRoutingConvention.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.NavigationRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary>选择操作。</summary>
      <param name="odataPath">OData 路径。</param>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionMap">操作映射。</param>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.ODataRoutingConventions">
      <summary>提供帮助器方法用于创建路由约定。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.ODataRoutingConventions.CreateDefault">
      <summary>创建默认 OData 路由约定的可变列表。</summary>
      <returns>默认 OData 路由约定的可变列表。</returns>
    </member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.PropertyRoutingConvention">
      <summary>用于处理读取结构属性的 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.PropertyRoutingConvention.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.PropertyRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})"></member>
    <member name="T:System.Web.Http.OData.Routing.Conventions.UnmappedRequestRoutingConvention">
      <summary>始终选择名为 HandleUnmappedRequest 的操作（如果存在该操作）的 <see cref="T:System.Web.Http.OData.Routing.Conventions.IODataRoutingConvention" /> 的实现。</summary>
    </member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.UnmappedRequestRoutingConvention.#ctor"></member>
    <member name="M:System.Web.Http.OData.Routing.Conventions.UnmappedRequestRoutingConvention.SelectAction(System.Web.Http.OData.Routing.ODataPath,System.Web.Http.Controllers.HttpControllerContext,System.Linq.ILookup{System.String,System.Web.Http.Controllers.HttpActionDescriptor})">
      <summary>选择操作。</summary>
      <param name="odataPath">OData 路径。</param>
      <param name="controllerContext">控制器上下文。</param>
      <param name="actionMap">操作映射。</param>
    </member>
  </members>
</doc>